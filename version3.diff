# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1489343387 -3600
#      Sun Mar 12 19:29:47 2017 +0100
# Node ID aee60744466308e2120fe2e762cd5ca0e0c530b9
# Parent  b63485819ffe8f45e32579a7f99a204a134ca119
Fixed: In DECORATE, ACS_NamedExecuteWithResult, ACS_NamedExecute, ACS_NamedExecuteAlways, ACS_NamedLockedExecute and ACS_NamedLockedExecuteDoor executed the script on client and server instead of only on the server (addresses 3012).

diff -r b63485819ffe -r aee607444663 src/thingdef/thingdef_codeptr.cpp
--- a/src/thingdef/thingdef_codeptr.cpp	Sun Mar 05 22:52:46 2017 +0100
+++ b/src/thingdef/thingdef_codeptr.cpp	Sun Mar 12 19:29:47 2017 +0100
@@ -5549,6 +5549,10 @@
 	ACTION_PARAM_INT(arg3, 3);
 	ACTION_PARAM_INT(arg4, 4);
 
+	// [BB] This is handled server-side.
+	if ( NETWORK_InClientModeAndActorNotClientHandled( self ) )
+		return;
+
 	bool res = !!P_ExecuteSpecial(ACS_ExecuteWithResult, NULL, self, false, -scriptname, arg1, arg2, arg3, arg4);
 
 	ACTION_SET_RESULT(res);
@@ -5564,6 +5568,10 @@
 	ACTION_PARAM_INT(arg2, 3);
 	ACTION_PARAM_INT(arg3, 4);
 
+	// [BB] This is handled server-side.
+	if ( NETWORK_InClientModeAndActorNotClientHandled( self ) )
+		return;
+
 	bool res = !!P_ExecuteSpecial(ACS_Execute, NULL, self, false, -scriptname, mapnum, arg1, arg2, arg3);
 
 	ACTION_SET_RESULT(res);
@@ -5579,6 +5587,10 @@
 	ACTION_PARAM_INT(arg2, 3);
 	ACTION_PARAM_INT(arg3, 4);
 
+	// [BB] This is handled server-side.
+	if ( NETWORK_InClientModeAndActorNotClientHandled( self ) )
+		return;
+
 	bool res = !!P_ExecuteSpecial(ACS_ExecuteAlways, NULL, self, false, -scriptname, mapnum, arg1, arg2, arg3);
 
 	ACTION_SET_RESULT(res);
@@ -5594,6 +5606,10 @@
 	ACTION_PARAM_INT(arg2, 3);
 	ACTION_PARAM_INT(lock, 4);
 
+	// [BB] This is handled server-side.
+	if ( NETWORK_InClientModeAndActorNotClientHandled( self ) )
+		return;
+
 	bool res = !!P_ExecuteSpecial(ACS_LockedExecute, NULL, self, false, -scriptname, mapnum, arg1, arg2, lock);
 
 	ACTION_SET_RESULT(res);
@@ -5609,6 +5625,10 @@
 	ACTION_PARAM_INT(arg2, 3);
 	ACTION_PARAM_INT(lock, 4);
 
+	// [BB] This is handled server-side.
+	if ( NETWORK_InClientModeAndActorNotClientHandled( self ) )
+		return;
+
 	bool res = !!P_ExecuteSpecial(ACS_LockedExecuteDoor, NULL, self, false, -scriptname, mapnum, arg1, arg2, lock);
 
 	ACTION_SET_RESULT(res);
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1489859686 -3600
#      Sat Mar 18 18:54:46 2017 +0100
# Node ID 3fb9b28e33ff7f28de2c6657109063b29b8ad370
# Parent  aee60744466308e2120fe2e762cd5ca0e0c530b9
fixed a compiler warning

diff -r aee607444663 -r 3fb9b28e33ff src/sv_main.cpp
--- a/src/sv_main.cpp	Sun Mar 12 19:29:47 2017 +0100
+++ b/src/sv_main.cpp	Sat Mar 18 18:54:46 2017 +0100
@@ -1795,7 +1795,7 @@
 	FString			clientVersion;
 	FString			clientPassword;
 	char			szServerPassword[MAX_NETWORK_STRING];
-	LONG			lClientNetworkGameVersion;
+	unsigned int	clientNetworkGameVersion;
 	char			szAddress[4][4];
 	ULONG			ulIdx;
 	NETADDRESS_s	AddressFrom;
@@ -1888,7 +1888,7 @@
 	g_aClients[lClient].WantHideAccount = !!NETWORK_ReadByte( pByteStream );
 
 	// Read in the client's network game version.
-	lClientNetworkGameVersion = NETWORK_ReadByte( pByteStream );
+	clientNetworkGameVersion = NETWORK_ReadByte( pByteStream );
 
 	g_aClients[lClient].SavedPackets.Clear();
 	g_aClients[lClient].PacketBuffer.Clear();
@@ -1914,7 +1914,7 @@
 	}
 
 	// Make sure the network game version matches.
-	if ( NETGAMEVERSION != lClientNetworkGameVersion )
+	if ( NETGAMEVERSION != clientNetworkGameVersion )
 	{
 		SERVER_ClientError( lClient, NETWORK_ERRORCODE_WRONGPROTOCOLVERSION );
 #ifdef CREATE_PACKET_LOG
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1489921310 -3600
#      Sun Mar 19 12:01:50 2017 +0100
# Node ID 163edfd342dd2304bee348dc8c4b0cae1a17f451
# Parent  3fb9b28e33ff7f28de2c6657109063b29b8ad370
Fixed: Blood splatter caused unnecessary network traffic (partially addresses 2655).

diff -r 3fb9b28e33ff -r 163edfd342dd docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sat Mar 18 18:54:46 2017 +0100
+++ b/docs/zandronum-history.txt	Sun Mar 19 12:01:50 2017 +0100
@@ -115,6 +115,7 @@
 -	- Fixed: When the server instructed a client to jump as result of A_Jump*, the client did not call the state function of the state jumped to. [Torr Samaho]
 -	- Fixed: The server didn't fully notify the clients about water splashes. [Torr Samaho]
 -	- Fixed a potential client crash related to the firing sound of a railgun. [Torr Samaho]
+-	- Fixed: Blood splatter caused unnecessary network traffic. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r 3fb9b28e33ff -r 163edfd342dd src/p_mobj.cpp
--- a/src/p_mobj.cpp	Sat Mar 18 18:54:46 2017 +0100
+++ b/src/p_mobj.cpp	Sun Mar 19 12:01:50 2017 +0100
@@ -6621,6 +6621,15 @@
 		mo->vely = pr_splatter.Random2 () << 10;
 		mo->velz = 3*FRACUNIT;
 
+		// [BB] This is not fully synced, but handled with SERVERCOMMANDS_SpawnBloodSplatter.
+		// In order to prevent the server from printing warnings when the server calls P_ExplodeMissile,
+		// we also mark this as SERVERSIDEONLY.
+		if ( NETWORK_GetState () == NETSTATE_SERVER )
+		{
+			mo->ulNetworkFlags |= NETFL_SERVERSIDEONLY;
+			mo->FreeNetID ();
+		}
+
 		// colorize the blood!
 		if (bloodcolor!=0 && !(mo->flags2 & MF2_DONTTRANSLATE)) 
 		{
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1489921921 -3600
#      Sun Mar 19 12:12:01 2017 +0100
# Node ID d66c2f09d1f2debf7cf0dbce1d99a74c6d43cd9c
# Parent  163edfd342dd2304bee348dc8c4b0cae1a17f451
Fixed: A_FiredSpawnRock and A_FiredSplotch caused unnecessary network traffic (partially addresses 2655).

diff -r 163edfd342dd -r d66c2f09d1f2 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun Mar 19 12:01:50 2017 +0100
+++ b/docs/zandronum-history.txt	Sun Mar 19 12:12:01 2017 +0100
@@ -116,6 +116,7 @@
 -	- Fixed: The server didn't fully notify the clients about water splashes. [Torr Samaho]
 -	- Fixed a potential client crash related to the firing sound of a railgun. [Torr Samaho]
 -	- Fixed: Blood splatter caused unnecessary network traffic. [Torr Samaho]
+-	- Fixed: A_FiredSpawnRock and A_FiredSplotch caused unnecessary network traffic. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r 163edfd342dd -r d66c2f09d1f2 src/g_hexen/a_firedemon.cpp
--- a/src/g_hexen/a_firedemon.cpp	Sun Mar 19 12:01:50 2017 +0100
+++ b/src/g_hexen/a_firedemon.cpp	Sun Mar 19 12:12:01 2017 +0100
@@ -61,6 +61,15 @@
 	mo = Spawn (rtype, x, y, z, ALLOW_REPLACE);
 	if (mo)
 	{
+		// [BB] Clients spawn these on their own. In order to prevent the 
+		// server from printing warnings when the server calls P_ExplodeMissile,
+		// we also mark this as SERVERSIDEONLY.
+		if ( NETWORK_GetState () == NETSTATE_SERVER )
+		{
+			mo->ulNetworkFlags |= NETFL_SERVERSIDEONLY;
+			mo->FreeNetID ();
+		}
+
 		mo->target = actor;
 		mo->velx = (pr_firedemonrock() - 128) <<10;
 		mo->vely = (pr_firedemonrock() - 128) <<10;
@@ -266,6 +275,15 @@
 	mo = Spawn ("FireDemonSplotch1", self->x, self->y, self->z, ALLOW_REPLACE);
 	if (mo)
 	{
+		// [BB] Clients spawn these on their own. In order to prevent the 
+		// server from printing warnings when the server calls P_ExplodeMissile,
+		// we also mark this as SERVERSIDEONLY.
+		if ( NETWORK_GetState () == NETSTATE_SERVER )
+		{
+			mo->ulNetworkFlags |= NETFL_SERVERSIDEONLY;
+			mo->FreeNetID ();
+		}
+
 		mo->velx = (pr_firedemonsplotch() - 128) << 11;
 		mo->vely = (pr_firedemonsplotch() - 128) << 11;
 		mo->velz = (pr_firedemonsplotch() << 10) + FRACUNIT*3;
@@ -273,6 +291,15 @@
 	mo = Spawn ("FireDemonSplotch2", self->x, self->y, self->z, ALLOW_REPLACE);
 	if (mo)
 	{
+		// [BB] Clients spawn these on their own. In order to prevent the 
+		// server from printing warnings when the server calls P_ExplodeMissile,
+		// we also mark this as SERVERSIDEONLY.
+		if ( NETWORK_GetState () == NETSTATE_SERVER )
+		{
+			mo->ulNetworkFlags |= NETFL_SERVERSIDEONLY;
+			mo->FreeNetID ();
+		}
+
 		mo->velx = (pr_firedemonsplotch() - 128) << 11;
 		mo->vely = (pr_firedemonsplotch() - 128) << 11;
 		mo->velz = (pr_firedemonsplotch() << 10) + FRACUNIT*3;
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1489957133 -3600
#      Sun Mar 19 21:58:53 2017 +0100
# Node ID 16ef985b4dadbd09dccafdfb91601dcb3d089d19
# Parent  d66c2f09d1f2debf7cf0dbce1d99a74c6d43cd9c
The CVAR gl_mask_threshold is now restricted to beta builds (fixes 3035).

diff -r d66c2f09d1f2 -r 16ef985b4dad docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun Mar 19 12:12:01 2017 +0100
+++ b/docs/zandronum-history.txt	Sun Mar 19 21:58:53 2017 +0100
@@ -130,7 +130,7 @@
 !	- con_virtualwidth and con_virtualheight now default to 640 and 480, respectively. [Dusk]
 !	- kickfromgame and kickfromgame_idx have been renamed to forcespec and forcespec_idx, respectively, though the old names still exist for compatibility with e.g. aliases. Same also with the ACS function KickFromGame, whose new name is ForceToSpectate.
 !	- A new non-fatal 'Script Error' message will be printed if in a MAPINFO episode definition it's present either 'botskillname' or 'botskillpicname' but not 'botepisode'.
-!	- The CVARs gl_render_things, gl_render_walls and gl_render_flats are now restricted to beta builds. [Torr Samaho]
+!	- The CVARs gl_render_things, gl_render_walls, gl_render_flats and gl_mask_threshold are now restricted to beta builds. [Torr Samaho]
 !	- Make newly connected clients wait before calling a vote. The wait time is controlled with the new CVAR 'sv_voteconnectwait'. [Ru5tK1ng]
 !	- Keys can now be used while a client side demo is played. This allows binds to CCMDs like demo_pause to be used during playback. [Torr Samaho]
 !	- Dead spectators will now preserve inventory so that they can be respawned with it. [Zalewa]
diff -r d66c2f09d1f2 -r 16ef985b4dad src/gl/scene/gl_scene.cpp
--- a/src/gl/scene/gl_scene.cpp	Sun Mar 19 12:12:01 2017 +0100
+++ b/src/gl/scene/gl_scene.cpp	Sun Mar 19 21:58:53 2017 +0100
@@ -83,7 +83,8 @@
 //==========================================================================
 CVAR(Bool, gl_texture, true, 0)
 CVAR(Bool, gl_no_skyclear, false, CVAR_ARCHIVE|CVAR_GLOBALCONFIG)
-CVAR(Float, gl_mask_threshold, 0.5f,CVAR_ARCHIVE|CVAR_GLOBALCONFIG)
+// [BB] Don't allow this in release builds.
+CVAR(Float, gl_mask_threshold, 0.5f,CVAR_ARCHIVE|CVAR_GLOBALCONFIG|CVAR_DEBUGONLY)
 CVAR(Float, gl_mask_sprite_threshold, 0.5f,CVAR_ARCHIVE|CVAR_GLOBALCONFIG)
 CVAR(Bool, gl_forcemultipass, false, 0)
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1490455293 -3600
#      Sat Mar 25 16:21:33 2017 +0100
# Node ID 3dc3179a77a509741a8c85ed52cc0b01982c6ff1
# Parent  16ef985b4dadbd09dccafdfb91601dcb3d089d19
Fixed: Angle arguments in DECORATE didn't work properly on ARM devices like the Raspberry Pi (adapted from the corresponding ZDoom fix, fixes 2773).

diff -r 16ef985b4dad -r 3dc3179a77a5 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun Mar 19 21:58:53 2017 +0100
+++ b/docs/zandronum-history.txt	Sat Mar 25 16:21:33 2017 +0100
@@ -117,6 +117,7 @@
 -	- Fixed a potential client crash related to the firing sound of a railgun. [Torr Samaho]
 -	- Fixed: Blood splatter caused unnecessary network traffic. [Torr Samaho]
 -	- Fixed: A_FiredSpawnRock and A_FiredSplotch caused unnecessary network traffic. [Torr Samaho]
+-	- Fixed: Angle arguments in DECORATE didn't work properly on ARM devices like the Raspberry Pi (adapted from the corresponding ZDoom fix). [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r 16ef985b4dad -r 3dc3179a77a5 src/m_fixed.h
--- a/src/m_fixed.h	Sun Mar 19 21:58:53 2017 +0100
+++ b/src/m_fixed.h	Sat Mar 25 16:21:33 2017 +0100
@@ -141,4 +141,12 @@
 #define FIXED2FLOAT(f)		((f) / float(65536))
 #define FIXED2DBL(f)		((f) / double(65536))
 
+#define ANGLE2DBL(f)		((f) * (90./ANGLE_90))
+#define ANGLE2FLOAT(f)		(float((f) * (90./ANGLE_90)))
+#define FLOAT2ANGLE(f)		((angle_t)xs_CRoundToInt((f) * (ANGLE_90/90.)))
+
+#define ANGLE2RAD(f)		((f) * (M_PI/ANGLE_180))
+#define ANGLE2RADF(f)		((f) * float(M_PI/ANGLE_180))
+#define RAD2ANGLE(f)		((angle_t)xs_CRoundToInt((f) * (ANGLE_180/M_PI)))
+
 #endif
diff -r 16ef985b4dad -r 3dc3179a77a5 src/thingdef/thingdef.h
--- a/src/thingdef/thingdef.h	Sun Mar 19 21:58:53 2017 +0100
+++ b/src/thingdef/thingdef.h	Sat Mar 25 16:21:33 2017 +0100
@@ -430,7 +430,7 @@
 #define ACTION_PARAM_NAME(var,i) \
 	FName var = EvalExpressionName(ParameterIndex+i, self);
 #define ACTION_PARAM_ANGLE(var,i) \
-	angle_t var = angle_t(EvalExpressionF(ParameterIndex+i, self)*ANGLE_90/90.f);
+	angle_t var = FLOAT2ANGLE(EvalExpressionF(ParameterIndex+i, self));
 
 #define ACTION_SET_RESULT(v) if (statecall != NULL) statecall->Result = v;
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491121127 -7200
#      Sun Apr 02 10:18:47 2017 +0200
# Node ID 47fe8282f9dba22a82df0f8c7e606eeed766f461
# Parent  3dc3179a77a509741a8c85ed52cc0b01982c6ff1
Fixed: The server informed the clients about the position of the other players during intermission, which generated unnecessary network traffic.

diff -r 3dc3179a77a5 -r 47fe8282f9db docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sat Mar 25 16:21:33 2017 +0100
+++ b/docs/zandronum-history.txt	Sun Apr 02 10:18:47 2017 +0200
@@ -118,6 +118,7 @@
 -	- Fixed: Blood splatter caused unnecessary network traffic. [Torr Samaho]
 -	- Fixed: A_FiredSpawnRock and A_FiredSplotch caused unnecessary network traffic. [Torr Samaho]
 -	- Fixed: Angle arguments in DECORATE didn't work properly on ARM devices like the Raspberry Pi (adapted from the corresponding ZDoom fix). [Torr Samaho]
+-	- Fixed: The server informed the clients about the position of the other players during intermission, which generated unnecessary network traffic. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r 3dc3179a77a5 -r 47fe8282f9db src/sv_main.cpp
--- a/src/sv_main.cpp	Sat Mar 25 16:21:33 2017 +0100
+++ b/src/sv_main.cpp	Sun Apr 02 10:18:47 2017 +0200
@@ -2795,16 +2795,20 @@
 		}
 
 		// See if any players need to be updated to clients.
-		for ( ULONG ulPlayer = 0; ulPlayer < MAXPLAYERS; ulPlayer++ )
+		// [BB] Only necessary if we are in a level.
+		if ( gamestate == GS_LEVEL )
 		{
-			if ( ( playeringame[ulPlayer] == false ) || players[ulPlayer].bSpectating )
-				continue;
-
-			// [BB] The consoleplayer on a client has to be moved differently.
-			if ( ulPlayer == ulIdx )
-				continue;
-
-			SERVERCOMMANDS_MovePlayer( ulPlayer, ulIdx, SVCF_ONLYTHISCLIENT );
+			for ( ULONG ulPlayer = 0; ulPlayer < MAXPLAYERS; ulPlayer++ )
+			{
+				if ( ( playeringame[ulPlayer] == false ) || players[ulPlayer].bSpectating )
+					continue;
+
+				// [BB] The consoleplayer on a client has to be moved differently.
+				if ( ulPlayer == ulIdx )
+					continue;
+
+				SERVERCOMMANDS_MovePlayer( ulPlayer, ulIdx, SVCF_ONLYTHISCLIENT );
+			}
 		}
 
 		// Spectators can move around freely, without us telling it what to do (lag-less).
# HG changeset patch
# User Edoardo Prezioso <edward.san.dev@gmail.com>
# Date 1483007156 -3600
#      Thu Dec 29 11:25:56 2016 +0100
# Node ID ec017d4e4c837240a01f9828304eaff43625f0dc
# Parent  47fe8282f9dba22a82df0f8c7e606eeed766f461
- Fixed: the server erroneously told clients that some slamming actors changed their state to the Spawn state instead of the Idle state (fixes 2969).

diff -r 47fe8282f9db -r ec017d4e4c83 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun Apr 02 10:18:47 2017 +0200
+++ b/docs/zandronum-history.txt	Thu Dec 29 11:25:56 2016 +0100
@@ -119,6 +119,7 @@
 -	- Fixed: A_FiredSpawnRock and A_FiredSplotch caused unnecessary network traffic. [Torr Samaho]
 -	- Fixed: Angle arguments in DECORATE didn't work properly on ARM devices like the Raspberry Pi (adapted from the corresponding ZDoom fix). [Torr Samaho]
 -	- Fixed: The server informed the clients about the position of the other players during intermission, which generated unnecessary network traffic. [Torr Samaho]
+-	- Fixed: the server erroneously told clients that some slamming actors changed their state to the Spawn state instead of the Idle state. [Edward-san]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r 47fe8282f9db -r ec017d4e4c83 src/p_mobj.cpp
--- a/src/p_mobj.cpp	Sun Apr 02 10:18:47 2017 +0200
+++ b/src/p_mobj.cpp	Thu Dec 29 11:25:56 2016 +0100
@@ -2143,7 +2143,7 @@
 				// velocity change.
 				if ( NETWORK_GetState( ) == NETSTATE_SERVER )
 				{
-					SERVERCOMMANDS_SetThingState( mo, mo->SeeState != NULL ? STATE_SEE : STATE_SPAWN );
+					SERVERCOMMANDS_SetThingState( mo, mo->SeeState != NULL ? STATE_SEE : STATE_IDLE );
 					SERVERCOMMANDS_MoveThing( mo, CM_VELX|CM_VELY|CM_VELZ );
 				}
 
@@ -2156,7 +2156,7 @@
 				// velocity change.
 				if ( NETWORK_GetState( ) == NETSTATE_SERVER )
 				{
-					SERVERCOMMANDS_SetThingState( mo, STATE_SPAWN );
+					SERVERCOMMANDS_SetThingState( mo, STATE_IDLE );
 					SERVERCOMMANDS_MoveThing( mo, CM_VELX|CM_VELY|CM_VELZ );
 				}
 
@@ -3765,7 +3765,7 @@
 			{
 				// [BC] If we are the server, tell clients about the state change.
 				if ( NETWORK_GetState( ) == NETSTATE_SERVER )
-					SERVERCOMMANDS_SetThingState( this, SeeState != NULL ? STATE_SEE : STATE_SPAWN );
+					SERVERCOMMANDS_SetThingState( this, SeeState != NULL ? STATE_SEE : STATE_IDLE );
 
 				if (SeeState != NULL) SetState (SeeState);
 				else SetIdle();
@@ -3775,7 +3775,7 @@
 		{
 			// [BB] If we are the server, tell clients about the state change.
 			if ( NETWORK_GetState( ) == NETSTATE_SERVER )
-				SERVERCOMMANDS_SetThingState( this, STATE_SPAWN );
+				SERVERCOMMANDS_SetThingState( this, STATE_IDLE );
 
 			SetIdle();
 			tics = -1;
# HG changeset patch
# User Edoardo Prezioso <edward.san.dev@gmail.com>
# Date 1483007561 -3600
#      Thu Dec 29 11:32:41 2016 +0100
# Node ID 97d4c9f93078a0ec5b50f82d095b8c9670a87d30
# Parent  ec017d4e4c837240a01f9828304eaff43625f0dc
- Fixed: The MinotaurFriend was not handled properly online (fixes 2382).

diff -r ec017d4e4c83 -r 97d4c9f93078 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Thu Dec 29 11:25:56 2016 +0100
+++ b/docs/zandronum-history.txt	Thu Dec 29 11:32:41 2016 +0100
@@ -120,6 +120,7 @@
 -	- Fixed: Angle arguments in DECORATE didn't work properly on ARM devices like the Raspberry Pi (adapted from the corresponding ZDoom fix). [Torr Samaho]
 -	- Fixed: The server informed the clients about the position of the other players during intermission, which generated unnecessary network traffic. [Torr Samaho]
 -	- Fixed: the server erroneously told clients that some slamming actors changed their state to the Spawn state instead of the Idle state. [Edward-san]
+-	- Fixed: The MinotaurFriend was not handled properly online. [Edward-san]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r ec017d4e4c83 -r 97d4c9f93078 src/g_raven/a_minotaur.cpp
--- a/src/g_raven/a_minotaur.cpp	Thu Dec 29 11:25:56 2016 +0100
+++ b/src/g_raven/a_minotaur.cpp	Thu Dec 29 11:32:41 2016 +0100
@@ -720,7 +720,7 @@
 	{ // look for a new target
 		// [BC] If we're the server, set the thing's state.
 		if ( NETWORK_GetState( ) == NETSTATE_SERVER )
-			SERVERCOMMANDS_SetThingFrame( self, self->FindState ("Spawn") );
+			SERVERCOMMANDS_SetThingState( self1, STATE_IDLE );
 
 		self1->SetIdle();
 		return;
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491122323 -7200
#      Sun Apr 02 10:38:43 2017 +0200
# Node ID ab06cd1fa419f694405b8cdd80e7039a7ba8f035
# Parent  97d4c9f93078a0ec5b50f82d095b8c9670a87d30
The memory required for the bot nodes is now dynamically allocated when the first bot is added and freed when the last bot is removed. Thus, the CVAR sv_disallowbots is obsolete and was removed (adapted form Konar6's kpatch).

diff -r 97d4c9f93078 -r ab06cd1fa419 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Thu Dec 29 11:32:41 2016 +0100
+++ b/docs/zandronum-history.txt	Sun Apr 02 10:38:43 2017 +0200
@@ -140,6 +140,7 @@
 !	- Dead spectators will now preserve inventory so that they can be respawned with it. [Zalewa]
 !	- When alive players complete the map in survival, dead spectators will recover their inventory on the next map in accordance to SV_COOP_LOSE* flags [Zalewa]
 +	- The 'authhostname' DNS lookup is not done during startup anymore, but only if the IP address is needed. [Torr Samaho]
+!	- The memory required for the bot nodes is now dynamically allocated when the first bot is added and freed when the last bot is removed. Thus, the CVAR sv_disallowbots is obsolete and was removed (adapted form Konar6's kpatch). [Torr Samaho]
 
 
 2.2
diff -r 97d4c9f93078 -r ab06cd1fa419 src/bots.cpp
--- a/src/bots.cpp	Thu Dec 29 11:32:41 2016 +0100
+++ b/src/bots.cpp	Sun Apr 02 10:38:43 2017 +0200
@@ -660,6 +660,10 @@
 
 	// Refresh the HUD since the number of players in the game is potentially changing.
 	SCOREBOARD_RefreshHUD( );
+
+	// [K6] If there are no more bots left, clear the bot nodes.
+	if ( BOTS_CountBots( ) == 0 && ASTAR_IsInitialized( ) )
+		ASTAR_ClearNodes( );
 }
 
 //*****************************************************************************
@@ -1574,6 +1578,10 @@
 
 	g_bBotIsInitialized[ulPlayerNum] = false;
 
+	// [BB/K6] Make sure that the bot nodes are initialized.
+	if ( ASTAR_IsInitialized( ) == false )
+		ASTAR_BuildNodes( );
+
 	// First, initialize all variables.
 	m_posTarget.x = 0;
 	m_posTarget.y = 0;
@@ -3781,15 +3789,9 @@
 		return;
 	}
 
-	if ( ASTAR_IsInitialized( ) == false )
+	if ( level.flagsZA & LEVEL_ZA_NOBOTNODES )
 	{
-		if ( sv_disallowbots )
-			Printf( "The bot pathing nodes have not been set up. Please set \"sv_disallowbots\" to \"false\" if you wish to use bots.\n" );
-		else if ( level.flagsZA & LEVEL_ZA_NOBOTNODES )
-			Printf( "The bot pathing nodes have not been set up. This level has disabled the ability to do so.\n" );
-		else
-			Printf( "The bot pathing nodes have not been set up. Please reload the level if you wish to use bots.\n" );
-
+		Printf( "The bot pathing nodes have not been set up. This level has disabled the ability to do so.\n" );
 		// Don't allow the bot to spawn.
 		return;
 	}
diff -r 97d4c9f93078 -r ab06cd1fa419 src/p_setup.cpp
--- a/src/p_setup.cpp	Thu Dec 29 11:32:41 2016 +0100
+++ b/src/p_setup.cpp	Sun Apr 02 10:38:43 2017 +0200
@@ -3174,12 +3174,16 @@
 	blockmap = blockmaplump+4;
 
 	// [BC] Also, build the node list for the bot pathing module.
+	// [K6] For the server, this is handled in CSkullBot(), unless we already have bots in game (from the previous map).
 	if (( NETWORK_InClientMode() == false ) &&
 		(( level.flagsZA & LEVEL_ZA_NOBOTNODES ) == false ) &&
-		(( NETWORK_GetState( ) != NETSTATE_SERVER ) || ( sv_disallowbots == false )))
+		(( NETWORK_GetState( ) != NETSTATE_SERVER ) || ( BOTS_CountBots( ) > 0 )))
 	{
 		ASTAR_BuildNodes( );
 	}
+
+	if ( level.flagsZA & LEVEL_ZA_NOBOTNODES || level.flagsZA & LEVEL_ZA_ISLOBBY )
+		BOTS_RemoveAllBots( false );
 }
 
 
diff -r 97d4c9f93078 -r ab06cd1fa419 src/sv_main.cpp
--- a/src/sv_main.cpp	Thu Dec 29 11:32:41 2016 +0100
+++ b/src/sv_main.cpp	Sun Apr 02 10:38:43 2017 +0200
@@ -267,7 +267,6 @@
 CVAR( Bool, sv_timestamp, false, CVAR_ARCHIVE|CVAR_NOSETBYACS )
 CVAR( Int, sv_timestampformat, 0, CVAR_ARCHIVE|CVAR_NOSETBYACS )
 CVAR( Int, sv_colorstripmethod, 0, CVAR_ARCHIVE )
-CVAR( Bool, sv_disallowbots, false, CVAR_ARCHIVE )
 CVAR( Bool, sv_minimizetosystray, true, CVAR_ARCHIVE )
 CVAR( Int, sv_queryignoretime, 10, CVAR_ARCHIVE )
 CVAR( Bool, sv_markchatlines, false, CVAR_ARCHIVE )
diff -r 97d4c9f93078 -r ab06cd1fa419 src/sv_main.h
--- a/src/sv_main.h	Thu Dec 29 11:32:41 2016 +0100
+++ b/src/sv_main.h	Sun Apr 02 10:38:43 2017 +0200
@@ -518,7 +518,6 @@
 EXTERN_CVAR( Bool, sv_timestamp );
 EXTERN_CVAR( Int, sv_timestampformat );
 EXTERN_CVAR( Int, sv_colorstripmethod );
-EXTERN_CVAR( Bool, sv_disallowbots );
 EXTERN_CVAR( Bool, sv_minimizetosystray )
 EXTERN_CVAR( Int, sv_queryignoretime )
 EXTERN_CVAR( Bool, sv_forcelogintojoin )
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491140941 -7200
#      Sun Apr 02 15:49:01 2017 +0200
# Node ID f539b10cb38b7b12c9beee7fbba470d9e8f9f49f
# Parent  ab06cd1fa419f694405b8cdd80e7039a7ba8f035
removed some obsolete code

diff -r ab06cd1fa419 -r f539b10cb38b src/sv_commands.cpp
--- a/src/sv_commands.cpp	Sun Apr 02 10:38:43 2017 +0200
+++ b/src/sv_commands.cpp	Sun Apr 02 15:49:01 2017 +0200
@@ -3436,14 +3436,6 @@
 //
 void SERVERCOMMANDS_DoInventoryPickup( ULONG ulPlayer, const char *pszClassName, const char *pszPickupMessage, ULONG ulPlayerExtra, ServerCommandFlags flags )
 {
-	LONG	lLength;
-
-	lLength = 0;
-	if ( pszClassName )
-		lLength += (LONG)strlen( pszClassName );
-	if ( pszPickupMessage )
-		lLength += (LONG)strlen( pszPickupMessage );
-
 	if ( PLAYER_IsValidPlayer( ulPlayer ) == false )
 		return;
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491153977 -7200
#      Sun Apr 02 19:26:17 2017 +0200
# Node ID df7db7d1c599eea6e8da133a1f33cfcf92986081
# Parent  f539b10cb38b7b12c9beee7fbba470d9e8f9f49f
Backported ZDoom's ACS function GetActorFloorTexture (partially addresses 2979).

diff -r f539b10cb38b -r df7db7d1c599 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun Apr 02 15:49:01 2017 +0200
+++ b/docs/zandronum-history.txt	Sun Apr 02 19:26:17 2017 +0200
@@ -40,6 +40,7 @@
 +	- Added cl_soundwhennotactive CVAR support to non-Windows clients. [Edward-san]
 +	- Added support to clientside ACS_ExecuteWithResult with four arguments. [Edward-san]
 +	- Added sv_survival_nomapresetondeath Zandronum dmflag to modify survival game mode where the map will not be reset on all players death - the players will be able to continue with fresh amount of lives. Dead players will carry over their inventory in accordance to "keep inventory" flags. [Zalewa]
++	- Backported ZDoom's ACS function GetActorFloorTexture. [Torr Samaho]
 -	- Fixed: Newly connecting clients were not properly informed about the secrets that were already revealed. [Torr Samaho]
 -	- Fixed: Resurrect cheat didn't work online. [Dusk]
 -	- Fixed: Turbo cheat didn't work online. [Dusk]
diff -r f539b10cb38b -r df7db7d1c599 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun Apr 02 15:49:01 2017 +0200
+++ b/src/p_acs.cpp	Sun Apr 02 19:26:17 2017 +0200
@@ -4912,6 +4912,9 @@
 	-106 : KickFromGame(2),
 	*/
 
+	// [BB] Out of order ZDoom backport.
+	ACSF_GetActorFloorTexture = 204,
+
 	// [BB] Skulltag functions
 	ACSF_ResetMap = 100,
 	ACSF_PlayerIsSpectator,
@@ -6576,6 +6579,20 @@
 				return ACS_PushAndReturnDynamicString( buffer, stack, stackdepth );
 			}
 
+		case ACSF_GetActorFloorTexture:
+		{
+			auto a = SingleActorFromTID(args[0], activator);
+			if (a != nullptr)
+			{
+				return GlobalACSStrings.AddString(TexMan[a->floorpic]->Name, stack, stackdepth);
+			}
+			else
+			{
+				return GlobalACSStrings.AddString("", stack, stackdepth);
+			}
+			break;
+		}
+
 		default:
 			break;
 	}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491164838 -7200
#      Sun Apr 02 22:27:18 2017 +0200
# Node ID 26a565b197f6e17455a0605d4c18a3eb960d6759
# Parent  df7db7d1c599eea6e8da133a1f33cfcf92986081
Fixed: Offline, the memory required for the bot nodes was always allocated (fixes 2269).

diff -r df7db7d1c599 -r 26a565b197f6 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun Apr 02 19:26:17 2017 +0200
+++ b/docs/zandronum-history.txt	Sun Apr 02 22:27:18 2017 +0200
@@ -141,7 +141,7 @@
 !	- Dead spectators will now preserve inventory so that they can be respawned with it. [Zalewa]
 !	- When alive players complete the map in survival, dead spectators will recover their inventory on the next map in accordance to SV_COOP_LOSE* flags [Zalewa]
 +	- The 'authhostname' DNS lookup is not done during startup anymore, but only if the IP address is needed. [Torr Samaho]
-!	- The memory required for the bot nodes is now dynamically allocated when the first bot is added and freed when the last bot is removed. Thus, the CVAR sv_disallowbots is obsolete and was removed (adapted form Konar6's kpatch). [Torr Samaho]
+!	- The memory required for the bot nodes is now dynamically allocated when the first bot is added and freed when the last bot is removed. Thus, the CVAR sv_disallowbots is obsolete and was removed (adapted form Konar6's kpatch). This also fixes that offline, the memory required for the bot nodes was always allocated. [Torr Samaho]
 
 
 2.2
diff -r df7db7d1c599 -r 26a565b197f6 src/p_setup.cpp
--- a/src/p_setup.cpp	Sun Apr 02 19:26:17 2017 +0200
+++ b/src/p_setup.cpp	Sun Apr 02 22:27:18 2017 +0200
@@ -3174,10 +3174,10 @@
 	blockmap = blockmaplump+4;
 
 	// [BC] Also, build the node list for the bot pathing module.
-	// [K6] For the server, this is handled in CSkullBot(), unless we already have bots in game (from the previous map).
+	// [K6/BB] This is handled in CSkullBot(), unless we already have bots in game (from the previous map).
 	if (( NETWORK_InClientMode() == false ) &&
 		(( level.flagsZA & LEVEL_ZA_NOBOTNODES ) == false ) &&
-		(( NETWORK_GetState( ) != NETSTATE_SERVER ) || ( BOTS_CountBots( ) > 0 )))
+		( BOTS_CountBots( ) > 0 ))
 	{
 		ASTAR_BuildNodes( );
 	}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491654712 -7200
#      Sat Apr 08 14:31:52 2017 +0200
# Node ID efd6fcde65933bd78cc356f4b90831670adf803d
# Parent  26a565b197f6e17455a0605d4c18a3eb960d6759
Only tick the outgoing packet buffer for valid clients (addresses 2931).

diff -r 26a565b197f6 -r efd6fcde6593 src/sv_main.cpp
--- a/src/sv_main.cpp	Sun Apr 02 22:27:18 2017 +0200
+++ b/src/sv_main.cpp	Sat Apr 08 14:31:52 2017 +0200
@@ -656,7 +656,12 @@
 
 		// [BB] Send out sheduled packets, respecting sv_maxpacketspertick.
 		for ( ulIdx = 0; ulIdx < MAXPLAYERS; ulIdx++ )
+		{
+			if ( SERVER_IsValidClient( ulIdx ) == false )
+				continue;
+
 			SERVER_GetClient ( ulIdx )->SavedPackets.Tick ( );
+		}
 
 		// Potentially send an update to the master server.
 		SERVER_MASTER_Tick( );
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491655481 -7200
#      Sat Apr 08 14:44:41 2017 +0200
# Node ID fa7998ab3d285024b33a370e9b539fdbfdf9d1e2
# Parent  efd6fcde65933bd78cc356f4b90831670adf803d
updated SQLite to 3.18.0

diff -r efd6fcde6593 -r fa7998ab3d28 sqlite/CMakeLists.txt
--- a/sqlite/CMakeLists.txt	Sat Apr 08 14:31:52 2017 +0200
+++ b/sqlite/CMakeLists.txt	Sat Apr 08 14:44:41 2017 +0200
@@ -1,9 +1,9 @@
 cmake_minimum_required( VERSION 2.4 )
 
 # [BB/EP] Download SQLite archive and extract the sources if necessary.
-set( ZAN_SQLITE_VERSION 3140100 ) # SQL version 3.14.1
-set( ZAN_SQLITE_YEAR 2016 )
-set( ZAN_SQLITE_SHA1 "774a05b8e7c9318111228bd5ad6bf65272f3fe38" )
+set( ZAN_SQLITE_VERSION 3180000 ) # SQL version 3.18.0
+set( ZAN_SQLITE_YEAR 2017 )
+set( ZAN_SQLITE_SHA1 "74559194e1dd9b9d577cac001c0e9d370856671b" )
 set( ZAN_SQLITE_DOWNLOAD_NAME "sqlite-autoconf-${ZAN_SQLITE_VERSION}" )
 set( ZAN_SQLITE_TEMP_ARCHIVE "${CMAKE_CURRENT_SOURCE_DIR}/${ZAN_SQLITE_DOWNLOAD_NAME}.tar.gz" )
 set( ZAN_SQLITE_HASHED_ARCHIVE "${CMAKE_CURRENT_SOURCE_DIR}/sqlite-${ZAN_SQLITE_SHA1}.tar.gz" )
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491656566 -7200
#      Sat Apr 08 15:02:46 2017 +0200
# Node ID f05877ad09e9b14270a56dfe70c0376d6a2f0412
# Parent  fa7998ab3d285024b33a370e9b539fdbfdf9d1e2
The SQLite3 database can now be used in WAL mode. This mode is enabled / disabled with the new CCMDs 'db_enable_wal' / 'db_disable_wal' (addresses 2844).

diff -r fa7998ab3d28 -r f05877ad09e9 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sat Apr 08 14:44:41 2017 +0200
+++ b/docs/zandronum-history.txt	Sat Apr 08 15:02:46 2017 +0200
@@ -41,6 +41,7 @@
 +	- Added support to clientside ACS_ExecuteWithResult with four arguments. [Edward-san]
 +	- Added sv_survival_nomapresetondeath Zandronum dmflag to modify survival game mode where the map will not be reset on all players death - the players will be able to continue with fresh amount of lives. Dead players will carry over their inventory in accordance to "keep inventory" flags. [Zalewa]
 +	- Backported ZDoom's ACS function GetActorFloorTexture. [Torr Samaho]
++	- The SQLite3 database can now be used in WAL mode. This mode is enabled / disabled with the new CCMDs 'db_enable_wal' / 'db_disable_wal'. [Torr Samaho]
 -	- Fixed: Newly connecting clients were not properly informed about the secrets that were already revealed. [Torr Samaho]
 -	- Fixed: Resurrect cheat didn't work online. [Dusk]
 -	- Fixed: Turbo cheat didn't work online. [Dusk]
diff -r fa7998ab3d28 -r f05877ad09e9 src/za_database.cpp
--- a/src/za_database.cpp	Sat Apr 08 14:44:41 2017 +0200
+++ b/src/za_database.cpp	Sat Apr 08 15:02:46 2017 +0200
@@ -334,6 +334,26 @@
 
 //*****************************************************************************
 //
+void DATABASE_EnableWAL ( )
+{
+	if ( DATABASE_IsAvailable ( "DATABASE_EnableWAL" ) == false )
+		return;
+
+	database_ExecuteCommand ( "PRAGMA journal_mode=WAL" );
+}
+
+//*****************************************************************************
+//
+void DATABASE_DisableWAL ( )
+{
+	if ( DATABASE_IsAvailable ( "DATABASE_DisableWAL" ) == false )
+		return;
+
+	database_ExecuteCommand ( "PRAGMA journal_mode=DELETE" );
+}
+
+//*****************************************************************************
+//
 void DATABASE_DumpNamespace ( const char *Namespace )
 {
 	if ( DATABASE_IsAvailable ( "DATABASE_DumpNamespace" ) == false )
@@ -560,4 +580,14 @@
 CCMD ( dumpdb )
 {
 	DATABASE_DumpTable();
-}
\ No newline at end of file
+}
+
+CCMD ( db_enable_wal )
+{
+	DATABASE_EnableWAL();
+}
+
+CCMD ( db_disable_wal )
+{
+	DATABASE_DisableWAL();
+}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491658164 -7200
#      Sat Apr 08 15:29:24 2017 +0200
# Node ID 15f618ebfe70c0f85b8f6f0ff0ce0a963299eeec
# Parent  f05877ad09e9b14270a56dfe70c0376d6a2f0412
The CCMDs 'db_enable_wal' and and 'db_disable_wal' can't be called by ConsoleCommand anymore.

diff -r f05877ad09e9 -r 15f618ebfe70 src/za_database.cpp
--- a/src/za_database.cpp	Sat Apr 08 15:02:46 2017 +0200
+++ b/src/za_database.cpp	Sat Apr 08 15:29:24 2017 +0200
@@ -47,6 +47,8 @@
 
 #include "za_database.h"
 #include "i_system.h"
+#include "g_game.h"
+#include "p_acs.h"
 #include <sqlite3.h>
 
 //*****************************************************************************
@@ -584,10 +586,18 @@
 
 CCMD ( db_enable_wal )
 {
+	// [BB] This function may not be used by ConsoleCommand.
+	if ( ACS_IsCalledFromConsoleCommand( ))
+		return;
+
 	DATABASE_EnableWAL();
 }
 
 CCMD ( db_disable_wal )
 {
+	// [BB] This function may not be used by ConsoleCommand.
+	if ( ACS_IsCalledFromConsoleCommand( ))
+		return;
+
 	DATABASE_DisableWAL();
 }
# HG changeset patch
# User Benjamin Moir <bennyboy.private@hotmail.com.au>
# Date 1438241214 -34200
#      Thu Jul 30 16:56:54 2015 +0930
# Node ID 68cac6a0fd72b559cfe0780713f943ea8117f549
# Parent  15f618ebfe70c0f85b8f6f0ff0ce0a963299eeec
Added Warp to ACS

diff -r 15f618ebfe70 -r 68cac6a0fd72 src/p_acs.cpp
--- a/src/p_acs.cpp	Sat Apr 08 15:29:24 2017 +0200
+++ b/src/p_acs.cpp	Thu Jul 30 16:56:54 2015 +0930
@@ -225,6 +225,28 @@
 	PICKAF_RETURNTID = 2,
 };
 
+// [ZK] Warp
+enum
+{
+	WARPF_ABSOLUTEOFFSET = 0x1,
+	WARPF_ABSOLUTEANGLE  = 0x2,
+	WARPF_USECALLERANGLE = 0x4,
+
+	WARPF_NOCHECKPOSITION = 0x8,
+
+	WARPF_INTERPOLATE       = 0x10,
+	WARPF_WARPINTERPOLATION = 0x20,
+	WARPF_COPYINTERPOLATION = 0x40,
+
+	WARPF_STOP             = 0x80,
+	WARPF_TOFLOOR          = 0x100,
+	WARPF_TESTONLY         = 0x200,
+	WARPF_ABSOLUTEPOSITION = 0x400,
+	WARPF_BOB              = 0x800,
+	WARPF_MOVEPTR          = 0x1000,
+	WARPF_USEPTR           = 0x2000,
+};
+
 struct CallReturn
 {
 	CallReturn(int pc, ScriptFunction *func, FBehavior *module, SDWORD *locals, bool discard, unsigned int runaway)
@@ -4911,6 +4933,9 @@
 	-105 : SetPlayerLivesLeft(2),
 	-106 : KickFromGame(2),
 	*/
+	
+	// GLOOME
+	ACSF_Warp = 11201,
 
 	// [BB] Out of order ZDoom backport.
 	ACSF_GetActorFloorTexture = 204,
@@ -6273,6 +6298,166 @@
 				return !canraiseall;
 			}
 			break;
+		
+		// [ZK] A_Warp in ACS
+		case ACSF_Warp:
+		{
+			int tid_dest = args[0];
+			fixed_t xofs = args[1];
+			fixed_t yofs = args[2];
+			fixed_t zofs = args[3];
+			angle_t angle = args[4];
+			int flags = args[5];
+			const char *statename = argCount > 6 ? FBehavior::StaticLookupString(args[6]) : "";
+			bool exact = argCount > 7 ? !!args[7] : false;
+
+			FState *state = argCount > 6 ? activator->GetClass()->ActorInfo->FindStateByString(statename, exact) : 0;
+
+			AActor *reference;
+			if((flags & WARPF_USEPTR) && tid_dest != AAPTR_DEFAULT)
+			{
+				reference = COPY_AAPTR(activator, tid_dest);
+			}
+			else
+			{
+				reference = SingleActorFromTID(tid_dest, activator);
+			}
+
+			// If there is no actor to warp to, fail.
+			if (!reference)
+				return false;
+
+			AActor *caller = activator;
+
+			if (flags & WARPF_MOVEPTR)
+			{
+				AActor *temp = reference;
+				reference = caller;
+				caller = temp;
+			}
+
+			fixed_t	oldx = caller->x;
+			fixed_t	oldy = caller->y;
+			fixed_t	oldz = caller->z;
+
+			if (!(flags & WARPF_ABSOLUTEANGLE))
+			{
+				angle += (flags & WARPF_USECALLERANGLE) ? caller->angle : reference->angle;
+			}
+			if (!(flags & WARPF_ABSOLUTEPOSITION))
+			{
+				if (!(flags & WARPF_ABSOLUTEOFFSET))
+				{
+					angle_t fineangle = angle >> ANGLETOFINESHIFT;
+					fixed_t xofs1 = xofs;
+
+					// (borrowed from A_SpawnItemEx, assumed workable)
+					// in relative mode negative y values mean 'left' and positive ones mean 'right'
+					// This is the inverse orientation of the absolute mode!
+
+					xofs = FixedMul(xofs1, finecosine[fineangle]) + FixedMul(yofs, finesine[fineangle]);
+					yofs = FixedMul(xofs1, finesine[fineangle]) - FixedMul(yofs, finecosine[fineangle]);
+				}
+
+				if (flags & WARPF_TOFLOOR)
+				{
+					// set correct xy
+
+					caller->SetOrigin(
+						reference->x + xofs,
+						reference->y + yofs,
+						reference->z);
+
+					// now the caller's floorz should be appropriate for the assigned xy-position
+					// assigning position again with
+
+					if (zofs)
+					{
+						// extra unlink, link and environment calculation
+						caller->SetOrigin(
+							caller->x,
+							caller->y,
+							caller->floorz + zofs);
+					}
+					else
+					{
+						// if there is no offset, there should be no ill effect from moving down to the already defined floor
+
+						// A_Teleport does the same thing anyway
+						caller->z = caller->floorz;
+					}
+				}
+				else
+				{
+					caller->SetOrigin(
+						reference->x + xofs,
+						reference->y + yofs,
+						reference->z + zofs);
+				}
+			}
+			else // [MC] The idea behind "absolute" is meant to be "absolute". Override everything, just like A_SpawnItemEx's.
+			{
+				if (flags & WARPF_TOFLOOR)
+				{
+					caller->SetOrigin(xofs, yofs, caller->floorz + zofs);
+				}
+				else
+				{
+					caller->SetOrigin(xofs, yofs, zofs);
+				}
+			}
+
+			if ((flags & WARPF_NOCHECKPOSITION) || P_TestMobjLocation(caller))
+			{
+				if (flags & WARPF_TESTONLY)
+				{
+					caller->SetOrigin(oldx, oldy, oldz);
+				}
+				else
+				{
+					caller->angle = angle;
+
+					if (flags & WARPF_STOP)
+					{
+						caller->velx = 0;
+						caller->vely = 0;
+						caller->velz = 0;
+					}
+
+					if (flags & WARPF_WARPINTERPOLATION)
+					{
+						caller->PrevX += caller->x - oldx;
+						caller->PrevY += caller->y - oldy;
+						caller->PrevZ += caller->z - oldz;
+					}
+					else if (flags & WARPF_COPYINTERPOLATION)
+					{
+						caller->PrevX = caller->x + reference->PrevX - reference->x;
+						caller->PrevY = caller->y + reference->PrevY - reference->y;
+						caller->PrevZ = caller->z + reference->PrevZ - reference->z;
+					}
+					else if (flags & WARPF_INTERPOLATE)
+					{
+						caller->PrevX = caller->x;
+						caller->PrevY = caller->y;
+						caller->PrevZ = caller->z;
+					}
+				}
+
+				if (state && argCount > 7)
+				{
+					activator->SetState(state);
+				}
+
+				return true;
+			}
+			else
+			{
+				caller->SetOrigin(oldx, oldy, oldz);
+				return false;
+			}
+			break;
+		}
 
 		// [BL] Skulltag function
 		case ACSF_AnnouncerSound:
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1491659005 -7200
#      Sat Apr 08 15:43:25 2017 +0200
# Node ID c20732e29edfcb880dfee4cc8464d80177f5b82b
# Parent  68cac6a0fd72b559cfe0780713f943ea8117f549
Changed GLOOME's ACS Warp function to the corresponding ZDoom function number and made it work online. This should allow for a ZDoom compatible way to replicate the old interpolating behavior of SetActorPosition that ZDoom dropped (addresses 3028).

diff -r 68cac6a0fd72 -r c20732e29edf src/p_acs.cpp
--- a/src/p_acs.cpp	Thu Jul 30 16:56:54 2015 +0930
+++ b/src/p_acs.cpp	Sat Apr 08 15:43:25 2017 +0200
@@ -4924,6 +4924,9 @@
 	ACSF_IsPointerEqual,
 	ACSF_CanRaiseActor,
 
+	// [BB] Out of order ZDoom backport.
+	ACSF_Warp = 92,
+
 	/* Zandronum's - these must be skipped when we reach 99!
 	-100:ResetMap(0),
 	-101 : PlayerIsSpectator(1),
@@ -4933,9 +4936,6 @@
 	-105 : SetPlayerLivesLeft(2),
 	-106 : KickFromGame(2),
 	*/
-	
-	// GLOOME
-	ACSF_Warp = 11201,
 
 	// [BB] Out of order ZDoom backport.
 	ACSF_GetActorFloorTexture = 204,
@@ -6449,6 +6449,10 @@
 					activator->SetState(state);
 				}
 
+				// [BB] Inform the clients.
+				if ( NETWORK_GetState() == NETSTATE_SERVER )
+					SERVERCOMMANDS_MoveThing( caller, CM_X|CM_Y|CM_Z|CM_ANGLE );
+
 				return true;
 			}
 			else
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492248981 -7200
#      Sat Apr 15 11:36:21 2017 +0200
# Node ID c2b2f510cfc8349fa27a850bb275a13216d5f31b
# Parent  c20732e29edfcb880dfee4cc8464d80177f5b82b
fixed some VC++ warnings

diff -r c20732e29edf -r c2b2f510cfc8 src/r_data/sprites.cpp
--- a/src/r_data/sprites.cpp	Sat Apr 08 15:43:25 2017 +0200
+++ b/src/r_data/sprites.cpp	Sat Apr 15 11:36:21 2017 +0200
@@ -1246,7 +1246,7 @@
 			const fixed_t oldScaleY = skin.ScaleY;
 			skin.ScaleY = maxAllowedHeight / maxheight;
 			// [BB] Preserve the aspect ration of the sprites.
-			skin.ScaleX *= FIXED2FLOAT( skin.ScaleY ) / FIXED2FLOAT( oldScaleY );
+			skin.ScaleX = static_cast<fixed_t> ( skin.ScaleX * ( FIXED2FLOAT( skin.ScaleY ) / FIXED2FLOAT( oldScaleY ) ) );
 		}
 
 		if ( maxwidth * skin.ScaleX > maxAllowedWidth + FRACUNIT )
@@ -1260,7 +1260,7 @@
 			const fixed_t oldScaleX = skin.ScaleX;
 			skin.ScaleX = maxAllowedWidth / maxwidth;
 			// [BB] Preserve the aspect ration of the sprites.
-			skin.ScaleY *= FIXED2FLOAT( skin.ScaleX ) / FIXED2FLOAT( oldScaleX );
+			skin.ScaleY = static_cast<fixed_t> ( skin.ScaleY * ( FIXED2FLOAT( skin.ScaleX ) / FIXED2FLOAT( oldScaleX ) ) );
 		}
 
 		// [BB] Don't allow the base skin sprites of the player classes to exceed the limits.
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492249223 -7200
#      Sat Apr 15 11:40:23 2017 +0200
# Node ID f5c94463c8e8b4e61751af0810daf581ce681d67
# Parent  c2b2f510cfc8349fa27a850bb275a13216d5f31b
To stay compatible with Zandronum 2.x, GetCVar again returns the consoleplayer's value if called in a non-player activated CLIENTSIDE script to get the value of a user cvar (addresses 3054).

diff -r c2b2f510cfc8 -r f5c94463c8e8 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sat Apr 15 11:36:21 2017 +0200
+++ b/docs/zandronum-history.txt	Sat Apr 15 11:40:23 2017 +0200
@@ -143,6 +143,7 @@
 !	- When alive players complete the map in survival, dead spectators will recover their inventory on the next map in accordance to SV_COOP_LOSE* flags [Zalewa]
 +	- The 'authhostname' DNS lookup is not done during startup anymore, but only if the IP address is needed. [Torr Samaho]
 !	- The memory required for the bot nodes is now dynamically allocated when the first bot is added and freed when the last bot is removed. Thus, the CVAR sv_disallowbots is obsolete and was removed (adapted form Konar6's kpatch). This also fixes that offline, the memory required for the bot nodes was always allocated. [Torr Samaho]
+!	- To stay compatible with Zandronum 2.x, GetCVar still returns the consoleplayer's value if called in a non-player activated CLIENTSIDE script to get the value of a user cvar. [Torr Samaho]
 
 
 2.2
diff -r c2b2f510cfc8 -r f5c94463c8e8 src/p_acs.cpp
--- a/src/p_acs.cpp	Sat Apr 15 11:36:21 2017 +0200
+++ b/src/p_acs.cpp	Sat Apr 15 11:40:23 2017 +0200
@@ -5160,6 +5160,11 @@
 		{
 			if (activator == NULL || activator->player == NULL)
 			{
+				// [BB] Compatibility with Zandronum 2.x: In CLIENTSIDE scripts,
+				// return the value belonging to the consoleplayer
+				if ( NETWORK_InClientMode() ) 
+					return GetUserCVar(consoleplayer, cvarname, is_string, stack, stackdepth);
+
 				return 0;
 			}
 			return GetUserCVar(int(activator->player - players), cvarname, is_string, stack, stackdepth);
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492249349 -7200
#      Sat Apr 15 11:42:29 2017 +0200
# Node ID b8535c42a4cc16c95599b9dc2af0e2249b297e40
# Parent  f5c94463c8e8b4e61751af0810daf581ce681d67
Fixed: AFastProjectile was missing the trail on the clients and used more net traffic than necessary (addresses 2987).

diff -r f5c94463c8e8 -r b8535c42a4cc src/g_shared/a_fastprojectile.cpp
--- a/src/g_shared/a_fastprojectile.cpp	Sat Apr 15 11:40:23 2017 +0200
+++ b/src/g_shared/a_fastprojectile.cpp	Sat Apr 15 11:42:29 2017 +0200
@@ -172,8 +172,8 @@
 			hitz += GetClass()->Meta.GetMetaFixed (ACMETA_MissileHeight);
 		
 			const PClass *trail = PClass::FindClass(name);
-			// [BB] Check whether to spawn.
-			if ( (trail != NULL) && ( NETWORK_ShouldActorNotBeSpawned ( this, trail ) == false ) )
+			// [BB] Check whether to spawn, but have the client always spawn it.
+			if ( (trail != NULL) && ( NETWORK_ShouldActorNotBeSpawned ( this, trail, NETWORK_InClientMode() ) == false ) )
 			{
 				AActor *act = Spawn (trail, x, y, hitz, ALLOW_REPLACE);
 				if (act != NULL)
@@ -184,6 +184,13 @@
 					// client spawn it on its own.
 					if ( NETWORK_InClientMode() )
 						act->ulNetworkFlags |= NETFL_CLIENTSIDEONLY;
+					// [BB] Since clients spawn these on their own, prevent the 
+					// server from printing warnings by marking this as SERVERSIDEONLY.
+					else if ( NETWORK_GetState( ) == NETSTATE_SERVER )
+					{
+						act->ulNetworkFlags |= NETFL_SERVERSIDEONLY;
+						act->FreeNetID ();
+					}
 				}
 			}
 		}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492259677 -7200
#      Sat Apr 15 14:34:37 2017 +0200
# Node ID bf98ea82878ed992d26ef602d336a8658af06d22
# Parent  b8535c42a4cc16c95599b9dc2af0e2249b297e40
Fixed: Thing_Remove didn't update the total number of monsters on the clients (addresses 3052).

diff -r b8535c42a4cc -r bf98ea82878e src/p_acs.cpp
--- a/src/p_acs.cpp	Sat Apr 15 11:42:29 2017 +0200
+++ b/src/p_acs.cpp	Sat Apr 15 14:34:37 2017 +0200
@@ -3794,11 +3794,6 @@
 				// If this is a monster, subtract it from the total monster
 				// count, because it already added to it during spawning.
 				actor->ClearCounters();
-
-				// [BB] The monster didn't spawn at all, so we need to correct the number of monsters in invasion mode.
-				if (actor->CountsAsKill())
-					INVASION_UpdateMonsterCount( actor, true );
-
 				actor->Destroy ();
 				actor = NULL;
 			}
diff -r b8535c42a4cc -r bf98ea82878e src/p_mobj.cpp
--- a/src/p_mobj.cpp	Sat Apr 15 11:42:29 2017 +0200
+++ b/src/p_mobj.cpp	Sat Apr 15 14:34:37 2017 +0200
@@ -7921,12 +7921,25 @@
 	if (CountsAsKill() && health > 0)
 	{
 		level.total_monsters--;
+
+		// [BB] Since a monster was removed, we also need to correct the number of monsters in invasion mode.
+		INVASION_UpdateMonsterCount( this, true );
+
+		// [BB] Inform the clients.
+		if ( NETWORK_GetState( ) == NETSTATE_SERVER )
+			SERVERCOMMANDS_SetMapNumTotalMonsters( );
+
 		flags &= ~MF_COUNTKILL;
 	}
 	// Same, for items
 	if (flags & MF_COUNTITEM)
 	{
 		level.total_items--;
+
+		// [BB] Inform the clients.
+		if ( NETWORK_GetState( ) == NETSTATE_SERVER )
+			SERVERCOMMANDS_SetMapNumTotalItems( );
+
 		flags &= ~MF_COUNTITEM;
 	}
 	// And finally for secrets
diff -r b8535c42a4cc -r bf98ea82878e src/p_things.cpp
--- a/src/p_things.cpp	Sat Apr 15 11:42:29 2017 +0200
+++ b/src/p_things.cpp	Sat Apr 15 14:34:37 2017 +0200
@@ -511,23 +511,6 @@
 
 		// be friendly to the level statistics. ;)
 		actor->ClearCounters();
-		// [BB] Added client update.
-		if (actor->CountsAsKill() && actor->health > 0)
-		{
-			// [BB] Since a monster was removed, we also need to correct the number of monsters in invasion mode.
-			INVASION_UpdateMonsterCount( actor, true );
-
-			// [BB] Inform the clients.
-			if ( NETWORK_GetState( ) == NETSTATE_SERVER )
-				SERVERCOMMANDS_SetMapNumTotalMonsters( );
-		}
-		// [BB] Added client update.
-		if (actor->flags&MF_COUNTITEM)
-		{
-			// [BB] Inform the clients.
-			if ( NETWORK_GetState( ) == NETSTATE_SERVER )
-				SERVERCOMMANDS_SetMapNumTotalItems( );
-		}
 
 		// [BB] Only destroy the actor if it's not needed for a map reset. Otherwise just hide it.
 		actor->HideOrDestroyIfSafe ();
diff -r b8535c42a4cc -r bf98ea82878e src/thingdef/thingdef_codeptr.cpp
--- a/src/thingdef/thingdef_codeptr.cpp	Sat Apr 15 11:42:29 2017 +0200
+++ b/src/thingdef/thingdef_codeptr.cpp	Sat Apr 15 14:34:37 2017 +0200
@@ -2292,11 +2292,6 @@
 		{
 			// The monster is blocked so don't spawn it at all!
 			mo->ClearCounters();
-				if (mo->CountsAsKill())
-				{
-					// [BB] The monster didn't spawn at all, so we need to correct the number of monsters in invasion mode.
-					INVASION_UpdateMonsterCount( mo, true );
-				}
 			mo->Destroy();
 			return false;
 		}
# HG changeset patch
# User Christoph Oelckers <c.oelckers@zdoom.fake>
# Date 1460400163 -7200
#      Mon Apr 11 20:42:43 2016 +0200
# Node ID 2ae3d9685031d7bf55bd07b319ed0e9d683386c6
# Parent  bf98ea82878ed992d26ef602d336a8658af06d22
- fixed NULL pointer access in SetAmmoCapacity.

diff -r bf98ea82878e -r 2ae3d9685031 src/p_acs.cpp
--- a/src/p_acs.cpp	Sat Apr 15 14:34:37 2017 +0200
+++ b/src/p_acs.cpp	Mon Apr 11 20:42:43 2016 +0200
@@ -9443,8 +9443,11 @@
 					else
 					{
 						item = activator->GiveInventoryType (type);
-						item->MaxAmount = STACK(1);
-						item->Amount = 0;
+						if (item != NULL)
+						{
+							item->MaxAmount = STACK(1);
+							item->Amount = 0;
+						}
 					}
 					// [BB] If the activator is a player, tell the clients about the changed capacity.
 					// [BB] Only bother the clients if MaxAmount has actually changed.
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492278427 -7200
#      Sat Apr 15 19:47:07 2017 +0200
# Node ID fcd894ce063b81ce76d5a5da885ede53f0c4ebd4
# Parent  2ae3d9685031d7bf55bd07b319ed0e9d683386c6
Added new ACS command SetDeadSpectator (int playernumber, int deadspectator). This command can turn alive players into dead spectators (deadspectator == 1) and revive dead spectators  (deadspectator == 0), addresses 2594.

diff -r 2ae3d9685031 -r fcd894ce063b docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Mon Apr 11 20:42:43 2016 +0200
+++ b/docs/zandronum-history.txt	Sat Apr 15 19:47:07 2017 +0200
@@ -42,6 +42,7 @@
 +	- Added sv_survival_nomapresetondeath Zandronum dmflag to modify survival game mode where the map will not be reset on all players death - the players will be able to continue with fresh amount of lives. Dead players will carry over their inventory in accordance to "keep inventory" flags. [Zalewa]
 +	- Backported ZDoom's ACS function GetActorFloorTexture. [Torr Samaho]
 +	- The SQLite3 database can now be used in WAL mode. This mode is enabled / disabled with the new CCMDs 'db_enable_wal' / 'db_disable_wal'. [Torr Samaho]
++	- Added new ACS command SetDeadSpectator (int playernumber, int deadspectator). This command can turn alive players into dead spectators (deadspectator == 1) and revive dead spectators  (deadspectator == 0). [Torr Samaho]
 -	- Fixed: Newly connecting clients were not properly informed about the secrets that were already revealed. [Torr Samaho]
 -	- Fixed: Resurrect cheat didn't work online. [Dusk]
 -	- Fixed: Turbo cheat didn't work online. [Dusk]
diff -r 2ae3d9685031 -r fcd894ce063b src/p_acs.cpp
--- a/src/p_acs.cpp	Mon Apr 11 20:42:43 2016 +0200
+++ b/src/p_acs.cpp	Sat Apr 15 19:47:07 2017 +0200
@@ -4966,6 +4966,7 @@
 	ACSF_SystemTime,
 	ACSF_GetTimeProperty,
 	ACSF_Strftime,
+	ACSF_SetDeadSpectator,
 
 	// ZDaemon
 	ACSF_GetTeamScore = 19620,	// (int team)
@@ -6768,6 +6769,56 @@
 				return ACS_PushAndReturnDynamicString( buffer, stack, stackdepth );
 			}
 
+		case ACSF_SetDeadSpectator:
+			{
+				const ULONG ulPlayer = static_cast<ULONG> ( args[0] );
+				const bool bDeadSpectator = !!args[1];
+
+				// [BB] Clients are not allowed to change the status of players.
+				if ( NETWORK_InClientMode() )
+					return 0;
+
+				// [BB] Only available in game modes that support dead spectators.
+				if ( ( GAMEMODE_GetCurrentFlags() & GMF_DEADSPECTATORS ) == false )
+					return 0;
+
+				if ( PLAYER_IsValidPlayer ( ulPlayer ) == false )
+					return 0;
+
+				// [BB] Mods are not allowed to force spectators to join the game.
+				if ( PLAYER_IsTrueSpectator ( &players[ulPlayer] ) )
+					return 0;
+
+				if ( bDeadSpectator )
+				{
+					// [BB] Already a dead spectator.
+					if ( players[ulPlayer].bDeadSpectator )
+						return 0;
+
+					// [BB] Turn this player into a dead spectator.
+					PLAYER_SetSpectator( &players[ulPlayer], false, true );
+
+					// [BB] Inform the clients.
+					if ( NETWORK_GetState( ) == NETSTATE_SERVER )
+						SERVERCOMMANDS_PlayerIsSpectator( ulPlayer );
+				}
+				else
+				{
+					// [BB] Not a dead spectator.
+					if ( players[ulPlayer].bDeadSpectator == false )
+						return 0;
+
+					// [BB] Revive the player.
+					players[ulPlayer].bSpectating = false;
+					players[ulPlayer].bDeadSpectator = false;
+					if ( GAMEMODE_GetCurrentFlags() & GMF_USEMAXLIVES )
+						PLAYER_SetLivesLeft ( &players[ulPlayer], GAMEMODE_GetMaxLives() - 1 );
+					players[ulPlayer].playerstate = PST_REBORN;
+					GAMEMODE_SpawnPlayer( ulPlayer );
+				}
+				return 1;
+			}
+
 		case ACSF_GetActorFloorTexture:
 		{
 			auto a = SingleActorFromTID(args[0], activator);
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492326614 -7200
#      Sun Apr 16 09:10:14 2017 +0200
# Node ID df61f80660cc64a71d4bffff53e29e3c79860d40
# Parent  fcd894ce063b81ce76d5a5da885ede53f0c4ebd4
The command "writeini" can't be called by ConsoleCommand anymore (addresses 3051).

diff -r fcd894ce063b -r df61f80660cc docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sat Apr 15 19:47:07 2017 +0200
+++ b/docs/zandronum-history.txt	Sun Apr 16 09:10:14 2017 +0200
@@ -111,7 +111,7 @@
 -	- Fixed: GetScreenWidth and GetScreenHeight ACS functions did not work online. [Dusk]
 -	- Fixed: the DamageFactor calculation was executed twice for armors. [Edward-san]
 -	- Fixed: body of the player who loses all lives no longer disappears into thin air. [Zalewa]
--	- Fixed a certain number of server CVARs which weren't protected against the ConsoleCommand. [Edward-san]
+-	- Fixed a certain number of commands and server CVARs which weren't protected against the ConsoleCommand. [Edward-san, Torr Samaho]
 -	- Fixed: the server could crash if a morph powerup is taken away when the morphed player exhausts the ammo. [Edward-san]
 -	- Fixed crash with voodoo dolls and PowerIronFeet. [Edward-san]
 -	- Fixed: Under rare circumstances, the server could freeze when selecting a random map from the map rotation. [Torr Samaho]
diff -r fcd894ce063b -r df61f80660cc src/m_misc.cpp
--- a/src/m_misc.cpp	Sat Apr 15 19:47:07 2017 +0200
+++ b/src/m_misc.cpp	Sun Apr 16 09:10:14 2017 +0200
@@ -422,6 +422,10 @@
 
 CCMD (writeini)
 {
+	// [BB] This function may not be used by ConsoleCommand.
+	if ( ACS_IsCalledFromConsoleCommand( ))
+		return;
+
 	const char *filename = (argv.argc() == 1) ? NULL : argv[1];
 	if (!M_SaveDefaults (filename))
 	{
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492865356 -7200
#      Sat Apr 22 14:49:16 2017 +0200
# Node ID ccaf6938f76358a18e182478e921cf99a25ca8e9
# Parent  df61f80660cc64a71d4bffff53e29e3c79860d40
Fixed: The rune icon wasn't shown in the classic Doom fullscreen HUD anymore (addresses 3077).

diff -r df61f80660cc -r ccaf6938f763 src/g_doom/doom_sbar.cpp
--- a/src/g_doom/doom_sbar.cpp	Sun Apr 16 09:10:14 2017 +0200
+++ b/src/g_doom/doom_sbar.cpp	Sat Apr 22 14:49:16 2017 +0200
@@ -1060,11 +1060,8 @@
 
 		// [BC] Draw rune.
 		{
-			pRune = CPlayer->mo->Inventory;
-			while (( pRune ) && ( pRune->GetClass( )->IsDescendantOf( PClass::FindClass( "Rune" )) == false ))
-				pRune = pRune->Inventory;
-
-			if ( pRune )
+			pRune = CPlayer->mo->Rune;
+			if ( pRune && pRune->Icon.isValid() )
 			{
 				screen->DrawTexture( TexMan( pRune->Icon ), -76, -2,
 					DTA_HUDRules, HUD_Normal,
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492941990 -7200
#      Sun Apr 23 12:06:30 2017 +0200
# Node ID c194e963000526d86b54bc09cbdbb1cba91530fd
# Parent  ccaf6938f76358a18e182478e921cf99a25ca8e9
Fixed: When a player was damaged, clients always executed the first state function of the standard pain state (addresses 3076).

diff -r ccaf6938f763 -r c194e9630005 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sat Apr 22 14:49:16 2017 +0200
+++ b/docs/zandronum-history.txt	Sun Apr 23 12:06:30 2017 +0200
@@ -124,6 +124,7 @@
 -	- Fixed: The server informed the clients about the position of the other players during intermission, which generated unnecessary network traffic. [Torr Samaho]
 -	- Fixed: the server erroneously told clients that some slamming actors changed their state to the Spawn state instead of the Idle state. [Edward-san]
 -	- Fixed: The MinotaurFriend was not handled properly online. [Edward-san]
+-	- Fixed: When a player was damaged, clients always executed the first state function of the standard pain state. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r ccaf6938f763 -r c194e9630005 src/cl_main.cpp
--- a/src/cl_main.cpp	Sat Apr 22 14:49:16 2017 +0200
+++ b/src/cl_main.cpp	Sun Apr 23 12:06:30 2017 +0200
@@ -3659,11 +3659,6 @@
 
 		I_Tactile( 40,10,40 + damage * 2 );
 	}
-
-	// Also, make sure they get put into the pain state.
-	FState *painState = player->mo->FindState( NAME_Pain );
-	if ( painState )
-		player->mo->SetState( painState );
 }
 
 //*****************************************************************************
diff -r ccaf6938f763 -r c194e9630005 src/sv_commands.cpp
--- a/src/sv_commands.cpp	Sat Apr 22 14:49:16 2017 +0200
+++ b/src/sv_commands.cpp	Sun Apr 23 12:06:30 2017 +0200
@@ -336,11 +336,9 @@
 	for ( ClientIterator it; it.notAtEnd(); ++it )
 	{
 		// [EP] Send the updated health and armor of the player who's being damaged to this client
-		// only if this client is allowed to know (still, don't forget the pain state!).
+		// only if this client is allowed to know.
 		if ( SERVER_IsPlayerAllowedToKnowHealth( *it, ulPlayer ))
 			fullCommand.sendCommandToClients( *it, SVCF_ONLYTHISCLIENT );
-		else
-			SERVERCOMMANDS_SetThingState( players[ulPlayer].mo, STATE_PAIN, *it, SVCF_ONLYTHISCLIENT );
 	}
 }
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492942962 -7200
#      Sun Apr 23 12:22:42 2017 +0200
# Node ID 6da8e2fb6c9ed9286d72970306ff30905f787212
# Parent  c194e963000526d86b54bc09cbdbb1cba91530fd
Fixed: The server didn't inform the clients about changes made with A_ChangeFlag to the special Zandronum flags, like DONTIDENTIFYTARGET (addresses 3081).

diff -r c194e9630005 -r 6da8e2fb6c9e docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun Apr 23 12:06:30 2017 +0200
+++ b/docs/zandronum-history.txt	Sun Apr 23 12:22:42 2017 +0200
@@ -125,6 +125,7 @@
 -	- Fixed: the server erroneously told clients that some slamming actors changed their state to the Spawn state instead of the Idle state. [Edward-san]
 -	- Fixed: The MinotaurFriend was not handled properly online. [Edward-san]
 -	- Fixed: When a player was damaged, clients always executed the first state function of the standard pain state. [Torr Samaho]
+-	- Fixed: The server didn't inform the clients about changes made with A_ChangeFlag to the special Zandronum flags, like DONTIDENTIFYTARGET. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r c194e9630005 -r 6da8e2fb6c9e src/thingdef/thingdef_codeptr.cpp
--- a/src/thingdef/thingdef_codeptr.cpp	Sun Apr 23 12:06:30 2017 +0200
+++ b/src/thingdef/thingdef_codeptr.cpp	Sun Apr 23 12:22:42 2017 +0200
@@ -4501,6 +4501,8 @@
 					flagset = FLAGSET_FLAGS6;
 				else if ( flagp == &self->flags7 )
 					flagset = FLAGSET_FLAGS7;
+				else if ( flagp == &self->ulSTFlags )
+					flagset = FLAGSET_FLAGSST;
 
 				SERVERCOMMANDS_SetThingFlags( self, flagset );
 			}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492959104 -7200
#      Sun Apr 23 16:51:44 2017 +0200
# Node ID 78638fbc7df7e966a2c5149add3027d9647e9d07
# Parent  6da8e2fb6c9ed9286d72970306ff30905f787212
Fixed: SetDeadSpectator left a dummy player when used on a player that still has respawn protection (partially addresses 2594).

diff -r 6da8e2fb6c9e -r 78638fbc7df7 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun Apr 23 12:22:42 2017 +0200
+++ b/src/p_acs.cpp	Sun Apr 23 16:51:44 2017 +0200
@@ -6795,6 +6795,10 @@
 					if ( players[ulPlayer].bDeadSpectator )
 						return 0;
 
+					// [BB] If still alive, kill the player before turning him into a dead spectator.
+					if ( players[ulPlayer].mo && players[ulPlayer].mo->health > 0 )
+						P_DamageMobj(players[ulPlayer].mo, NULL, NULL, TELEFRAG_DAMAGE, NAME_Telefrag, DMG_THRUSTLESS);
+
 					// [BB] Turn this player into a dead spectator.
 					PLAYER_SetSpectator( &players[ulPlayer], false, true );
 
# HG changeset patch
# User Benjamin Moir <bennyboy.private@hotmail.com.au>
# Date 1421717700 -37800
#      Tue Jan 20 12:05:00 2015 +1030
# Node ID a664f8a23e426e1f16011f9ae7200d3692d7d9cb
# Parent  78638fbc7df7e966a2c5149add3027d9647e9d07
Added +NODECAL and +FORCEDECAL actor flags
Added FHF_NOIMPACTDECAL for LineAttack

diff -r 78638fbc7df7 -r a664f8a23e42 src/actor.h
--- a/src/actor.h	Sun Apr 23 16:51:44 2017 +0200
+++ b/src/actor.h	Tue Jan 20 12:05:00 2015 +1030
@@ -344,6 +344,8 @@
 	MF7_HITTARGET		= 0x00004000,	// The actor the projectile dies on is set to target, provided it's targetable anyway.
 	MF7_HITMASTER		= 0x00008000,	// Same as HITTARGET, except it's master instead of target.
 	MF7_HITTRACER		= 0x00010000,	// Same as HITTARGET, but for tracer.
+	MF7_NODECAL			= 0x00020000,	// [ZK] Forces puff to have no impact decal
+	MF7_FORCEDECAL		= 0x00040000,	// [ZK] Forces P_LineAttack to use the puff's decal, even if the player's weapon has a decal defined
 
 	// [BC] More object flags for Skulltag.
 
diff -r 78638fbc7df7 -r a664f8a23e42 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun Apr 23 16:51:44 2017 +0200
+++ b/src/p_acs.cpp	Tue Jan 20 12:05:00 2015 +1030
@@ -198,8 +198,9 @@
 #define NOT_FLOOR			8
 #define NOT_CEILING			16
 
-// LineAtack flags
+// LineAttack flags
 #define FHF_NORANDOMPUFFZ	1
+#define FHF_NOIMPACTDECAL	2
 
 // SpawnDecal flags
 #define SDF_ABSANGLE		1
@@ -5850,7 +5851,9 @@
 				fixed_t	range		= argCount > 6 && args[6]? args[6] : MISSILERANGE;
 				int flags			= argCount > 7 && args[7]? args[7] : 0;
 
-				int fhflags = (flags & FHF_NORANDOMPUFFZ)? LAF_NORANDOMPUFFZ : 0;
+				int fhflags = 0;
+				if (flags & FHF_NORANDOMPUFFZ) fhflags |= LAF_NORANDOMPUFFZ;
+				if (flags & FHF_NOIMPACTDECAL) fhflags |= LAF_NOIMPACTDECAL;
 
 				if (args[0] == 0)
 				{
diff -r 78638fbc7df7 -r a664f8a23e42 src/p_local.h
--- a/src/p_local.h	Sun Apr 23 16:51:44 2017 +0200
+++ b/src/p_local.h	Tue Jan 20 12:05:00 2015 +1030
@@ -493,7 +493,8 @@
 enum	// P_LineAttack flags
 {
 	LAF_ISMELEEATTACK = 1,
-	LAF_NORANDOMPUFFZ = 2
+	LAF_NORANDOMPUFFZ = 2,
+	LAF_NOIMPACTDECAL = 4
 };
 
 AActor *P_LineAttack (AActor *t1, angle_t angle, fixed_t distance, int pitch, int damage, FName damageType, const PClass *pufftype, int flags = 0, AActor **victim = NULL, int *actualdamage = NULL);
diff -r 78638fbc7df7 -r a664f8a23e42 src/p_map.cpp
--- a/src/p_map.cpp	Sun Apr 23 16:51:44 2017 +0200
+++ b/src/p_map.cpp	Tue Jan 20 12:05:00 2015 +1030
@@ -4284,13 +4284,17 @@
 				return NULL;
 
 			// [RH] Spawn a decal
-			if (trace.HitType == TRACE_HitWall && trace.Line->special != Line_Horizon)
+			if (trace.HitType == TRACE_HitWall && trace.Line->special != Line_Horizon && !(flags & LAF_NOIMPACTDECAL) && !(puffDefaults->flags7 & MF7_NODECAL))
 			{
 				// [TN] If the actor or weapon has a decal defined, use that one.
 				if (t1->DecalGenerator != NULL ||
 					(t1->player != NULL && t1->player->ReadyWeapon != NULL && t1->player->ReadyWeapon->DecalGenerator != NULL))
 				{
-					SpawnShootDecal(t1, trace);
+					// [ZK] If puff has FORCEDECAL set, do not use the weapon's decal
+					if (puffDefaults->flags7 & MF7_FORCEDECAL && puff != NULL && puff->DecalGenerator)
+						SpawnShootDecal(puff, trace);
+					else
+						SpawnShootDecal(t1, trace);
 				}
 
 				// Else, look if the bulletpuff has a decal defined.
diff -r 78638fbc7df7 -r a664f8a23e42 src/thingdef/thingdef_data.cpp
--- a/src/thingdef/thingdef_data.cpp	Sun Apr 23 16:51:44 2017 +0200
+++ b/src/thingdef/thingdef_data.cpp	Tue Jan 20 12:05:00 2015 +1030
@@ -245,6 +245,10 @@
 	DEFINE_FLAG(MF7, HITMASTER, AActor, flags7),
 	DEFINE_FLAG(MF7, HITTRACER, AActor, flags7),
 	
+	// [ZK] Decal flags
+	DEFINE_FLAG(MF7, NODECAL, AActor, flags7),
+	DEFINE_FLAG(MF7, FORCEDECAL, AActor, flags7),
+
 	// [BC] New DECORATE flag defines here.
 	DEFINE_FLAG(STFL, BLUETEAM, AActor, ulSTFlags),
 	DEFINE_FLAG(STFL, REDTEAM, AActor, ulSTFlags),
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492964795 -7200
#      Sun Apr 23 18:26:35 2017 +0200
# Node ID 20799d542904620f36815ae8e3aba5e1dea438e1
# Parent  a664f8a23e426e1f16011f9ae7200d3692d7d9cb
Fixed: Turning a player into a dead spectator could crash the game (partially addresses 2594).

diff -r a664f8a23e42 -r 20799d542904 src/cl_main.h
--- a/src/cl_main.h	Tue Jan 20 12:05:00 2015 +1030
+++ b/src/cl_main.h	Sun Apr 23 18:26:35 2017 +0200
@@ -176,6 +176,7 @@
 LONG				CLIENT_AdjustElevatorDirection( LONG lDirection );
 void				CLIENT_LogHUDMessage( const char *pszString, LONG lColor );
 void				CLIENT_UpdatePendingWeapon( const player_t *pPlayer );
+void				CLIENT_SetActorToLastDeathStateFrame ( AActor *pActor );
 void				CLIENT_ClearAllPlayers( void );
 void				CLIENT_LimitProtectedCVARs( void );
 bool				CLIENT_CanClipMovement( AActor *pActor );
diff -r a664f8a23e42 -r 20799d542904 src/p_acs.cpp
--- a/src/p_acs.cpp	Tue Jan 20 12:05:00 2015 +1030
+++ b/src/p_acs.cpp	Sun Apr 23 18:26:35 2017 +0200
@@ -88,6 +88,7 @@
 #include "network/nettraffic.h"
 #include "za_database.h"
 #include "cl_commands.h"
+#include "cl_main.h"
 
 #include "g_shared/a_pickups.h"
 
@@ -6800,7 +6801,11 @@
 
 					// [BB] If still alive, kill the player before turning him into a dead spectator.
 					if ( players[ulPlayer].mo && players[ulPlayer].mo->health > 0 )
+					{
 						P_DamageMobj(players[ulPlayer].mo, NULL, NULL, TELEFRAG_DAMAGE, NAME_Telefrag, DMG_THRUSTLESS);
+						// [BB] The name prefix is misleading, this function is not client specific.
+						CLIENT_SetActorToLastDeathStateFrame ( players[ulPlayer].mo );
+					}
 
 					// [BB] Turn this player into a dead spectator.
 					PLAYER_SetSpectator( &players[ulPlayer], false, true );
diff -r a664f8a23e42 -r 20799d542904 src/p_interaction.cpp
--- a/src/p_interaction.cpp	Tue Jan 20 12:05:00 2015 +1030
+++ b/src/p_interaction.cpp	Sun Apr 23 18:26:35 2017 +0200
@@ -2582,17 +2582,11 @@
 		// old body.
 		if ( bDeadSpectator )
 		{
-			// Save the player's old body and inventory, and respawn him or her.
-			APlayerPawn *inventoryPreserver = new APlayerPawn();
+			// Save the player's old body, and respawn him or her.
 			pOldBody = pPlayer->mo;
-			inventoryPreserver->ClearInventory( );
-			inventoryPreserver->ObtainInventory( pOldBody );
-			G_DoReborn( pPlayer - players, false );
-			if ( pPlayer->mo )
-			{
-				pPlayer->mo->ObtainInventory( inventoryPreserver );
-			}
-			inventoryPreserver->Destroy( );
+			// [BB] This also transfers the inventory from the old to the new body.
+			players[pPlayer - players].playerstate = PST_REBORN;
+			GAMEMODE_SpawnPlayer( pPlayer - players );
 
 			// Set the player's new body to the position of his or her old body.
 			if (( pPlayer->mo ) &&
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492975851 -7200
#      Sun Apr 23 21:30:51 2017 +0200
# Node ID 9679b9b67f46e7a2e1285fad036b0c08c6888f60
# Parent  20799d542904620f36815ae8e3aba5e1dea438e1
Added 'nopushwindowcheck' for sstmap34 from sst_v1.4rc7.pk7, which needs this for the exit (addresses 3073).

diff -r 20799d542904 -r 9679b9b67f46 wadsrc/static/compatibility.txt
--- a/wadsrc/static/compatibility.txt	Sun Apr 23 18:26:35 2017 +0200
+++ b/wadsrc/static/compatibility.txt	Sun Apr 23 21:30:51 2017 +0200
@@ -379,6 +379,7 @@
 
 E89CCC7E155F1032F693359CC219BE6C // hexen.wad map30
 B9DFF13207EACAC675C71D82624D0007 // XtheaterIII map01
+46ACA51B5275B14807FE7CBEB3916AAD // [BB] sst_v1.4rc7.pk7 sstmap34
 {
 	DisablePushWindowCheck
 }
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1492978340 -7200
#      Sun Apr 23 22:12:20 2017 +0200
# Node ID 6bd1d86065dd6da37c980a02574147fbf1d82ee9
# Parent  9679b9b67f46e7a2e1285fad036b0c08c6888f60
The 'PrintMiscActorInfo' part of playerinfo is now blocked unless cheats are turned on (addresses 3058).

diff -r 9679b9b67f46 -r 6bd1d86065dd src/d_netinfo.cpp
--- a/src/d_netinfo.cpp	Sun Apr 23 21:30:51 2017 +0200
+++ b/src/d_netinfo.cpp	Sun Apr 23 22:12:20 2017 +0200
@@ -1611,7 +1611,9 @@
 		}
 		if (argv.argc() > 2)
 		{
-			PrintMiscActorInfo(players[i].mo);
+			// [BB] The extended info is only available if cheats are allowed.
+			if ( CheckCheatmode() == false )
+				PrintMiscActorInfo(players[i].mo);
 		}
 	}
 }
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1493147030 -7200
#      Tue Apr 25 21:03:50 2017 +0200
# Node ID 734f5ce467b33958dd3e2277db620607a9784e47
# Parent  6bd1d86065dd6da37c980a02574147fbf1d82ee9
The sound debug info activated with 'noise 1' is now blocked on the clients unless cheats are turned on (addresses 3057).

diff -r 6bd1d86065dd -r 734f5ce467b3 src/s_sound.cpp
--- a/src/s_sound.cpp	Sun Apr 23 22:12:20 2017 +0200
+++ b/src/s_sound.cpp	Tue Apr 25 21:03:50 2017 +0200
@@ -155,6 +155,10 @@
 
 void S_NoiseDebug (void)
 {
+	// [BB] On clients, only allow this when cheats are on.
+	if ( NETWORK_InClientMode() && ( sv_cheats == false ) )
+		return;
+
 	FSoundChan *chan;
 	FVector3 listener;
 	FVector3 origin;
# HG changeset patch
# User Jordon Moss <mossj32@gmail.com>
# Date 1469262064 10800
#      Sat Jul 23 05:21:04 2016 -0300
# Node ID 2045c167ee6615c2f8e5d095ef30ae05ed79b655
# Parent  734f5ce467b33958dd3e2277db620607a9784e47
Added KILL Script type and associated flags and GameInfo keyword.

This is different from the original "Death Scripts" idea. This tackles
some issues I've found with the original idea (now you can have as many
scripts as you want, not just global and actor-defined). Also takes care
of other complaints about the original idea and push request. Flags and
their use are in code comments.

diff -r 734f5ce467b3 -r 2045c167ee66 src/actor.h
--- a/src/actor.h	Tue Apr 25 21:03:50 2017 +0200
+++ b/src/actor.h	Sat Jul 23 05:21:04 2016 -0300
@@ -347,6 +347,10 @@
 	MF7_NODECAL			= 0x00020000,	// [ZK] Forces puff to have no impact decal
 	MF7_FORCEDECAL		= 0x00040000,	// [ZK] Forces P_LineAttack to use the puff's decal, even if the player's weapon has a decal defined
 
+	// [BB] Out of order ZDoom backport.
+	MF7_USEKILLSCRIPTS	= 0x00800000,	// [JM] Use "KILL" Script on death if not forced by GameInfo.
+	MF7_NOKILLSCRIPTS	= 0x01000000,	// [JM] No "KILL" Script on death whatsoever, even if forced by GameInfo.
+
 	// [BC] More object flags for Skulltag.
 
 	// Object can only be picked up by blue team members.
diff -r 734f5ce467b3 -r 2045c167ee66 src/gi.cpp
--- a/src/gi.cpp	Tue Apr 25 21:03:50 2017 +0200
+++ b/src/gi.cpp	Sat Jul 23 05:21:04 2016 -0300
@@ -357,6 +357,7 @@
 		GAMEINFOKEY_PATCH(mStatscreenFinishedFont, "statscreen_finishedpatch")
 		GAMEINFOKEY_PATCH(mStatscreenEnteringFont, "statscreen_enteringpatch")
 		GAMEINFOKEY_BOOL(norandomplayerclass, "norandomplayerclass")
+		GAMEINFOKEY_BOOL(forcekillscripts, "forcekillscripts") // [JM] Force kill scripts on thing death. (MF7_NOKILLSCRIPTS overrides.)
 
 		else
 		{
diff -r 734f5ce467b3 -r 2045c167ee66 src/gi.h
--- a/src/gi.h	Tue Apr 25 21:03:50 2017 +0200
+++ b/src/gi.h	Sat Jul 23 05:21:04 2016 -0300
@@ -143,6 +143,7 @@
 	FGIFont mStatscreenFinishedFont;
 	FGIFont mStatscreenEnteringFont;
 	bool norandomplayerclass;
+	bool forcekillscripts;
 
 	const char *GetFinalePage(unsigned int num) const;
 };
diff -r 734f5ce467b3 -r 2045c167ee66 src/p_acs.h
--- a/src/p_acs.h	Tue Apr 25 21:03:50 2017 +0200
+++ b/src/p_acs.h	Sat Jul 23 05:21:04 2016 -0300
@@ -223,6 +223,7 @@
 	SCRIPT_Disconnect	= 14,
 	SCRIPT_Return		= 15,
 	SCRIPT_Event		= 16, // [BB]
+	SCRIPT_Kill			= 17, // [JM]
 };
 
 // Script flags
diff -r 734f5ce467b3 -r 2045c167ee66 src/p_interaction.cpp
--- a/src/p_interaction.cpp	Tue Apr 25 21:03:50 2017 +0200
+++ b/src/p_interaction.cpp	Sat Jul 23 05:21:04 2016 -0300
@@ -473,6 +473,12 @@
 		target = source;
 	}
 
+	// [JM] Fire KILL type scripts for actor. Not needed for players, since they have the "DEATH" script type.
+	if (!player && !(flags7 & MF7_NOKILLSCRIPTS) && ((flags7 & MF7_USEKILLSCRIPTS) || gameinfo.forcekillscripts))
+	{
+		FBehavior::StaticStartTypedScripts(SCRIPT_Kill, this, true, 0, true);
+	}
+
 	flags &= ~(MF_SHOOTABLE|MF_FLOAT|MF_SKULLFLY);
 	if (!(flags4 & MF4_DONTFALL)) flags&=~MF_NOGRAVITY;
 	flags |= MF_DROPOFF;
diff -r 734f5ce467b3 -r 2045c167ee66 src/thingdef/thingdef_data.cpp
--- a/src/thingdef/thingdef_data.cpp	Tue Apr 25 21:03:50 2017 +0200
+++ b/src/thingdef/thingdef_data.cpp	Sat Jul 23 05:21:04 2016 -0300
@@ -249,6 +249,10 @@
 	DEFINE_FLAG(MF7, NODECAL, AActor, flags7),
 	DEFINE_FLAG(MF7, FORCEDECAL, AActor, flags7),
 
+	// [BB] Out of order ZDoom backport.
+	DEFINE_FLAG(MF7, USEKILLSCRIPTS, AActor, flags7),
+	DEFINE_FLAG(MF7, NOKILLSCRIPTS, AActor, flags7),
+
 	// [BC] New DECORATE flag defines here.
 	DEFINE_FLAG(STFL, BLUETEAM, AActor, ulSTFlags),
 	DEFINE_FLAG(STFL, REDTEAM, AActor, ulSTFlags),
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1493459671 -7200
#      Sat Apr 29 11:54:31 2017 +0200
# Node ID 1d743910c76d16baabe819f55f0af997e242f2fd
# Parent  2045c167ee6615c2f8e5d095ef30ae05ed79b655
Fixed problems with parsing the DECORATE flag USESPECIAL (addresses 3075).

diff -r 2045c167ee66 -r 1d743910c76d src/actor.h
--- a/src/actor.h	Sat Jul 23 05:21:04 2016 -0300
+++ b/src/actor.h	Sat Apr 29 11:54:31 2017 +0200
@@ -363,7 +363,7 @@
 	//STFL_PULLABLE		= 0x00000004,
 
 	// Execute this object's special when player hits the use key in front of it.
-	STFL_USESPECIAL		= 0x00000008,
+	//STFL_USESPECIAL		= 0x00000008,
 
 	// Object impales players that fall on it.
 	//STFL_IMPALE			= 0x00000010,
diff -r 2045c167ee66 -r 1d743910c76d src/thingdef/thingdef_data.cpp
--- a/src/thingdef/thingdef_data.cpp	Sat Jul 23 05:21:04 2016 -0300
+++ b/src/thingdef/thingdef_data.cpp	Sat Apr 29 11:54:31 2017 +0200
@@ -256,7 +256,6 @@
 	// [BC] New DECORATE flag defines here.
 	DEFINE_FLAG(STFL, BLUETEAM, AActor, ulSTFlags),
 	DEFINE_FLAG(STFL, REDTEAM, AActor, ulSTFlags),
-	DEFINE_FLAG(STFL, USESPECIAL, AActor, ulSTFlags),
 	DEFINE_FLAG(STFL, BASEHEALTH, AActor, ulSTFlags),
 	DEFINE_FLAG(STFL, SUPERHEALTH, AActor, ulSTFlags),
 	DEFINE_FLAG(STFL, BASEARMOR, AActor, ulSTFlags),
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1493460509 -7200
#      Sat Apr 29 12:08:29 2017 +0200
# Node ID 4ae2f4771cbb9e85fa1858219931d83609862960
# Parent  1d743910c76d16baabe819f55f0af997e242f2fd
Fixed problems when a spectator joined the game offline (partially addresses 2594).

diff -r 1d743910c76d -r 4ae2f4771cbb src/p_user.cpp
--- a/src/p_user.cpp	Sat Apr 29 11:54:31 2017 +0200
+++ b/src/p_user.cpp	Sat Apr 29 12:08:29 2017 +0200
@@ -3293,9 +3293,7 @@
 	if ( ( NETWORK_GetState( ) == NETSTATE_SINGLE ) || ( NETWORK_GetState( ) == NETSTATE_SINGLE_MULTIPLAYER ) )
 		SinglePlayerClass[consoleplayer] = players[consoleplayer].userinfo.GetPlayerClassNum();
 
-	players[consoleplayer].playerstate = PST_ENTERNOINVENTORY;
-	players[consoleplayer].bSpectating = false;
-	players[consoleplayer].bDeadSpectator = false;
+	PLAYER_SpectatorJoinsGame( &players[consoleplayer] );
 	players[consoleplayer].camera = players[consoleplayer].mo;
 	Printf( "%s \\c-joined the game.\n", players[consoleplayer].userinfo.GetName() );
 
# HG changeset patch
# User Christoph Oelckers <c.oelckers@zdoom.fake>
# Date 1464168611 -7200
#      Wed May 25 11:30:11 2016 +0200
# Node ID aa5bf0ff2e0ad322f5a90884db80f5be883130a7
# Parent  4ae2f4771cbb9e85fa1858219931d83609862960
- made P_NoiseAlert non-recursive to avoid stack overflow problems in large open-area maps with a high sector count.

diff -r 4ae2f4771cbb -r aa5bf0ff2e0a src/p_enemy.cpp
--- a/src/p_enemy.cpp	Sat Apr 29 12:08:29 2017 +0200
+++ b/src/p_enemy.cpp	Wed May 25 11:30:11 2016 +0200
@@ -118,30 +118,32 @@
 // PROC P_RecursiveSound
 //
 // Called by P_NoiseAlert.
-// Recursively traverse adjacent sectors,
+// Traverses adjacent sectors,
 // sound blocking lines cut off traversal.
 //----------------------------------------------------------------------------
 
-void P_RecursiveSound (sector_t *sec, AActor *soundtarget, bool splash, int soundblocks, AActor *emitter, fixed_t maxdist)
+struct NoiseTarget
 {
-	int 		i;
-	line_t* 	check;
-	sector_t*	other;
-	AActor*		actor;
-		
+	sector_t *sec;
+	int soundblocks;
+};
+static TArray<NoiseTarget> NoiseList(128);
+
+static void NoiseMarkSector(sector_t *sec, AActor *soundtarget, bool splash, AActor *emitter, int soundblocks, fixed_t maxdist)
+{
 	// wake up all monsters in this sector
 	if (sec->validcount == validcount
-		&& sec->soundtraversed <= soundblocks+1)
+		&& sec->soundtraversed <= soundblocks + 1)
 	{
 		return; 		// already flooded
 	}
-	
+
 	sec->validcount = validcount;
-	sec->soundtraversed = soundblocks+1;
+	sec->soundtraversed = soundblocks + 1;
 	sec->SoundTarget = soundtarget;
 
 	// [RH] Set this in the actors in the sector instead of the sector itself.
-	for (actor = sec->thinglist; actor != NULL; actor = actor->snext)
+	for (AActor *actor = sec->thinglist; actor != NULL; actor = actor->snext)
 	{
 		if (actor != soundtarget && (!splash || !(actor->flags4 & MF4_NOSPLASHALERT)) &&
 			(!maxdist || (P_AproxDistance(actor->x - emitter->x, actor->y - emitter->y) <= maxdist)))
@@ -149,20 +151,26 @@
 			actor->LastHeard = soundtarget;
 		}
 	}
-
-	for (i = 0; i < sec->linecount; i++)
+	NoiseList.Push({ sec, soundblocks });
+}
+
+
+static void P_RecursiveSound(sector_t *sec, AActor *soundtarget, bool splash, AActor *emitter, int soundblocks, fixed_t maxdist)
+{
+	for (int i = 0; i < sec->linecount; i++)
 	{
-		check = sec->lines[i];
+		line_t *check = sec->lines[i];
 		if (check->sidedef[1] == NULL ||
 			!(check->flags & ML_TWOSIDED))
 		{
 			continue;
 		}
-		
+
 		// Early out for intra-sector lines
 		if (check->sidedef[0]->sector == check->sidedef[1]->sector) continue;
 
-		if ( check->sidedef[0]->sector == sec)
+		sector_t *other;
+		if (check->sidedef[0]->sector == sec)
 			other = check->sidedef[1]->sector;
 		else
 			other = check->sidedef[0]->sector;
@@ -187,17 +195,18 @@
 		if (check->flags & ML_SOUNDBLOCK)
 		{
 			if (!soundblocks)
-				P_RecursiveSound (other, soundtarget, splash, 1, emitter, maxdist);
+				NoiseMarkSector(other, soundtarget, splash, emitter, 1, maxdist);
 		}
 		else
 		{
-			P_RecursiveSound (other, soundtarget, splash, soundblocks, emitter, maxdist);
+			NoiseMarkSector(other, soundtarget, splash, emitter, soundblocks, maxdist);
 		}
 	}
 }
 
 
 
+
 //----------------------------------------------------------------------------
 //
 // PROC P_NoiseAlert
@@ -216,7 +225,11 @@
 		return;
 
 	validcount++;
-	P_RecursiveSound (emitter->Sector, target, splash, 0, emitter, maxdist);
+	NoiseMarkSector(emitter->Sector, target, splash, emitter, 0, maxdist);
+	for (unsigned i = 0; i < NoiseList.Size(); i++)
+	{
+		P_RecursiveSound(NoiseList[i].sec, target, splash, emitter, NoiseList[i].soundblocks, maxdist);
+	}
 }
 
 
diff -r 4ae2f4771cbb -r aa5bf0ff2e0a src/p_enemy.h
--- a/src/p_enemy.h	Sat Apr 29 12:08:29 2017 +0200
+++ b/src/p_enemy.h	Wed May 25 11:30:11 2016 +0200
@@ -47,7 +47,6 @@
 };
 
 void P_DaggerAlert (AActor *target, AActor *emitter);
-void P_RecursiveSound (sector_t *sec, AActor *soundtarget, bool splash, int soundblocks, AActor *emitter=NULL, fixed_t maxdist=0);
 bool P_HitFriend (AActor *self);
 void P_NoiseAlert (AActor *target, AActor *emmiter, bool splash=false, fixed_t maxdist=0);
 bool P_CheckMeleeRange2 (AActor *actor);
diff -r 4ae2f4771cbb -r aa5bf0ff2e0a src/thingdef/thingdef_codeptr.cpp
--- a/src/thingdef/thingdef_codeptr.cpp	Sat Apr 29 12:08:29 2017 +0200
+++ b/src/thingdef/thingdef_codeptr.cpp	Wed May 25 11:30:11 2016 +0200
@@ -977,8 +977,7 @@
 	P_CheckSplash(self, distance<<FRACBITS);
 	if (alert && self->target != NULL && self->target->player != NULL)
 	{
-		validcount++;
-		P_RecursiveSound (self->Sector, self->target, false, 0);
+		P_NoiseAlert(self->target, self);
 	}
 }
 
# HG changeset patch
# User Christoph Oelckers <c.oelckers@zdoom.fake>
# Date 1464300027 -7200
#      Fri May 27 00:00:27 2016 +0200
# Node ID d661f864a07c56b2e72fa5eafbc735cef5379e4e
# Parent  aa5bf0ff2e0ad322f5a90884db80f5be883130a7
- fixed: The NoiseList array was not cleared before use.

diff -r aa5bf0ff2e0a -r d661f864a07c src/p_enemy.cpp
--- a/src/p_enemy.cpp	Wed May 25 11:30:11 2016 +0200
+++ b/src/p_enemy.cpp	Fri May 27 00:00:27 2016 +0200
@@ -225,6 +225,7 @@
 		return;
 
 	validcount++;
+	NoiseList.Clear();
 	NoiseMarkSector(emitter->Sector, target, splash, emitter, 0, maxdist);
 	for (unsigned i = 0; i < NoiseList.Size(); i++)
 	{
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1493479233 -7200
#      Sat Apr 29 17:20:33 2017 +0200
# Node ID 1c8aacc69bc293a833fa5661985b368148995f3d
# Parent  d661f864a07c56b2e72fa5eafbc735cef5379e4e
Fixed: Bots were not explicitly notified when being revived with SetDeadSpectator (partially addresses 2594).

diff -r d661f864a07c -r 1c8aacc69bc2 src/p_acs.cpp
--- a/src/p_acs.cpp	Fri May 27 00:00:27 2016 +0200
+++ b/src/p_acs.cpp	Sat Apr 29 17:20:33 2017 +0200
@@ -6827,6 +6827,10 @@
 						PLAYER_SetLivesLeft ( &players[ulPlayer], GAMEMODE_GetMaxLives() - 1 );
 					players[ulPlayer].playerstate = PST_REBORN;
 					GAMEMODE_SpawnPlayer( ulPlayer );
+
+					// [BB] If he's a bot, tell him that he successfully joined.
+					if ( players[ulPlayer].bIsBot && players[ulPlayer].pSkullBot )
+						players[ulPlayer].pSkullBot->PostEvent( BOTEVENT_JOINEDGAME );
 				}
 				return 1;
 			}
# HG changeset patch
# User Randy Heit <rheit@users.noreply.github.com>
# Date 1424486550 21600
#      Fri Feb 20 20:42:30 2015 -0600
# Node ID f5b6940ba02b7d00337d88bfbf190e97b32c9e7f
# Parent  1c8aacc69bc293a833fa5661985b368148995f3d
Remove unneeded index restriction from GetUDMFInt/Fixed

diff -r 1c8aacc69bc2 -r f5b6940ba02b src/p_udmf.cpp
--- a/src/p_udmf.cpp	Sat Apr 29 17:20:33 2017 +0200
+++ b/src/p_udmf.cpp	Fri Feb 20 20:42:30 2015 -0600
@@ -345,17 +345,14 @@
 {
 	assert(type >=0 && type <=3);
 
-	if (index > 0)
+	FUDMFKeys *pKeys = UDMFKeys[type].CheckKey(index);
+
+	if (pKeys != NULL)
 	{
-		FUDMFKeys *pKeys = UDMFKeys[type].CheckKey(index);
-
-		if (pKeys != NULL)
+		FUDMFKey *pKey = pKeys->Find(key);
+		if (pKey != NULL)
 		{
-			FUDMFKey *pKey = pKeys->Find(key);
-			if (pKey != NULL)
-			{
-				return pKey->IntVal;
-			}
+			return pKey->IntVal;
 		}
 	}
 	return 0;
@@ -365,17 +362,14 @@
 {
 	assert(type >=0 && type <=3);
 
-	if (index > 0)
+	FUDMFKeys *pKeys = UDMFKeys[type].CheckKey(index);
+
+	if (pKeys != NULL)
 	{
-		FUDMFKeys *pKeys = UDMFKeys[type].CheckKey(index);
-
-		if (pKeys != NULL)
+		FUDMFKey *pKey = pKeys->Find(key);
+		if (pKey != NULL)
 		{
-			FUDMFKey *pKey = pKeys->Find(key);
-			if (pKey != NULL)
-			{
-				return FLOAT2FIXED(pKey->FloatVal);
-			}
+			return FLOAT2FIXED(pKey->FloatVal);
 		}
 	}
 	return 0;
# HG changeset patch
# User Randy Heit <rheit@users.noreply.github.com>
# Date 1424490674 21600
#      Fri Feb 20 21:51:14 2015 -0600
# Node ID a26528e671ddeebdb48add6bee39d513ea88d642
# Parent  f5b6940ba02b7d00337d88bfbf190e97b32c9e7f
Fixed: UDMF loader did not set the index for sides

diff -r f5b6940ba02b -r a26528e671dd src/p_udmf.cpp
--- a/src/p_udmf.cpp	Fri Feb 20 20:42:30 2015 -0600
+++ b/src/p_udmf.cpp	Fri Feb 20 21:51:14 2015 -0600
@@ -1098,6 +1098,7 @@
 		strncpy(sdt->midtexture, "-", 8);
 		sd->SetTextureXScale(FRACUNIT);
 		sd->SetTextureYScale(FRACUNIT);
+		sd->Index = index;
 
 		sc.MustGetToken('{');
 		while (!sc.CheckToken('}'))
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1493489947 -7200
#      Sat Apr 29 20:19:07 2017 +0200
# Node ID 0015d16f3c99e1451ef4378106e032a9ec4ffdec
# Parent  a26528e671ddeebdb48add6bee39d513ea88d642
Fixed: Turning players into dead spectators triggered RESPAWN scripts (partially addresses 2594).

diff -r a26528e671dd -r 0015d16f3c99 src/p_mobj.cpp
--- a/src/p_mobj.cpp	Fri Feb 20 21:51:14 2015 -0600
+++ b/src/p_mobj.cpp	Sat Apr 29 20:19:07 2017 +0200
@@ -5799,7 +5799,9 @@
 					if (bodyque[ii] == p->mo)
 						bodyque[ii] = oldactor;
 			}
-			FBehavior::StaticStartTypedScripts (SCRIPT_Respawn, p->mo, true);
+			// [BB] Don't run respawn scripts if we're spawning a dead spectator body.
+			if ( p->bDeadSpectator == false )
+				FBehavior::StaticStartTypedScripts (SCRIPT_Respawn, p->mo, true);
 		}
 	}
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1493658894 -7200
#      Mon May 01 19:14:54 2017 +0200
# Node ID 1eff8d47422f7648de0b43f91c33380fc4a89471
# Parent  0015d16f3c99e1451ef4378106e032a9ec4ffdec
Fixed: When a map instructed the server to switch to an non-existing map, the server endlessly tried to restart the game on the non-existing map (addresses 3110).

diff -r 0015d16f3c99 -r 1eff8d47422f src/sv_main.cpp
--- a/src/sv_main.cpp	Sat Apr 29 20:19:07 2017 +0200
+++ b/src/sv_main.cpp	Mon May 01 19:14:54 2017 +0200
@@ -4085,8 +4085,8 @@
 	// [BC] Remove all the bots from this game.
 	BOTS_RemoveAllBots( false );
 
-	// Reload the map.
-	sprintf( szString, "map %s", level.mapname );
+	// Reload the map, [BB] but make sure the current map is valid.
+	sprintf( szString, "map %s", P_CheckMapData ( level.mapname ) ? level.mapname : CalcMapName ( 1, 1 ).GetChars() );
 	AddCommandString( szString );
 }
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1493659288 -7200
#      Mon May 01 19:21:28 2017 +0200
# Node ID 6265097a6697e0c4edcaab40b29f7610c3d779fa
# Parent  1eff8d47422f7648de0b43f91c33380fc4a89471
Fixed: The client was missing some validity checks for the server commands SetPlayerPSprite and SetThingFrame (addresses 3107).

diff -r 1eff8d47422f -r 6265097a6697 src/cl_main.cpp
--- a/src/cl_main.cpp	Mon May 01 19:14:54 2017 +0200
+++ b/src/cl_main.cpp	Mon May 01 19:21:28 2017 +0200
@@ -4129,15 +4129,21 @@
 	FState *pNewState = stateOwner->ActorInfo->OwnedStates + offset;
 
 	// [BB] The offset is only guaranteed to work if the actor owns the state.
-	if ( stateOwner->ActorInfo->OwnsState( pNewState ))
-	{
-		P_SetPsprite( player, position, pNewState );
-	}
-	else
+	if ( stateOwner->ActorInfo->OwnsState( pNewState ) == false )
 	{
 		CLIENT_PrintWarning( "SetPlayerPSprite: %s does not own its state at offset %d\n",
 		                     stateOwner->TypeName.GetChars(), offset );
 	}
+	// [BB] Don't switch to a state belonging to a completely unrelated actor.
+	else if ( player->ReadyWeapon->GetClass()->IsDescendantOf ( stateOwner ) == false )
+	{
+		CLIENT_PrintWarning( "SetPlayerPSprite: %s is not a descendant of %s\n",
+		                     player->ReadyWeapon->GetClass()->TypeName.GetChars(), stateOwner->TypeName.GetChars(), offset );
+	}
+	else
+	{
+		P_SetPsprite( player, position, pNewState );
+	}
 }
 
 //*****************************************************************************
@@ -5093,7 +5099,19 @@
 	FState *state = stateOwner->ActorInfo->OwnedStates + offset;
 
 	// [BB] The offset is only guaranteed to work if the actor owns the state.
-	if ( stateOwner->ActorInfo->OwnsState( state ))
+	if ( stateOwner->ActorInfo->OwnsState( state ) == false )
+	{
+		CLIENT_PrintWarning( "client_SetThingFrame: %s does not own its state at offset %d\n",
+		                     stateOwner->TypeName.GetChars(), offset );
+		return;
+	}
+	// [BB] Don't switch to a state belonging to a completely unrelated actor.
+	else if ( pActor->GetClass()->IsDescendantOf ( stateOwner ) == false )
+	{
+		CLIENT_PrintWarning( "client_SetThingFrame: %s is not a descendant of %s\n",
+		                     pActor->GetClass()->TypeName.GetChars(), stateOwner->TypeName.GetChars(), offset );
+	}
+	else
 	{
 		// [BB] Workaround for actors whose spawn state has NoDelay. Make them execute the
 		// spawn state function before jumping to the new state.
@@ -5105,12 +5123,6 @@
 
 		pActor->SetState( state, ( bCallStateFunction == false ));
 	}
-	else
-	{
-		CLIENT_PrintWarning( "client_SetThingFrame: %s does not own its state at offset %d\n",
-		                     stateOwner->TypeName.GetChars(), offset );
-		return;
-	}
 }
 
 //*****************************************************************************
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494082424 -7200
#      Sat May 06 16:53:44 2017 +0200
# Node ID 48ad1973ae3a2b714c4b1c83c0706080bc9a12de
# Parent  6265097a6697e0c4edcaab40b29f7610c3d779fa
Fixed a possible server crash (addresses 3127).

diff -r 6265097a6697 -r 48ad1973ae3a src/m_cheat.cpp
--- a/src/m_cheat.cpp	Mon May 01 19:21:28 2017 +0200
+++ b/src/m_cheat.cpp	Sat May 06 16:53:44 2017 +0200
@@ -1199,16 +1199,20 @@
 
 	void Tick()
 	{
-		Pawn->flags |= MF_SHOOTABLE;
-		Pawn->flags2 &= ~MF2_INVULNERABLE;
-		// Store the player's current damage factor, to restore it later.
-		fixed_t plyrdmgfact = Pawn->DamageFactor;
-		Pawn->DamageFactor = 65536;
-		P_DamageMobj (Pawn, Pawn, Pawn, TELEFRAG_DAMAGE, NAME_Suicide);
-		Pawn->DamageFactor = plyrdmgfact;
-		if (Pawn->health <= 0)
+		// [BB] Added safety check.
+		if ( Pawn )
 		{
-			Pawn->flags &= ~MF_SHOOTABLE;
+			Pawn->flags |= MF_SHOOTABLE;
+			Pawn->flags2 &= ~MF2_INVULNERABLE;
+			// Store the player's current damage factor, to restore it later.
+			fixed_t plyrdmgfact = Pawn->DamageFactor;
+			Pawn->DamageFactor = 65536;
+			P_DamageMobj (Pawn, Pawn, Pawn, TELEFRAG_DAMAGE, NAME_Suicide);
+			Pawn->DamageFactor = plyrdmgfact;
+			if (Pawn->health <= 0)
+			{
+				Pawn->flags &= ~MF_SHOOTABLE;
+			}
 		}
 		Destroy();
 	}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494153178 -7200
#      Sun May 07 12:32:58 2017 +0200
# Node ID c5ac7b46a67d8ff94dfa739faabd9e36dd4e154a
# Parent  48ad1973ae3a2b714c4b1c83c0706080bc9a12de
SERVER_ErrorCleanup now more carefully looks for a valid map to restart the game and exits the server if no map can be found (addresses 3110).

diff -r 48ad1973ae3a -r c5ac7b46a67d src/sv_main.cpp
--- a/src/sv_main.cpp	Sat May 06 16:53:44 2017 +0200
+++ b/src/sv_main.cpp	Sun May 07 12:32:58 2017 +0200
@@ -4085,8 +4085,20 @@
 	// [BC] Remove all the bots from this game.
 	BOTS_RemoveAllBots( false );
 
+	FString map;
 	// Reload the map, [BB] but make sure the current map is valid.
-	sprintf( szString, "map %s", P_CheckMapData ( level.mapname ) ? level.mapname : CalcMapName ( 1, 1 ).GetChars() );
+	if ( P_CheckMapData ( level.mapname ) )
+		map = level.mapname;
+	// [BB] Try the first map of the first episode as fallback.
+	else if ( ( AllEpisodes.Size() > 0 ) && P_CheckMapData ( AllEpisodes[0].mEpisodeMap ) )
+		map = AllEpisodes[0].mEpisodeMap;
+	// [BB] If that still doesn't work try to use CalcMapName.
+	else if ( P_CheckMapData ( CalcMapName ( 1, 1 ) ) )
+		map = CalcMapName ( 1, 1 ).GetChars();
+	// [BB] If we can't find a valid map, we have to error out.
+	else
+		I_FatalError ( "Can't determine a valid starting map." );
+	sprintf( szString, "map %s", map.GetChars() );
 	AddCommandString( szString );
 }
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494162284 -7200
#      Sun May 07 15:04:44 2017 +0200
# Node ID c29441099ef4e3d8488c64432934dbd070e9a34e
# Parent  c5ac7b46a67d8ff94dfa739faabd9e36dd4e154a
Fixed: Clients may not start KILL scripts for non-client handled actors on their own (addresses 3089).

diff -r c5ac7b46a67d -r c29441099ef4 src/p_interaction.cpp
--- a/src/p_interaction.cpp	Sun May 07 12:32:58 2017 +0200
+++ b/src/p_interaction.cpp	Sun May 07 15:04:44 2017 +0200
@@ -476,7 +476,9 @@
 	// [JM] Fire KILL type scripts for actor. Not needed for players, since they have the "DEATH" script type.
 	if (!player && !(flags7 & MF7_NOKILLSCRIPTS) && ((flags7 & MF7_USEKILLSCRIPTS) || gameinfo.forcekillscripts))
 	{
-		FBehavior::StaticStartTypedScripts(SCRIPT_Kill, this, true, 0, true);
+		// [BB] Clients should only do this for client handled actors.
+		if ( NETWORK_InClientModeAndActorNotClientHandled( this ) == false )
+			FBehavior::StaticStartTypedScripts(SCRIPT_Kill, this, true, 0, true);
 	}
 
 	flags &= ~(MF_SHOOTABLE|MF_FLOAT|MF_SKULLFLY);
# HG changeset patch
# User Zalewa <zalewapl@gmail.com>
# Date 1494162875 -7200
#      Sun May 07 15:14:35 2017 +0200
# Node ID 618bfcd9d284e4da152e605f424131d288f80dc2
# Parent  c29441099ef4e3d8488c64432934dbd070e9a34e
- New "SecretFound" SERVERCOMMAND to inform clients of secrets being found by other players.
- New "SecretMarkSectorFound" SERVERCOMMAND will be sent during full update to inform connecting clients of secret sectors that are already discovered. This command is also sent in unison with SecretFound command.
- Fixed inaccurate clientside total amount of secrets with SecretTrigger and +COUNTSECRET actors.
- Fixed: sectors with discovered secrets were not marked on automap clientside. (fixes 2422) Also, any player who discovers a secret will make this secret marked on automap for all players, even if it's a "versus" game mode and the discovering player is a foe of the player using the automap.
- Althud secret counter - for consistency, show the same count as automap counter. (indirectly fixes 2424)

diff -r c29441099ef4 -r 618bfcd9d284 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun May 07 15:04:44 2017 +0200
+++ b/docs/zandronum-history.txt	Sun May 07 15:14:35 2017 +0200
@@ -147,6 +147,7 @@
 +	- The 'authhostname' DNS lookup is not done during startup anymore, but only if the IP address is needed. [Torr Samaho]
 !	- The memory required for the bot nodes is now dynamically allocated when the first bot is added and freed when the last bot is removed. Thus, the CVAR sv_disallowbots is obsolete and was removed (adapted form Konar6's kpatch). This also fixes that offline, the memory required for the bot nodes was always allocated. [Torr Samaho]
 !	- To stay compatible with Zandronum 2.x, GetCVar still returns the consoleplayer's value if called in a non-player activated CLIENTSIDE script to get the value of a user cvar. [Torr Samaho]
+!	- Althud's discovered secret counter now shows global discovered secret count in netgames. [Zalewa]
 
 
 2.2
diff -r c29441099ef4 -r 618bfcd9d284 protocolspec/spec.map.txt
--- a/protocolspec/spec.map.txt	Sun May 07 15:04:44 2017 +0200
+++ b/protocolspec/spec.map.txt	Sun May 07 15:14:35 2017 +0200
@@ -53,3 +53,14 @@
 	String sky1
 	String sky2
 EndCommand
+
+Command SecretFound
+	ExtendedCommand
+	Actor actor
+	Byte secretFlags
+EndCommand
+
+Command SecretMarkSectorFound
+	ExtendedCommand
+	Sector sector
+EndCommand
diff -r c29441099ef4 -r 618bfcd9d284 src/cl_main.cpp
--- a/src/cl_main.cpp	Sun May 07 15:04:44 2017 +0200
+++ b/src/cl_main.cpp	Sun May 07 15:14:35 2017 +0200
@@ -4304,6 +4304,21 @@
 
 //*****************************************************************************
 //
+void ServerCommands::SecretFound::Execute()
+{
+	const bool allowclient = true;
+	P_GiveSecret( actor, secretFlags & SECRETFOUND_MESSAGE, secretFlags & SECRETFOUND_SOUND, allowclient );
+}
+
+//*****************************************************************************
+//
+void ServerCommands::SecretMarkSectorFound::Execute()
+{
+	sector->special &= ~SECRET_MASK;
+}
+
+//*****************************************************************************
+//
 void ServerCommands::SetConsolePlayer::Execute()
 {
 	// If this index is invalid, break out.
diff -r c29441099ef4 -r 618bfcd9d284 src/g_shared/a_secrettrigger.cpp
--- a/src/g_shared/a_secrettrigger.cpp	Sun May 07 15:04:44 2017 +0200
+++ b/src/g_shared/a_secrettrigger.cpp	Sun May 07 15:14:35 2017 +0200
@@ -41,6 +41,9 @@
 #include "doomstat.h"
 #include "v_font.h"
 #include "p_spec.h"
+// Zandronum stuff
+#include "network.h"
+#include "sv_commands.h"
 
 EXTERN_CVAR(String, secretmessage)
 
@@ -57,7 +60,17 @@
 void ASecretTrigger::PostBeginPlay ()
 {
 	Super::PostBeginPlay ();
-	level.total_secrets++;
+	// [Zandronum] Zandronum client musn't increment the total_secrets count
+	// (demo-)client-side because when map is loaded, client is already informed
+	// of the total secrets count by the server. This information includes
+	// the SecretTriggers spawned by the map.
+	if ( !NETWORK_InClientMode( ) )
+		level.total_secrets++;
+	// [Zandronum] However, when new SecretTrigger items are dynamically
+	// spawned, server must inform clients of the sudden change
+	// in total secrets count.
+	if ( NETWORK_GetState( ) == NETSTATE_SERVER )
+		SERVERCOMMANDS_SetMapNumTotalSecrets( level.total_secrets );
 }
 
 void ASecretTrigger::Activate (AActor *activator)
diff -r c29441099ef4 -r 618bfcd9d284 src/g_shared/shared_hud.cpp
--- a/src/g_shared/shared_hud.cpp	Sun May 07 15:04:44 2017 +0200
+++ b/src/g_shared/shared_hud.cpp	Sun May 07 15:14:35 2017 +0200
@@ -260,7 +260,11 @@
 		// work in cooperative hub games
 		if (hud_showsecrets)
 		{
-			mysnprintf(tempstr, countof(tempstr), "%i/%i ", (NETWORK_GetState( ) != NETSTATE_SINGLE) ? CPlayer->secretcount : level.found_secrets, level.total_secrets);
+			// [Zandronum]
+			// instead of ZDoom's
+			//   mysnprintf(tempstr, countof(tempstr), "%i/%i ", multiplayer? CPlayer->secretcount : level.found_secrets, level.total_secrets);
+			// display the total amount of discovered secrets by everyone
+			mysnprintf(tempstr, countof(tempstr), "%i/%i ", level.found_secrets, level.total_secrets);
 			DrawStatLine(x, y, "S:", tempstr);
 		}
 		
diff -r c29441099ef4 -r 618bfcd9d284 src/network_enums.h
--- a/src/network_enums.h	Sun May 07 15:04:44 2017 +0200
+++ b/src/network_enums.h	Sun May 07 15:14:35 2017 +0200
@@ -365,6 +365,8 @@
 	ENUM_ELEMENT ( SVC2_LEVELSPAWNTHING ),
 	ENUM_ELEMENT ( SVC2_LEVELSPAWNTHINGNONETID ),
 	ENUM_ELEMENT ( SVC2_SETPLAYERACCOUNTNAME ),
+	ENUM_ELEMENT ( SVC2_SECRETFOUND ),
+	ENUM_ELEMENT ( SVC2_SECRETMARKSECTORFOUND ),
 	// [BB] Commands necessary for the account system.
 	ENUM_ELEMENT ( SVC2_SRP_USER_START_AUTHENTICATION ),
 	ENUM_ELEMENT ( SVC2_SRP_USER_PROCESS_CHALLENGE ),
@@ -488,4 +490,11 @@
 }
 END_ENUM ( SpawnFlags )
 
+BEGIN_ENUM ( SecretFoundFlags )
+{
+	ENUM_ELEMENT2( SECRETFOUND_SOUND, 1 ),
+	ENUM_ELEMENT2( SECRETFOUND_MESSAGE, 2 ),
+}
+END_ENUM( SecretFoundFlags )
+
 #endif	// ( !defined(__NETWORK_ENUMS_H__) || defined(GENERATE_ENUM_STRINGS) )
diff -r c29441099ef4 -r 618bfcd9d284 src/p_mobj.cpp
--- a/src/p_mobj.cpp	Sun May 07 15:04:44 2017 +0200
+++ b/src/p_mobj.cpp	Sun May 07 15:14:35 2017 +0200
@@ -5043,7 +5043,11 @@
 	// And for secrets
 	if (actor->flags5 & MF5_COUNTSECRET)
 	{
-		level.total_secrets++;
+		// [Zandronum] The total amount of secrets counter should be synched with server.
+		if ( !NETWORK_InClientMode( ) )
+			level.total_secrets++;
+		if ( NETWORK_GetState( ) == NETSTATE_SERVER )
+			SERVERCOMMANDS_SetMapNumTotalSecrets();
 	}
 
 	if ((( actor->ulNetworkFlags & NETFL_NONETID ) == false ) && ( ( actor->ulNetworkFlags & NETFL_SERVERSIDEONLY ) == false ) &&
diff -r c29441099ef4 -r 618bfcd9d284 src/p_spec.cpp
--- a/src/p_spec.cpp	Sun May 07 15:04:44 2017 +0200
+++ b/src/p_spec.cpp	Sun May 07 15:14:35 2017 +0200
@@ -87,6 +87,7 @@
 #include "doomdata.h"
 #include "invasion.h"
 #include "unlagged.h"
+#include "network_enums.h"
 
 static FRandom pr_playerinspecialsector ("PlayerInSpecialSector");
 void P_SetupPortals();
@@ -792,10 +793,12 @@
 //
 //============================================================================
 
-void P_GiveSecret(AActor *actor, bool printmessage, bool playsound)
+// [Zandronum] `allowclient` is Zandronum extension to prevent accidental execution
+// by clients unless explicitly allowed to do so.
+void P_GiveSecret(AActor *actor, bool printmessage, bool playsound, bool allowclient)
 {
-	// [BB] The server handles this.
-	if ( NETWORK_InClientMode() )
+	// [Zandronum] client must bail out if not allowed to give secret.
+	if ( !allowclient && NETWORK_InClientMode() )
 		return;
 
 	if (actor != NULL)
@@ -804,17 +807,22 @@
 		{
 			actor->player->secretcount++;
 		}
-		// [BB] The server needs to do this for every client.
+		// [Zandronum] The server needs to inform all clients (even foes) - ZDoom does so.
 		if ( NETWORK_GetState( ) == NETSTATE_SERVER )
 		{
-			for ( int i = 0; i < MAXPLAYERS; ++i )
-			{
-				if ( actor->CheckLocalView ( i ) )
-				{
-					if (playsound) SERVERCOMMANDS_Sound( CHAN_AUTO | CHAN_UI, "misc/secret", 1, ATTN_NORM, i, SVCF_ONLYTHISCLIENT );
-					if (printmessage) SERVERCOMMANDS_PrintMid( secretmessage, false, i, SVCF_ONLYTHISCLIENT );
-				}
-			}
+			BYTE secretFlags = 0;
+			if ( printmessage )
+				secretFlags |= SECRETFOUND_MESSAGE;
+			if ( playsound )
+				secretFlags |= SECRETFOUND_SOUND;
+			// [Zandronum] Check if sector was secret but is not anymore.
+			// We can send this even if player triggers P_GiveSecret
+			// by picking up +COUNTSECRET actors in a secret sector
+			// as the client-side reaction is a no-op if client
+			// already knows that the sector was discovered.
+			if ( actor->Sector != NULL && (actor->Sector->special & SECRET_MASK) == 0 && actor->Sector->secretsector)
+				SERVERCOMMANDS_SecretMarkSectorFound( actor->Sector );
+			SERVERCOMMANDS_SecretFound( actor, secretFlags );
 		}
 		else if (actor->CheckLocalView (consoleplayer))
 		{
diff -r c29441099ef4 -r 618bfcd9d284 src/p_spec.h
--- a/src/p_spec.h	Sun May 07 15:04:44 2017 +0200
+++ b/src/p_spec.h	Sun May 07 15:14:35 2017 +0200
@@ -185,7 +185,9 @@
 void	P_SectorDamage(int tag, int amount, FName type, const PClass *protectClass, int flags);
 void	P_SetSectorFriction (int tag, int amount, bool alterFlag);
 
-void P_GiveSecret(AActor *actor, bool printmessage, bool playsound);
+// [Zandronum] `allowclient` is Zandronum extension to prevent accidental execution
+// by clients unless explicitly allowed to do so.
+void P_GiveSecret(AActor *actor, bool printmessage, bool playsound, bool allowclient = false);
 
 //
 // getSide()
diff -r c29441099ef4 -r 618bfcd9d284 src/sv_commands.cpp
--- a/src/sv_commands.cpp	Sun May 07 15:04:44 2017 +0200
+++ b/src/sv_commands.cpp	Sun May 07 15:14:35 2017 +0200
@@ -3226,6 +3226,25 @@
 
 //*****************************************************************************
 //
+void SERVERCOMMANDS_SecretFound( AActor *actor, BYTE secretFlags, ULONG ulPlayerExtra, ServerCommandFlags flags )
+{
+	ServerCommands::SecretFound command;
+	command.SetActor( actor );
+	command.SetSecretFlags( (BYTE)secretFlags );
+	command.sendCommandToClients( ulPlayerExtra, flags );
+}
+
+//*****************************************************************************
+//
+void SERVERCOMMANDS_SecretMarkSectorFound( sector_t *sector, ULONG ulPlayerExtra, ServerCommandFlags flags )
+{
+	ServerCommands::SecretMarkSectorFound command;
+	command.SetSector( sector );
+	command.sendCommandToClients( ulPlayerExtra, flags );
+}
+
+//*****************************************************************************
+//
 void SERVERCOMMANDS_SetMapTime( ULONG ulPlayerExtra, ServerCommandFlags flags )
 {
 	ServerCommands::SetMapTime command;
diff -r c29441099ef4 -r 618bfcd9d284 src/sv_commands.h
--- a/src/sv_commands.h	Sun May 07 15:04:44 2017 +0200
+++ b/src/sv_commands.h	Sun May 07 15:14:35 2017 +0200
@@ -300,6 +300,8 @@
 void	SERVERCOMMANDS_MapNew( const char *pszMapName, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_MapExit( LONG lPosition, const char *pszNextMap, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_MapAuthenticate( const char *pszMapName, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
+void	SERVERCOMMANDS_SecretFound( AActor *actor, BYTE secretFlags, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
+void	SERVERCOMMANDS_SecretMarkSectorFound( sector_t *sector, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0);
 void	SERVERCOMMANDS_SetMapTime( ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_SetMapNumKilledMonsters( ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_SetMapNumFoundItems( ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
diff -r c29441099ef4 -r 618bfcd9d284 src/sv_main.cpp
--- a/src/sv_main.cpp	Sun May 07 15:04:44 2017 +0200
+++ b/src/sv_main.cpp	Sun May 07 15:14:35 2017 +0200
@@ -3267,6 +3267,10 @@
 		{
 			SERVERCOMMANDS_SetSectorReflection( ulIdx );
 		}
+
+		// Tell client to mark all discovered secret sectors.
+		if ((pSector->special & SECRET_MASK) == 0 && pSector->secretsector)
+			SERVERCOMMANDS_SecretMarkSectorFound( pSector, ulClient, SVCF_ONLYTHISCLIENT );
 	}
 
 	for ( ulIdx = 0; static_cast<signed> (ulIdx) <= po_NumPolyobjs; ulIdx++ )
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494168342 -7200
#      Sun May 07 16:45:42 2017 +0200
# Node ID 46a4650d2c4bb77fc8df0d335056aa6260a52a68
# Parent  618bfcd9d284e4da152e605f424131d288f80dc2
Fixed the argument list of two CLIENT_PrintWarning calls.

diff -r 618bfcd9d284 -r 46a4650d2c4b src/cl_main.cpp
--- a/src/cl_main.cpp	Sun May 07 15:14:35 2017 +0200
+++ b/src/cl_main.cpp	Sun May 07 16:45:42 2017 +0200
@@ -4138,7 +4138,7 @@
 	else if ( player->ReadyWeapon->GetClass()->IsDescendantOf ( stateOwner ) == false )
 	{
 		CLIENT_PrintWarning( "SetPlayerPSprite: %s is not a descendant of %s\n",
-		                     player->ReadyWeapon->GetClass()->TypeName.GetChars(), stateOwner->TypeName.GetChars(), offset );
+		                     player->ReadyWeapon->GetClass()->TypeName.GetChars(), stateOwner->TypeName.GetChars() );
 	}
 	else
 	{
@@ -5124,7 +5124,7 @@
 	else if ( pActor->GetClass()->IsDescendantOf ( stateOwner ) == false )
 	{
 		CLIENT_PrintWarning( "client_SetThingFrame: %s is not a descendant of %s\n",
-		                     pActor->GetClass()->TypeName.GetChars(), stateOwner->TypeName.GetChars(), offset );
+		                     pActor->GetClass()->TypeName.GetChars(), stateOwner->TypeName.GetChars() );
 	}
 	else
 	{
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1494186008 -10800
#      Sun May 07 22:40:08 2017 +0300
# Node ID a8afbe737e3015e2faafc0016598a6e627c167f2
# Parent  46a4650d2c4bb77fc8df0d335056aa6260a52a68
Added the new ACS function SetActivatorToPlayer that sets the activator to the given player number, if possible (addresses 2649)

diff -r 46a4650d2c4b -r a8afbe737e30 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun May 07 16:45:42 2017 +0200
+++ b/docs/zandronum-history.txt	Sun May 07 22:40:08 2017 +0300
@@ -43,6 +43,7 @@
 +	- Backported ZDoom's ACS function GetActorFloorTexture. [Torr Samaho]
 +	- The SQLite3 database can now be used in WAL mode. This mode is enabled / disabled with the new CCMDs 'db_enable_wal' / 'db_disable_wal'. [Torr Samaho]
 +	- Added new ACS command SetDeadSpectator (int playernumber, int deadspectator). This command can turn alive players into dead spectators (deadspectator == 1) and revive dead spectators  (deadspectator == 0). [Torr Samaho]
++	- Added the new ACS command SetActivatorToPlayer as a replacement solution for AAPTR_PLAYERx that works with all 64 players instead of only 8. [Dusk]
 -	- Fixed: Newly connecting clients were not properly informed about the secrets that were already revealed. [Torr Samaho]
 -	- Fixed: Resurrect cheat didn't work online. [Dusk]
 -	- Fixed: Turbo cheat didn't work online. [Dusk]
diff -r 46a4650d2c4b -r a8afbe737e30 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun May 07 16:45:42 2017 +0200
+++ b/src/p_acs.cpp	Sun May 07 22:40:08 2017 +0300
@@ -4969,6 +4969,7 @@
 	ACSF_GetTimeProperty,
 	ACSF_Strftime,
 	ACSF_SetDeadSpectator,
+	ACSF_SetActivatorToPlayer,
 
 	// ZDaemon
 	ACSF_GetTeamScore = 19620,	// (int team)
@@ -6835,6 +6836,15 @@
 				return 1;
 			}
 
+		// [TP]
+		case ACSF_SetActivatorToPlayer:
+			if (( argCount >= 1 ) && PLAYER_IsValidPlayer( args[0] ))
+			{
+				activator = players[args[0]].mo;
+				return 1;
+			}
+			break;
+
 		case ACSF_GetActorFloorTexture:
 		{
 			auto a = SingleActorFromTID(args[0], activator);
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494188269 -7200
#      Sun May 07 22:17:49 2017 +0200
# Node ID b6e9548eda40c5285d29eed98ee60aae2116256d
# Parent  a8afbe737e3015e2faafc0016598a6e627c167f2
CheckPlayerCamera can be used again in CLIENTSIDE scripts when the player is coop spying. Since the server takes care of the game sync, there is no need to block this (partially addresses 1679).

diff -r a8afbe737e30 -r b6e9548eda40 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun May 07 22:40:08 2017 +0300
+++ b/src/p_acs.cpp	Sun May 07 22:17:49 2017 +0200
@@ -10389,7 +10389,8 @@
 			{
 				int playernum = STACK(1);
 
-				if (playernum < 0 || playernum >= MAXPLAYERS || !playeringame[playernum] || players[playernum].camera == NULL || players[playernum].camera->player != NULL)
+				// [BB] Zandronum allows this in CLIENTSIDE scripts even when coop spying, since the server takes care of the sync.
+				if (playernum < 0 || playernum >= MAXPLAYERS || !playeringame[playernum] || players[playernum].camera == NULL || ( players[playernum].camera->player != NULL && !NETWORK_InClientMode() ) )
 				{
 					STACK(1) = -1;
 				}
# HG changeset patch
# User Ru5tK1ng
# Date 1494268127 18000
#      Mon May 08 13:28:47 2017 -0500
# Node ID fd1acc0e3e35eba7ec93920b23f01aa9fe6aaa24
# Parent  b6e9548eda40c5285d29eed98ee60aae2116256d
Added sv_forcerespawntime to control force respawn delay (addresses 1814)

diff -r b6e9548eda40 -r fd1acc0e3e35 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun May 07 22:17:49 2017 +0200
+++ b/docs/zandronum-history.txt	Mon May 08 13:28:47 2017 -0500
@@ -44,6 +44,7 @@
 +	- The SQLite3 database can now be used in WAL mode. This mode is enabled / disabled with the new CCMDs 'db_enable_wal' / 'db_disable_wal'. [Torr Samaho]
 +	- Added new ACS command SetDeadSpectator (int playernumber, int deadspectator). This command can turn alive players into dead spectators (deadspectator == 1) and revive dead spectators  (deadspectator == 0). [Torr Samaho]
 +	- Added the new ACS command SetActivatorToPlayer as a replacement solution for AAPTR_PLAYERx that works with all 64 players instead of only 8. [Dusk]
++	- Added CVAR sv_forcerespawntime that controls the time delay before force respawn activates and respawns a player. [Ru5tK1ng]
 -	- Fixed: Newly connecting clients were not properly informed about the secrets that were already revealed. [Torr Samaho]
 -	- Fixed: Resurrect cheat didn't work online. [Dusk]
 -	- Fixed: Turbo cheat didn't work online. [Dusk]
diff -r b6e9548eda40 -r fd1acc0e3e35 src/p_interaction.cpp
--- a/src/p_interaction.cpp	Sun May 07 22:17:49 2017 +0200
+++ b/src/p_interaction.cpp	Mon May 08 13:28:47 2017 -0500
@@ -767,8 +767,15 @@
 
 			// [BC] Don't respawn quite so fast on forced respawn. It sounds weird when your
 			// scream isn't completed.
+			// [RK] We can add on a custom force respawn delay instead drawn from the forcerespawn time CVAR
 			if ( dmflags & DF_FORCE_RESPAWN )
-				player->respawn_time += TICRATE/2;
+				player->respawn_time += ( sv_forcerespawntime == 0 ? TICRATE/2 : sv_forcerespawntime * TICRATE );
+		}
+
+		// [RK] When instant respawn and force respawn are on, use sv_forcerespawntime to set the player's respawn time
+		if ( zacompatflags & ZACOMPATF_INSTANTRESPAWN && dmflags & DF_FORCE_RESPAWN )
+		{
+			player->respawn_time = level.time + (sv_forcerespawntime * TICRATE);
 		}
 
 		// count environment kills against you
diff -r b6e9548eda40 -r fd1acc0e3e35 src/p_user.cpp
--- a/src/p_user.cpp	Sun May 07 22:17:49 2017 +0200
+++ b/src/p_user.cpp	Mon May 08 13:28:47 2017 -0500
@@ -3172,6 +3172,20 @@
 		return;
 	}
 
+	// [RK] Handle player respawn time when force respawn is on
+	// normally players can't respawn manually until the level time is larger than respawn time
+	// since sv_forcerespawntime adds onto a player's respawn time, we'll set the time to 0 when they press use
+	// this statement factors in compat_instantrespawn and determines whether a player can respawn instantly or has to wait
+	if ( dmflags & DF_FORCE_RESPAWN )
+	{
+		if (( level.time >= ( player->respawn_time - ( sv_forcerespawntime*TICRATE )) && (( zacompatflags & ZACOMPATF_INSTANTRESPAWN ) == false ))
+			|| ( level.time < player->respawn_time && ( zacompatflags & ZACOMPATF_INSTANTRESPAWN )))
+		{
+			if (( player->cmd.ucmd.buttons & BT_USE ) || (( player->userinfo.GetClientFlags() & CLIENTFLAGS_RESPAWNONFIRE ) && ( player->cmd.ucmd.buttons & BT_ATTACK ) && (( player->oldbuttons & BT_ATTACK ) == false )))
+				player->respawn_time = 0;
+		}
+	}
+
 	// [BB] If lives are limited and the game is in progess, possibly put the player in dead spectator mode.
 	if ( GAMEMODE_AreLivesLimited ( ) && GAMEMODE_IsGameInProgress ( ) )
 	{
diff -r b6e9548eda40 -r fd1acc0e3e35 src/sv_main.cpp
--- a/src/sv_main.cpp	Sun May 07 22:17:49 2017 +0200
+++ b/src/sv_main.cpp	Mon May 08 13:28:47 2017 -0500
@@ -263,6 +263,7 @@
 CVAR( Bool, sv_defaultdmflags, true, 0 )
 CVAR( Bool, sv_forcepassword, false, CVAR_ARCHIVE|CVAR_NOSETBYACS )
 CVAR( Bool, sv_forcejoinpassword, false, CVAR_ARCHIVE|CVAR_NOSETBYACS )
+CVAR( Int, sv_forcerespawntime, 0, CVAR_ARCHIVE ) // [RK]
 CVAR( Bool, sv_showlauncherqueries, false, CVAR_ARCHIVE )
 CVAR( Bool, sv_timestamp, false, CVAR_ARCHIVE|CVAR_NOSETBYACS )
 CVAR( Int, sv_timestampformat, 0, CVAR_ARCHIVE|CVAR_NOSETBYACS )
diff -r b6e9548eda40 -r fd1acc0e3e35 src/sv_main.h
--- a/src/sv_main.h	Sun May 07 22:17:49 2017 +0200
+++ b/src/sv_main.h	Mon May 08 13:28:47 2017 -0500
@@ -508,6 +508,7 @@
 EXTERN_CVAR( Bool, sv_defaultdmflags );
 EXTERN_CVAR( Bool, sv_forcepassword );
 EXTERN_CVAR( Bool, sv_forcejoinpassword );
+EXTERN_CVAR( Int, sv_forcerespawntime ); // [RK] Delay used for forced respawn
 EXTERN_CVAR( Bool, sv_showlauncherqueries );
 EXTERN_CVAR( Int, sv_maxclients );
 EXTERN_CVAR( Int, sv_maxplayers );
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494679282 -7200
#      Sat May 13 14:41:22 2017 +0200
# Node ID 1382fe4b77f45a3b07a09ba0e3416a0b6cd75221
# Parent  fd1acc0e3e35eba7ec93920b23f01aa9fe6aaa24
Changed the default value of sv_defaultdmflags to false (addresses 2752).

diff -r fd1acc0e3e35 -r 1382fe4b77f4 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Mon May 08 13:28:47 2017 -0500
+++ b/docs/zandronum-history.txt	Sat May 13 14:41:22 2017 +0200
@@ -150,6 +150,7 @@
 !	- The memory required for the bot nodes is now dynamically allocated when the first bot is added and freed when the last bot is removed. Thus, the CVAR sv_disallowbots is obsolete and was removed (adapted form Konar6's kpatch). This also fixes that offline, the memory required for the bot nodes was always allocated. [Torr Samaho]
 !	- To stay compatible with Zandronum 2.x, GetCVar still returns the consoleplayer's value if called in a non-player activated CLIENTSIDE script to get the value of a user cvar. [Torr Samaho]
 !	- Althud's discovered secret counter now shows global discovered secret count in netgames. [Zalewa]
+!	- Changed the default value of sv_defaultdmflags to false. [Torr Samaho]
 
 
 2.2
diff -r fd1acc0e3e35 -r 1382fe4b77f4 src/sv_main.cpp
--- a/src/sv_main.cpp	Mon May 08 13:28:47 2017 -0500
+++ b/src/sv_main.cpp	Sat May 13 14:41:22 2017 +0200
@@ -260,7 +260,7 @@
 //	CONSOLE VARIABLES
 
 CVAR( String, sv_motd, "", CVAR_ARCHIVE )
-CVAR( Bool, sv_defaultdmflags, true, 0 )
+CVAR( Bool, sv_defaultdmflags, false, 0 )
 CVAR( Bool, sv_forcepassword, false, CVAR_ARCHIVE|CVAR_NOSETBYACS )
 CVAR( Bool, sv_forcejoinpassword, false, CVAR_ARCHIVE|CVAR_NOSETBYACS )
 CVAR( Int, sv_forcerespawntime, 0, CVAR_ARCHIVE ) // [RK]
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494686598 -7200
#      Sat May 13 16:43:18 2017 +0200
# Node ID f0ba466ed3ff4b0140c1eda3c7ed69f8bf955f64
# Parent  1382fe4b77f45a3b07a09ba0e3416a0b6cd75221
Fixed "P_PlayerThink: No body for player" warnings on the clients that could occur after a map change before the full snapshot was received (addresses 3132).

diff -r 1382fe4b77f4 -r f0ba466ed3ff src/cl_main.cpp
--- a/src/cl_main.cpp	Sat May 13 14:41:22 2017 +0200
+++ b/src/cl_main.cpp	Sat May 13 16:43:18 2017 +0200
@@ -6704,6 +6704,11 @@
 		// Start new level.
 		G_InitNew( mapName, false );
 
+		// [BB] Make sure there is no old player information left. Since the full update
+		// may be distributed over multiple tics, we can start ticking the world before
+		// all player bodies are spawned, causing "no body for player" warnings.
+		CLIENT_ClearAllPlayers();
+
 		// Restore our demo recording status.
 		CLIENTDEMO_SetPlaying( playing );
 
# HG changeset patch
# User Zalewa <zalewapl@gmail.com>
# Date 1494148456 -7200
#      Sun May 07 11:14:16 2017 +0200
# Node ID c2b0b3675a1b05a12bc77c7225931766658bc4c9
# Parent  f0ba466ed3ff4b0140c1eda3c7ed69f8bf955f64
Restored the original behavior of dead spectators losing inventory; added new cvar make them keep it.

sv_deadplayerscankeepinventory set to 1 will make dead spectators
preserve inventory between lives refreshes in "casual survival"
(sv_survival_nomapresetondeath 1) and between maps in normal survival
if other players complete the map.

diff -r f0ba466ed3ff -r c2b0b3675a1b src/cl_main.cpp
--- a/src/cl_main.cpp	Sat May 13 16:43:18 2017 +0200
+++ b/src/cl_main.cpp	Sun May 07 11:14:16 2017 +0200
@@ -3329,7 +3329,7 @@
 	// Special inventory handling for respawning in coop.
 	// [BB] Also don't do so if the player changed the player class.
 	else if (( teamgame == false ) &&
-			 (( priorState == PST_REBORN ) || (pPlayer->bDeadSpectator)) &&
+			 ( priorState == PST_REBORN ) &&
 			 ( oldPlayerClass == pPlayer->CurrentPlayerClass ) &&
 			 ( pOldActor ))
 	{
diff -r f0ba466ed3ff -r c2b0b3675a1b src/d_main.cpp
--- a/src/d_main.cpp	Sat May 13 16:43:18 2017 +0200
+++ b/src/d_main.cpp	Sun May 07 11:14:16 2017 +0200
@@ -624,6 +624,7 @@
 CVAR (Flag, sv_unblockallies,		zadmflags, ZADF_UNBLOCK_ALLIES);
 CVAR (Flag, sv_nodrop,				zadmflags, ZADF_NODROP);
 CVAR (Flag, sv_survival_nomapresetondeath, zadmflags, ZADF_SURVIVAL_NO_MAP_RESET_ON_DEATH);
+CVAR (Flag, sv_deadplayerscankeepinventory, zadmflags, ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY);
 
 //==========================================================================
 //
diff -r f0ba466ed3ff -r c2b0b3675a1b src/doomdef.h
--- a/src/doomdef.h	Sat May 13 16:43:18 2017 +0200
+++ b/src/doomdef.h	Sun May 07 11:14:16 2017 +0200
@@ -365,6 +365,13 @@
 	// Just respawn the players with fresh set of lives and allow
 	// the ones in queue to join.
 	ZADF_SURVIVAL_NO_MAP_RESET_ON_DEATH = 1 << 16,
+
+	// Affects game modes where sv_maxlives is honored by the game.
+	// If set, players who become dead spectators (run out of lives) will still
+	// keep inventory in accordance to DF_COOP_LOSE_* and DF_COOP_HALVE_AMMO flags.
+	// If unset, players who lose all lives will lose entire inventory
+	// regardless of the DF_COOP_* flags.
+	ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY = 1 << 17,
 };
 
 // [RH] Compatibility flags.
diff -r f0ba466ed3ff -r c2b0b3675a1b src/g_level.cpp
--- a/src/g_level.cpp	Sat May 13 16:43:18 2017 +0200
+++ b/src/g_level.cpp	Sun May 07 11:14:16 2017 +0200
@@ -1702,7 +1702,7 @@
 		strncpy (level.mapname, nextlevel, 255);
 	}
 
-	// Respawn dead spectators now so their inventory can travel.
+	// [Zandronum] Respawn dead spectators now so their inventory can travel.
 	GAMEMODE_RespawnDeadSpectators( PST_REBORN );
 
 	G_StartTravel ();
diff -r f0ba466ed3ff -r c2b0b3675a1b src/p_interaction.cpp
--- a/src/p_interaction.cpp	Sat May 13 16:43:18 2017 +0200
+++ b/src/p_interaction.cpp	Sun May 07 11:14:16 2017 +0200
@@ -2571,9 +2571,10 @@
 		if ( NETWORK_InClientMode() == false )
 			pPlayer->mo->DropImportantItems( false );
 
-		if ( !bDeadSpectator )
+		if ( !bDeadSpectator || !( zadmflags & ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY ) )
 		{
-			// Take away all of the player's inventory when they become true spectator.
+			// Take away all of the player's inventory when they become true spectator
+			// or when dead spectators are not allowed to keep inventory.
 			// [BB] Needs to be done before G_DoReborn is called for dead spectators. Otherwise ReadyWeapon is not NULLed.
 			pPlayer->mo->DestroyAllInventory( );
 		}
@@ -2600,7 +2601,7 @@
 			// Save the player's old body, and respawn him or her.
 			pOldBody = pPlayer->mo;
 			// [BB] This also transfers the inventory from the old to the new body.
-			players[pPlayer - players].playerstate = PST_REBORN;
+			players[pPlayer - players].playerstate = ( zadmflags & ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY ) ? PST_REBORN : PST_REBORNNOINVENTORY;
 			GAMEMODE_SpawnPlayer( pPlayer - players );
 
 			// Set the player's new body to the position of his or her old body.
diff -r f0ba466ed3ff -r c2b0b3675a1b src/p_user.cpp
--- a/src/p_user.cpp	Sat May 13 16:43:18 2017 +0200
+++ b/src/p_user.cpp	Sun May 07 11:14:16 2017 +0200
@@ -1503,7 +1503,7 @@
 	player->health = GetDefault ()->health;
 
 	// [BB] True spectators are supposed to have no inventory, but they should get their health.
-	if ( player->bSpectating && !player->bDeadSpectator ) return;
+	if ( player->bSpectating && (!player->bDeadSpectator || !( zadmflags & ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY ) ) ) return;
 
 	// [BC] Initialize the max. health bonus.
 	player->lMaxHealthBonus = 0;
diff -r f0ba466ed3ff -r c2b0b3675a1b src/survival.cpp
--- a/src/survival.cpp	Sat May 13 16:43:18 2017 +0200
+++ b/src/survival.cpp	Sun May 07 11:14:16 2017 +0200
@@ -280,7 +280,7 @@
 
 	// First let all players who died to respawn and keep their inventory.
 	// This will not pop awaiting players from the join queue.
-	GAMEMODE_RespawnDeadSpectators( PST_REBORN );
+	GAMEMODE_RespawnDeadSpectators( zadmflags & ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY ? PST_REBORN : PST_REBORNNOINVENTORY );
 
 	// Next let all players in queue to join the game.
 	// JOINQUEUE_PopQueue will not join players unless the game
# HG changeset patch
# User Edoardo Prezioso <edo88@email.it>
# Date 1427974072 -7200
#      Thu Apr 02 13:27:52 2015 +0200
# Node ID 71263e425db8f170858700f95d82d418d9306088
# Parent  c2b0b3675a1b05a12bc77c7225931766658bc4c9
- Import GAMENAMELOWERCASE macro from Zandronum.

This will greatly help reducing the code delta between ZDoom and the child ports.

diff -r c2b0b3675a1b -r 71263e425db8 src/d_iwad.cpp
--- a/src/d_iwad.cpp	Sun May 07 11:14:16 2017 +0200
+++ b/src/d_iwad.cpp	Thu Apr 02 13:27:52 2015 +0200
@@ -47,9 +47,9 @@
 #include "v_video.h"
 #include "gameconfigfile.h"
 #include "resourcefiles/resourcefile.h"
+#include "version.h"
 // [BB] New #includes.
 #include "doomerrors.h"
-#include "version.h"
 
 
 CVAR (Bool, queryiwad, true, CVAR_ARCHIVE|CVAR_GLOBALCONFIG);
@@ -529,16 +529,16 @@
 					  "Did you install " GAMENAME " properly? You can do either of the following:\n"
 					  "\n"
 #if defined(_WIN32)
-					  "1. Place one or more of these wads in the same directory as "GAMENAME".\n"
-					  "2. Edit your "GAMENAMELOWERCASE"-username.ini and add the directories of your iwads\n"
+					  "1. Place one or more of these wads in the same directory as " GAMENAME ".\n"
+					  "2. Edit your " GAMENAMELOWERCASE "-username.ini and add the directories of your iwads\n"
 					  "to the list beneath [IWADSearch.Directories]");
 #elif defined(__APPLE__)
-					  "1. Place one or more of these wads in ~/Library/Application Support/zdoom/\n"
-					  "2. Edit your ~/Library/Preferences/zdoom.ini and add the directories\n"
+					  "1. Place one or more of these wads in ~/Library/Application Support/" GAMENAMELOWERCASE "/\n"
+					  "2. Edit your ~/Library/Preferences/" GAMENAMELOWERCASE ".ini and add the directories\n"
 					  "of your iwads to the list beneath [IWADSearch.Directories]");
 #else
-					  "1. Place one or more of these wads in ~/.config/zdoom/.\n"
-					  "2. Edit your ~/.config/zdoom/zdoom.ini and add the directories of your\n"
+					  "1. Place one or more of these wads in ~/.config/" GAMENAMELOWERCASE "/.\n"
+					  "2. Edit your ~/.config/" GAMENAMELOWERCASE "/" GAMENAMELOWERCASE ".ini and add the directories of your\n"
 					  "iwads to the list beneath [IWADSearch.Directories]");
 #endif
 	}
diff -r c2b0b3675a1b -r 71263e425db8 src/m_specialpaths.cpp
--- a/src/m_specialpaths.cpp	Sun May 07 11:14:16 2017 +0200
+++ b/src/m_specialpaths.cpp	Thu Apr 02 13:27:52 2015 +0200
@@ -204,7 +204,7 @@
 	{
 		path += "/" GAME_DIR;
 		CreatePath(path);
-		path += "/" GAMENAMELOWERCASE ".ini"; // [BB]
+		path += "/" GAMENAMELOWERCASE ".ini";
 	}
 	else
 	{ // construct "$PROGDIR/zdoom-$USER.ini"
@@ -224,11 +224,11 @@
 					*probe = '_';
 				++probe;
 			}
-			path << GAMENAMELOWERCASE"-" << uname << ".ini"; // [BB]
+			path << GAMENAMELOWERCASE "-" << uname << ".ini";
 		}
 		else
 		{ // Couldn't get user name, so just use zdoom.ini
-			path += GAMENAMELOWERCASE".ini"; // [BB]
+			path += GAMENAMELOWERCASE ".ini";
 		}
 	}
 
@@ -239,7 +239,7 @@
 		if (!FileExists(path))
 		{
 			path = progdir;
-			path << GAMENAMELOWERCASE".ini"; // [BB]
+			path << GAMENAMELOWERCASE ".ini";
 		}
 	}
 
@@ -411,11 +411,11 @@
 		noErr == FSRefMakePath(&folder, (UInt8*)cpath, PATH_MAX))
 	{
 		FString path;
-		path << cpath << "/" GAMENAMELOWERCASE ".ini"; // [BB]
+		path << cpath << "/" GAMENAMELOWERCASE ".ini";
 		return path;
 	}
 	// Ungh.
-	return GAMENAMELOWERCASE".ini"; // [BB]
+	return GAMENAMELOWERCASE ".ini";
 }
 
 //===========================================================================
@@ -499,12 +499,12 @@
 		bool moved = false;
 // [BB] Don't move the config if we are using a beta build.
 #if ( BUILD_ID == BUILD_RELEASE )
-		FString oldpath = NicePath("~/." GAMENAMELOWERCASE "/"); // [BB]
+		FString oldpath = NicePath("~/." GAMENAMELOWERCASE "/");
 		if (stat (oldpath, &extrainfo) != -1)
 		{
 			if (rename(oldpath, path) == -1)
 			{
-				I_Error ("Failed to move old zdoom directory (%s) to new location (%s).",
+				I_Error ("Failed to move old " GAMENAMELOWERCASE " directory (%s) to new location (%s).",
 					oldpath.GetChars(), path.GetChars());
 			}
 			else
@@ -601,7 +601,7 @@
 
 FString M_GetConfigPath(bool for_reading)
 {
-	return GetUserFile(GAMENAMELOWERCASE".ini"); // [BB]
+	return GetUserFile(GAMENAMELOWERCASE ".ini");
 }
 
 //===========================================================================
diff -r c2b0b3675a1b -r 71263e425db8 src/sdl/i_main.cpp
--- a/src/sdl/i_main.cpp	Sun May 07 11:14:16 2017 +0200
+++ b/src/sdl/i_main.cpp	Thu Apr 02 13:27:52 2015 +0200
@@ -245,7 +245,7 @@
 #if !defined (__APPLE__)
 	{
 		int s[4] = { SIGSEGV, SIGILL, SIGFPE, SIGBUS };
-		cc_install_handlers(argc, argv, 4, s, GAMENAMELOWERCASE"-crash.log", DoomSpecificInfo);
+		cc_install_handlers(argc, argv, 4, s, GAMENAMELOWERCASE "-crash.log", DoomSpecificInfo);
  	}
 #endif // !__APPLE__
  	
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1494762723 -7200
#      Sun May 14 13:52:03 2017 +0200
# Node ID f73a508869ff1845625b35633cb56e08841a2162
# Parent  71263e425db8f170858700f95d82d418d9306088
Fixed: The client still send a CLC_USERINFO command even if only userinfo variables with CVAR_UNSYNCED_USERINFO were changed (addresses 3136).

diff -r 71263e425db8 -r f73a508869ff src/cl_commands.cpp
--- a/src/cl_commands.cpp	Thu Apr 02 13:27:52 2015 +0200
+++ b/src/cl_commands.cpp	Sun May 14 13:52:03 2017 +0200
@@ -166,6 +166,23 @@
 	if ( CLIENT_GetAllowSendingOfUserInfo( ) == false )
 		return;
 
+	// [BB] Make sure that we only send anything to the server, if cvarNames actually
+	// contains cvars that we want to send.
+	bool sendUserinfo = false;
+
+	for ( std::set<FName>::const_iterator iterator = cvarNames.begin(); iterator != cvarNames.end(); ++iterator )
+	{
+		FBaseCVar **cvarPointer = players[consoleplayer].userinfo.CheckKey( *iterator );
+		if ( cvarPointer && ( (*cvarPointer)->GetFlags() & CVAR_UNSYNCED_USERINFO ) == false )
+		{
+			sendUserinfo = true;
+			break;
+		}
+	}
+
+	if ( sendUserinfo == false )
+		return;
+
 	NETWORK_WriteByte( &CLIENT_GetLocalBuffer( )->ByteStream, CLC_USERINFO );
 
 	for ( std::set<FName>::const_iterator iterator = cvarNames.begin(); iterator != cvarNames.end(); ++iterator )
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495288048 -7200
#      Sat May 20 15:47:28 2017 +0200
# Node ID c70ed787609274e7cfe7b2e4a2c82b2446e85d71
# Parent  f73a508869ff1845625b35633cb56e08841a2162
Fixed: CLIENTSIDE scripts lost track of the player as activator when the player was morphed or unmorphed (addresses 3033).

diff -r f73a508869ff -r c70ed7876092 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun May 14 13:52:03 2017 +0200
+++ b/docs/zandronum-history.txt	Sat May 20 15:47:28 2017 +0200
@@ -128,6 +128,7 @@
 -	- Fixed: The MinotaurFriend was not handled properly online. [Edward-san]
 -	- Fixed: When a player was damaged, clients always executed the first state function of the standard pain state. [Torr Samaho]
 -	- Fixed: The server didn't inform the clients about changes made with A_ChangeFlag to the special Zandronum flags, like DONTIDENTIFYTARGET. [Torr Samaho]
+-	- Fixed: CLIENTSIDE scripts lost track of the player as activator when the player was morphed or unmorphed. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r f73a508869ff -r c70ed7876092 src/cl_main.cpp
--- a/src/cl_main.cpp	Sun May 14 13:52:03 2017 +0200
+++ b/src/cl_main.cpp	Sat May 20 15:47:28 2017 +0200
@@ -3293,6 +3293,12 @@
 	// Spawn the body.
 	pActor = static_cast<APlayerPawn *>( Spawn( pPlayer->cls, x, y, z, NO_REPLACE ));
 
+	// [BB] If the player was morphed or unmorphed, we to substitute all pointers
+	// to the old body to the new one. Otherwise (among other things) CLIENTSIDE
+	// scripts will lose track of the player body as activator.
+	if (pPlayer->mo && ( priorState == PST_LIVE ) && ( isMorphed != ( pPlayer->morphTics != 0 ) ) )
+		DObject::StaticPointerSubstitution (pPlayer->mo, pActor);
+
 	pPlayer->mo = pActor;
 	pActor->player = pPlayer;
 	pPlayer->playerstate = playerState;
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495289701 -7200
#      Sat May 20 16:15:01 2017 +0200
# Node ID fbb3d9cc01aa64fa4cf7161775ed154288b24fbb
# Parent  c70ed787609274e7cfe7b2e4a2c82b2446e85d71
fixed a VC++ warning

diff -r c70ed7876092 -r fbb3d9cc01aa src/cl_main.cpp
--- a/src/cl_main.cpp	Sat May 20 15:47:28 2017 +0200
+++ b/src/cl_main.cpp	Sat May 20 16:15:01 2017 +0200
@@ -4313,7 +4313,7 @@
 void ServerCommands::SecretFound::Execute()
 {
 	const bool allowclient = true;
-	P_GiveSecret( actor, secretFlags & SECRETFOUND_MESSAGE, secretFlags & SECRETFOUND_SOUND, allowclient );
+	P_GiveSecret( actor, !!(secretFlags & SECRETFOUND_MESSAGE), secretFlags & SECRETFOUND_SOUND, allowclient );
 }
 
 //*****************************************************************************
# HG changeset patch
# User Ru5tK1ng
# Date 1495308094 18000
#      Sat May 20 14:21:34 2017 -0500
# Node ID d8f5707ca6b5339abc6923ebb67ea01daed8e2f6
# Parent  fbb3d9cc01aa64fa4cf7161775ed154288b24fbb
Fountain particles were being shifted to the spawn thing's z height (Fixes 3125).

diff -r fbb3d9cc01aa -r d8f5707ca6b5 src/p_effect.cpp
--- a/src/p_effect.cpp	Sat May 20 16:15:01 2017 +0200
+++ b/src/p_effect.cpp	Sat May 20 14:21:34 2017 -0500
@@ -340,7 +340,8 @@
 		{
 			// [TP] Take useplayerstartz into account here
 			fixed_t floorZ = sector->floorplane.ZatPoint( ts.x, ts.y );
-			fixed_t z = ( level.flags & LEVEL_USEPLAYERSTARTZ ) ? ts.z : floorZ;
+			// [RK] Prevent the fountains from being shifted incorrectly; add the floor and offset.
+			fixed_t z = ( level.flags & LEVEL_USEPLAYERSTARTZ ) ? ( floorZ + ts.z ) : floorZ;
 			MakeFountain( ts.x, ts.y, z, 16 << FRACBITS, 0, color, color );
 		}
 	}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495357023 -7200
#      Sun May 21 10:57:03 2017 +0200
# Node ID 5fa47a0d7d90947f620f46f3e736254cd2e67d83
# Parent  d8f5707ca6b5339abc6923ebb67ea01daed8e2f6
CheckPlayerCamera can be used again when the player is coop spying. Since the server takes care of the game sync, there is no need to block this. This change restores the behavior known from Zandronum 2.1.2 (partially addresses 1679).

diff -r d8f5707ca6b5 -r 5fa47a0d7d90 src/p_acs.cpp
--- a/src/p_acs.cpp	Sat May 20 14:21:34 2017 -0500
+++ b/src/p_acs.cpp	Sun May 21 10:57:03 2017 +0200
@@ -10389,8 +10389,8 @@
 			{
 				int playernum = STACK(1);
 
-				// [BB] Zandronum allows this in CLIENTSIDE scripts even when coop spying, since the server takes care of the sync.
-				if (playernum < 0 || playernum >= MAXPLAYERS || !playeringame[playernum] || players[playernum].camera == NULL || ( players[playernum].camera->player != NULL && !NETWORK_InClientMode() ) )
+				// [BB] Zandronum allows this even when coop spying, since the server takes care of the sync.
+				if (playernum < 0 || playernum >= MAXPLAYERS || !playeringame[playernum] || players[playernum].camera == NULL /*|| players[playernum].camera->player != NULL*/)
 				{
 					STACK(1) = -1;
 				}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495393854 -7200
#      Sun May 21 21:10:54 2017 +0200
# Node ID a40c9d8e8751d948790a393e49231390ea9147d8
# Parent  5fa47a0d7d90947f620f46f3e736254cd2e67d83
updated a changelog entry according to Edward-san's suggestion

diff -r 5fa47a0d7d90 -r a40c9d8e8751 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun May 21 10:57:03 2017 +0200
+++ b/docs/zandronum-history.txt	Sun May 21 21:10:54 2017 +0200
@@ -125,7 +125,7 @@
 -	- Fixed: Angle arguments in DECORATE didn't work properly on ARM devices like the Raspberry Pi (adapted from the corresponding ZDoom fix). [Torr Samaho]
 -	- Fixed: The server informed the clients about the position of the other players during intermission, which generated unnecessary network traffic. [Torr Samaho]
 -	- Fixed: the server erroneously told clients that some slamming actors changed their state to the Spawn state instead of the Idle state. [Edward-san]
--	- Fixed: The MinotaurFriend was not handled properly online. [Edward-san]
+-	- Slightly improved how the MinotaurFriend is handled online. [Edward-san]
 -	- Fixed: When a player was damaged, clients always executed the first state function of the standard pain state. [Torr Samaho]
 -	- Fixed: The server didn't inform the clients about changes made with A_ChangeFlag to the special Zandronum flags, like DONTIDENTIFYTARGET. [Torr Samaho]
 -	- Fixed: CLIENTSIDE scripts lost track of the player as activator when the player was morphed or unmorphed. [Torr Samaho]
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495395719 -7200
#      Sun May 21 21:41:59 2017 +0200
# Node ID 71fae41a7c652ce3a20923b4234958409d1a6a63
# Parent  a40c9d8e8751d948790a393e49231390ea9147d8
Fixed: A too long value of sv_hostname could crash the Windows server when it was minimized to the system tray (fixes 3130).

diff -r a40c9d8e8751 -r 71fae41a7c65 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun May 21 21:10:54 2017 +0200
+++ b/docs/zandronum-history.txt	Sun May 21 21:41:59 2017 +0200
@@ -129,6 +129,7 @@
 -	- Fixed: When a player was damaged, clients always executed the first state function of the standard pain state. [Torr Samaho]
 -	- Fixed: The server didn't inform the clients about changes made with A_ChangeFlag to the special Zandronum flags, like DONTIDENTIFYTARGET. [Torr Samaho]
 -	- Fixed: CLIENTSIDE scripts lost track of the player as activator when the player was morphed or unmorphed. [Torr Samaho]
+-	- Fixed: A too long value of sv_hostname could crash the Windows server when it was minimized to the system tray. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r a40c9d8e8751 -r 71fae41a7c65 src/win32/serverconsole/serverconsole.cpp
--- a/src/win32/serverconsole/serverconsole.cpp	Sun May 21 21:10:54 2017 +0200
+++ b/src/win32/serverconsole/serverconsole.cpp	Sun May 21 21:41:59 2017 +0200
@@ -548,7 +548,8 @@
 			NotifyIconData.hIcon = g_hSmallIcon;
 			
 			Val = sv_hostname.GetGenericRep( CVAR_String );
-			sprintf( szString, "%s", Val.String );
+			strncpy( szString, Val.String, 63 );
+			szString[63] = 0;
 			lstrcpy( NotifyIconData.szTip, szString );
 
 			Shell_NotifyIcon( NIM_ADD, &NotifyIconData );
@@ -599,7 +600,8 @@
 				NotifyIconData.hIcon = g_hSmallIcon;//LoadIcon( g_hInst, MAKEINTRESOURCE( IDI_ICONST ));
 
 				Val = sv_hostname.GetGenericRep( CVAR_String );
-				sprintf( szString, "%s", Val.String );
+				strncpy( szString, Val.String, 63 );
+				szString[63] = 0;
 				lstrcpy( g_NotifyIconData.szTip, szString );
 
 				Shell_NotifyIcon( NIM_DELETE, &NotifyIconData );
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495971661 -7200
#      Sun May 28 13:41:01 2017 +0200
# Node ID 19d89d1637b1c2965ca08b9370efe64aa01c9cce
# Parent  71fae41a7c652ce3a20923b4234958409d1a6a63
added server warnings for oversized network packets

diff -r 71fae41a7c65 -r 19d89d1637b1 src/network/netcommand.cpp
--- a/src/network/netcommand.cpp	Sun May 21 21:41:59 2017 +0200
+++ b/src/network/netcommand.cpp	Sun May 28 13:41:01 2017 +0200
@@ -256,14 +256,21 @@
 }
 
 //*****************************************************************************
+//
+NETBUFFER_s& NetCommand::getBufferForClient( ULONG i ) const
+{
+	if ( _unreliable )
+		return SERVER_GetClient( i )->UnreliablePacketBuffer;
+
+	return SERVER_GetClient( i )->PacketBuffer;
+}
+
+//*****************************************************************************
 // [TP]
 //
 BYTESTREAM_s& NetCommand::getBytestreamForClient( ULONG i ) const
 {
-	if ( _unreliable )
-		return SERVER_GetClient( i )->UnreliablePacketBuffer.ByteStream;
-
-	return SERVER_GetClient( i )->PacketBuffer.ByteStream;
+	return getBufferForClient( i ).ByteStream;
 }
 
 //*****************************************************************************
@@ -279,6 +286,19 @@
 void NetCommand::sendCommandToOneClient( ULONG i )
 {
 	SERVER_CheckClientBuffer( i, _buffer.ulCurrentSize, _unreliable == false );
+
+	// [BB] 5 = 1 + 4 (SVC_HEADER + packet number)
+	const unsigned int estimateSize = getBufferForClient( i ).CalcSize() + _buffer.ulCurrentSize + 5;
+	if ( estimateSize >= SERVER_GetMaxPacketSize( ) )
+	{
+		// [BB] This should never happen.
+		if ( getBufferForClient( i ).CalcSize() > 0 )
+			SERVER_PrintWarning ( "NetCommand %s didn't create a new packet to client %d even though the command doesn't fit within the current packet!\n", getHeaderAsString(), i );
+		// [BB] This happens if the current command alone is already too big for one packet.
+		else
+			SERVER_PrintWarning ( "NetCommand %s created a packet to client %d exceeding sv_maxpacketsize (%d >= %d)!\n", getHeaderAsString(), i, estimateSize, SERVER_GetMaxPacketSize( ));
+	}
+
 	writeCommandToStream( getBytestreamForClient( i ));
 }
 
diff -r 71fae41a7c65 -r 19d89d1637b1 src/network/netcommand.h
--- a/src/network/netcommand.h	Sun May 21 21:41:59 2017 +0200
+++ b/src/network/netcommand.h	Sun May 28 13:41:01 2017 +0200
@@ -101,6 +101,7 @@
 	void addVariable ( const int value );
 	void addShortByte ( int value, int bits );
 	void writeCommandToStream ( BYTESTREAM_s &ByteStream ) const;
+	NETBUFFER_s& getBufferForClient( ULONG i ) const;
 	BYTESTREAM_s& getBytestreamForClient( ULONG i ) const;
 	void sendCommandToClients ( ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 	void sendCommandToOneClient( ULONG i );
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495976562 -7200
#      Sun May 28 15:02:42 2017 +0200
# Node ID beaf2601443cd83710fefe324a4ec97242e373e8
# Parent  19d89d1637b1c2965ca08b9370efe64aa01c9cce
SERVERCOMMANDS_SetAllPlayerUserInfo now calls SERVERCOMMANDS_SetPlayerUserInfo to reduce code duplication

diff -r 19d89d1637b1 -r beaf2601443c src/sv_commands.cpp
--- a/src/sv_commands.cpp	Sun May 28 13:41:01 2017 +0200
+++ b/src/sv_commands.cpp	Sun May 28 15:02:42 2017 +0200
@@ -487,26 +487,14 @@
 	if ( PLAYER_IsValidPlayer( ulPlayer ) == false )
 		return;
 
-	ServerCommands::SetPlayerUserInfo command;
-	TArray<ServerCommands::CVar> cvars;
 	userinfo_t &userinfo = players[ulPlayer].userinfo;
 	userinfo_t::Iterator iterator ( userinfo );
+	std::set<FName> cvarNames;
 
 	for ( userinfo_t::Pair *pair; iterator.NextPair( pair ); )
-	{
-		ServerCommands::CVar cvar;
-		cvar.name = pair->Key;
-		// [BB] Skin needs special treatment, so that the clients can use skins the server doesn't have.
-		if ( pair->Key == NAME_Skin )
-			cvar.value = SERVER_GetClient( ulPlayer )->szSkin;
-		else
-			cvar.value = pair->Value->GetGenericRep( CVAR_String ).String;
-		cvars.Push( cvar );
-	}
-
-	command.SetPlayer( &players[ulPlayer] );
-	command.SetCvars( cvars );
-	command.sendCommandToClients( ulPlayerExtra, flags );
+		cvarNames.insert( pair->Key );
+
+	SERVERCOMMANDS_SetPlayerUserInfo( ulPlayer, cvarNames, ulPlayerExtra, flags );
 }
 
 //*****************************************************************************
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495993406 -7200
#      Sun May 28 19:43:26 2017 +0200
# Node ID befdc069426aa69a65f170f261c6591c38d51660
# Parent  beaf2601443cd83710fefe324a4ec97242e373e8
Fixed: SERVERCOMMANDS_SetPlayerUserInfo could lead to oversized network packets, i.e. packets bigger than sv_sv_maxpacketsize (addresses an issue brought up in 3132).

diff -r beaf2601443c -r befdc069426a src/sv_commands.cpp
--- a/src/sv_commands.cpp	Sun May 28 15:02:42 2017 +0200
+++ b/src/sv_commands.cpp	Sun May 28 19:43:26 2017 +0200
@@ -506,6 +506,9 @@
 
 	ServerCommands::SetPlayerUserInfo command;
 	TArray<ServerCommands::CVar> cvars;
+	command.SetPlayer( &players[ulPlayer] );
+
+	unsigned int commandSize = 0;
 
 	for ( FName name : names )
 	{
@@ -521,11 +524,33 @@
 				element.value = SERVER_GetClient( ulPlayer )->szSkin;
 			else
 				element.value = cvar->GetGenericRep( CVAR_String ).String;
+
+			unsigned int elementNetSize = element.value.Len() + 1;
+
+			// [BB] Name will be transferred as short.
+			if ( element.name.IsPredefined() )
+				elementNetSize += 2;
+			// [BB] Name will be transferred as short (-1) + string + terminating 0.
+			else
+				elementNetSize += strlen ( element.name.GetChars() ) + 2 + 1;
+
+			// [BB] The new element won't fit in a single packet. Send what we have so far
+			// and put the new command into the next packet.
+			// 3 = SVC_SETPLAYERUSERINFO + playerNum + numCvars
+			// 5 = 1 + 4 (SVC_HEADER + packet number)
+			if ( ( commandSize + elementNetSize + 3 + 5 ) >= SERVER_GetMaxPacketSize( ) )
+			{
+				command.SetCvars( cvars );
+				command.sendCommandToClients( ulPlayerExtra, flags );
+				cvars.Clear();
+				commandSize = 0;
+			}
+
+			commandSize += elementNetSize;
 			cvars.Push( element );
 		}
 	}
 
-	command.SetPlayer( &players[ulPlayer] );
 	command.SetCvars( cvars );
 	command.sendCommandToClients( ulPlayerExtra, flags );
 }
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1495998395 -7200
#      Sun May 28 21:06:35 2017 +0200
# Node ID 4a38de8a5d495fbe2b656f5c5cab998d31292919
# Parent  befdc069426aa69a65f170f261c6591c38d51660
fixed GCC warnings

diff -r befdc069426a -r 4a38de8a5d49 src/network/netcommand.cpp
--- a/src/network/netcommand.cpp	Sun May 28 19:43:26 2017 +0200
+++ b/src/network/netcommand.cpp	Sun May 28 21:06:35 2017 +0200
@@ -293,10 +293,10 @@
 	{
 		// [BB] This should never happen.
 		if ( getBufferForClient( i ).CalcSize() > 0 )
-			SERVER_PrintWarning ( "NetCommand %s didn't create a new packet to client %d even though the command doesn't fit within the current packet!\n", getHeaderAsString(), i );
+			SERVER_PrintWarning ( "NetCommand %s didn't create a new packet to client %lu even though the command doesn't fit within the current packet!\n", getHeaderAsString(), i );
 		// [BB] This happens if the current command alone is already too big for one packet.
 		else
-			SERVER_PrintWarning ( "NetCommand %s created a packet to client %d exceeding sv_maxpacketsize (%d >= %d)!\n", getHeaderAsString(), i, estimateSize, SERVER_GetMaxPacketSize( ));
+			SERVER_PrintWarning ( "NetCommand %s created a packet to client %lu exceeding sv_maxpacketsize (%d >= %lu)!\n", getHeaderAsString(), i, estimateSize, SERVER_GetMaxPacketSize( ));
 	}
 
 	writeCommandToStream( getBytestreamForClient( i ));
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1496593976 -7200
#      Sun Jun 04 18:32:56 2017 +0200
# Node ID 03a18ad9af57618751f019f3bfae149f0de56eb6
# Parent  4a38de8a5d495fbe2b656f5c5cab998d31292919
Fixed: Using SetDBEntryString with an integer instead of a string as argument could cause a crash (addresses 2741).

diff -r 4a38de8a5d49 -r 03a18ad9af57 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Sun May 28 21:06:35 2017 +0200
+++ b/docs/zandronum-history.txt	Sun Jun 04 18:32:56 2017 +0200
@@ -130,6 +130,7 @@
 -	- Fixed: The server didn't inform the clients about changes made with A_ChangeFlag to the special Zandronum flags, like DONTIDENTIFYTARGET. [Torr Samaho]
 -	- Fixed: CLIENTSIDE scripts lost track of the player as activator when the player was morphed or unmorphed. [Torr Samaho]
 -	- Fixed: A too long value of sv_hostname could crash the Windows server when it was minimized to the system tray. [Torr Samaho]
+-	- Fixed: Using SetDBEntryString with an integer instead of a string as argument could cause a crash. [Torr Samaho]
 !	- Changed: Spectators can now interact with gravity and use the fly/land commands. [Leonard]
 !	- Save games now contain information about the renderer used to create the save. This allows to print a proper error message when an incompatible save is tried to be loaded. [Torr Samaho]
 !	- Clients don't error out anymore when encountering a division by zero in a DECORATE expression. Instead, a one time warning is printed on the first occasion and the result is assumed to be zero. This is necessary since clients can encounter this in valid DECORATE code due to Zandronum's jump handling. [Torr Samaho]
diff -r 4a38de8a5d49 -r 03a18ad9af57 src/za_database.cpp
--- a/src/za_database.cpp	Sun May 28 21:06:35 2017 +0200
+++ b/src/za_database.cpp	Sun Jun 04 18:32:56 2017 +0200
@@ -452,13 +452,13 @@
 	if ( DATABASE_EntryExists ( Namespace, EntryName ) )
 	{
 		// [BB] Setting an entry to the empty string deletes the entry.
-		if ( strlen ( EntryValue ) > 0 )
+		if ( EntryValue && ( strlen ( EntryValue ) > 0 ) )
 			DATABASE_SetEntry ( Namespace, EntryName, EntryValue );
 		else
 			DATABASE_DeleteEntry ( Namespace, EntryName );
 	}
 	// [BB] Don't store empty string entries.
-	else if ( strlen ( EntryValue ) > 0 )
+	else if ( EntryValue && ( strlen ( EntryValue ) > 0 ) )
 		DATABASE_AddEntry ( Namespace, EntryName, EntryValue );
 }
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1496607023 -7200
#      Sun Jun 04 22:10:23 2017 +0200
# Node ID 739ab5441779771af4269093ab93c2e0a2a388c0
# Parent  03a18ad9af57618751f019f3bfae149f0de56eb6
Fixed: Exiting a map online that has no next map defined in MAPINFO caused the server to get stuck (addresses 3148).

diff -r 03a18ad9af57 -r 739ab5441779 src/g_level.cpp
--- a/src/g_level.cpp	Sun Jun 04 18:32:56 2017 +0200
+++ b/src/g_level.cpp	Sun Jun 04 22:10:23 2017 +0200
@@ -621,7 +621,11 @@
 		}
 		else 
 		{
-			nextlevel.Format("enDSeQ%04x", int(gameinfo.DefaultEndSequence));
+			// [BB] The server doesn't support end sequences, so just return to the current map.
+			if ( NETWORK_GetState( ) == NETSTATE_SERVER )
+				nextlevel = level.mapname;
+			else
+				nextlevel.Format("enDSeQ%04x", int(gameinfo.DefaultEndSequence));
 		}
 	}
 	else if (strncmp(levelname, "enDSeQ", 6) != 0)
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1496947788 -10800
#      Thu Jun 08 21:49:48 2017 +0300
# Node ID 89336095880a6a47c1f9d67fd14df0deb68d6ce3
# Parent  739ab5441779771af4269093ab93c2e0a2a388c0
Added the new BuildNetCommand function to ServerCommands that generates the NetCommand and returns it instead of sending it. BaseServerCommand::sendCommandToClient is now a simple convenience function.

diff -r 739ab5441779 -r 89336095880a protocolspec/generator/codegenerator.py
--- a/protocolspec/generator/codegenerator.py	Sun Jun 04 22:10:23 2017 +0200
+++ b/protocolspec/generator/codegenerator.py	Thu Jun 08 21:49:48 2017 +0300
@@ -281,13 +281,13 @@
 
 	def writesender(self, command):
 		'''
-			Generates the sendCommandToClients method of a ServerCommand
+			Generates the BuildNetCommand method of a ServerCommand
 		'''
 		commandname = command.name
 		enumname = command.enumname
 
 		# Write the function signature.
-		self.writecontext('void ServerCommands::{commandname}::sendCommandToClients( int playerExtra, ServerCommandFlags flags )'.format(**locals()))
+		self.writecontext('NetCommand ServerCommands::{commandname}::BuildNetCommand() const'.format(**locals()))
 		self.writingsender = True
 		self.startscope()
 
@@ -295,7 +295,7 @@
 		if command.parameters:
 			self.writeline('if ( AllParametersInitialized() == false )')
 			self.startscope()
-			self.writeline('Printf( "WARNING: {commandname}::sendCommandToClients: not all parameters were initialized:\\n" );'.format(**locals()))
+			self.writeline('Printf( "WARNING: {commandname}::BuildNetCommand: not all parameters were initialized:\\n" );'.format(**locals()))
 
 			# Be more specific about which parameters in particular were left out.
 			self.writeline('PrintMissingParameters();')
@@ -310,8 +310,8 @@
 		# Let parameters write their senders in.
 		self.handleparameters(command, 'writesend')
 
-		# Write the code to send this command, and finish the function.
-		self.writeline('command.sendCommandToClients( playerExtra, flags );')
+		# Return the finished command.
+		self.writeline('return command;')
 		self.endscope()
 		self.writingsender = False
 
@@ -333,6 +333,7 @@
 		self.writeline('#include "networkshared.h"')
 		self.writeline('#include "sv_commands.h"')
 		self.writeline('#include "joinqueue.h"')
+		self.writeline('#include "network/netcommand.h"')
 
 		# Add any includes from the spec
 		for include in self.spec.includes:
@@ -369,8 +370,13 @@
 			public:
 				virtual void PrintMissingParameters() const = 0;
 				virtual bool AllParametersInitialized() const = 0;
-				virtual void sendCommandToClients( int playerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 ) = 0;
+				virtual NetCommand BuildNetCommand() const = 0;
 				virtual void Execute() = 0;
+
+				inline void sendCommandToClients( int playerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 )
+				{
+					BuildNetCommand().sendCommandToClients( playerExtra, flags );
+				}
 			};
 		''')
 
@@ -408,8 +414,8 @@
 			# Add the Execute() method, that cl_main.cpp will define.
 			self.writeline('void Execute();')
 
-			# Add the sendCommandToClients() method for sv_commands.cpp
-			self.writeline('void sendCommandToClients( int playerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );')
+			# Add the BuildNetCommand() method
+			self.writeline('NetCommand BuildNetCommand() const;')
 
 			# The parser function must be a friend of this command, so that it can fill in parameters.
 			if command.extended:
diff -r 739ab5441779 -r 89336095880a protocolspec/generator/parametertypes.py
--- a/protocolspec/generator/parametertypes.py	Sun Jun 04 22:10:23 2017 +0200
+++ b/protocolspec/generator/parametertypes.py	Thu Jun 08 21:49:48 2017 +0300
@@ -528,4 +528,4 @@
 		writer.writeline('command.{reference} = NETWORK_ReadName( bytestream );'.format(**locals()))
 
 	def writesend(self, writer, command, reference, **args):
-		writer.writeline('command.addName( this->{reference} );'.format(**locals()))
\ No newline at end of file
+		writer.writeline('command.addName( this->{reference} );'.format(**locals()))
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1496948712 -10800
#      Thu Jun 08 22:05:12 2017 +0300
# Node ID a7641eb196f015e2aa39b625ecc50fe546c0177f
# Parent  89336095880a6a47c1f9d67fd14df0deb68d6ce3
Added methods to push to, pop from and clear array types

diff -r 89336095880a -r a7641eb196f0 protocolspec/generator/codegenerator.py
--- a/protocolspec/generator/codegenerator.py	Thu Jun 08 21:49:48 2017 +0300
+++ b/protocolspec/generator/codegenerator.py	Thu Jun 08 22:05:12 2017 +0300
@@ -404,6 +404,7 @@
 			# Add setter methods for each parameter
 			for parameter in command.ownedParameters:
 				self.writeline('void %s( %s value );' % (parameter.setter, parameter.constreference))
+				parameter.writespecialmethods(writer = self)
 
 			# Add condition check methods. The values must be sorted first, or the order of the methods changes
 			# every time the header is generated, which causes the header to change every time this script is run and
diff -r 89336095880a -r a7641eb196f0 protocolspec/generator/parametertypes.py
--- a/protocolspec/generator/parametertypes.py	Thu Jun 08 21:49:48 2017 +0300
+++ b/protocolspec/generator/parametertypes.py	Thu Jun 08 22:05:12 2017 +0300
@@ -45,6 +45,9 @@
 	classname = capwords(typename.lower()) + 'Parameter'
 	return getattr(modules[__name__], classname)
 
+def uppercasify(name):
+	return name[:1].upper() + name[1:]
+
 # ----------------------------------------------------------------------------------------------------------------------
 
 class SpecParameter:
@@ -68,6 +71,9 @@
 	def writereadchecks(self, **args):
 		pass
 
+	def writespecialmethods(self, **args):
+		pass
+
 	@property
 	def constreference(self):
 		if self.cxxtypename.endswith('*') or self.cxxtypename in passbyvalue:
@@ -517,6 +523,32 @@
 		self.elementType.writereadchecks(writer = writer, reference = reference + '[i]', **args)
 		writer.endscope()
 
+	def writespecialmethods(self, writer, **args):
+		# Add a method to push to this parameter.
+		writer.writeline('void PushTo{name}({type} value)'.format(
+			name = uppercasify(self.name),
+			type = self.elementType.constreference,
+		))
+		writer.startscope()
+		writer.writeline('{name}.Push(value);'.format(name = self.name))
+		writer.writeline('_{name}Initialized = true;'.format(name = self.name))
+		writer.endscope()
+		# Add a method to pop from this parameter.
+		writer.writeline('bool PopFrom{name}({type}& value)'.format(
+			name = uppercasify(self.name),
+			type = self.elementType.cxxtypename,
+		))
+		writer.startscope()
+		writer.writeline('return {name}.Pop(value);'.format(name = self.name))
+		writer.endscope()
+		# Add a method to clear this parameter.
+		writer.writeline('void Clear{name}()'.format(
+			name = uppercasify(self.name),
+		))
+		writer.startscope()
+		writer.writeline('{name}.Clear();'.format(name = self.name))
+		writer.endscope()
+
 # ----------------------------------------------------------------------------------------------------------------------
 
 class NameParameter(SpecParameter):
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1496948882 -10800
#      Thu Jun 08 22:08:02 2017 +0300
# Node ID 3c091d308689a477b14750c98cde13d1de09820a
# Parent  a7641eb196f015e2aa39b625ecc50fe546c0177f
Added NetCommand::calcSize()

diff -r a7641eb196f0 -r 3c091d308689 src/network/netcommand.cpp
--- a/src/network/netcommand.cpp	Thu Jun 08 22:05:12 2017 +0300
+++ b/src/network/netcommand.cpp	Thu Jun 08 22:08:02 2017 +0300
@@ -316,4 +316,12 @@
 void NetCommand::setUnreliable ( bool a )
 {
 	_unreliable = a;
-}
\ No newline at end of file
+}
+
+//*****************************************************************************
+// [TP] Returns the size of this net command.
+//
+int NetCommand::calcSize() const
+{
+	return _buffer.CalcSize();
+}
diff -r a7641eb196f0 -r 3c091d308689 src/network/netcommand.h
--- a/src/network/netcommand.h	Thu Jun 08 22:05:12 2017 +0300
+++ b/src/network/netcommand.h	Thu Jun 08 22:08:02 2017 +0300
@@ -107,4 +107,5 @@
 	void sendCommandToOneClient( ULONG i );
 	bool isUnreliable() const;
 	void setUnreliable ( bool a );
+	int calcSize() const;
 };
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1496950299 -10800
#      Thu Jun 08 22:31:39 2017 +0300
# Node ID 206242baeacd5c3638080086e452b4301fe8d8a8
# Parent  3c091d308689a477b14750c98cde13d1de09820a
Used the functionality added in the previous commits to refactor commit befdc06.

diff -r 3c091d308689 -r 206242baeacd src/network.h
--- a/src/network.h	Thu Jun 08 22:08:02 2017 +0300
+++ b/src/network.h	Thu Jun 08 22:31:39 2017 +0300
@@ -191,6 +191,9 @@
 #define NUMBER_OF_ACTOR_NAME_KEY_LETTERS	3
 #define NUMBER_OF_WEAPON_NAME_KEY_LETTERS	10
 
+// [BB] 5 = 1 + 4 (SVC_HEADER + packet number)
+const int PACKET_HEADER_SIZE = 5;
+
 //*****************************************************************************
 enum
 {
diff -r 3c091d308689 -r 206242baeacd src/sv_commands.cpp
--- a/src/sv_commands.cpp	Thu Jun 08 22:08:02 2017 +0300
+++ b/src/sv_commands.cpp	Thu Jun 08 22:31:39 2017 +0300
@@ -505,11 +505,8 @@
 		return;
 
 	ServerCommands::SetPlayerUserInfo command;
-	TArray<ServerCommands::CVar> cvars;
 	command.SetPlayer( &players[ulPlayer] );
 
-	unsigned int commandSize = 0;
-
 	for ( FName name : names )
 	{
 		FBaseCVar **cvarPointer = players[ulPlayer].userinfo.CheckKey( name );
@@ -525,33 +522,20 @@
 			else
 				element.value = cvar->GetGenericRep( CVAR_String ).String;
 
-			unsigned int elementNetSize = element.value.Len() + 1;
-
-			// [BB] Name will be transferred as short.
-			if ( element.name.IsPredefined() )
-				elementNetSize += 2;
-			// [BB] Name will be transferred as short (-1) + string + terminating 0.
-			else
-				elementNetSize += strlen ( element.name.GetChars() ) + 2 + 1;
+			command.PushToCvars( element );
 
 			// [BB] The new element won't fit in a single packet. Send what we have so far
 			// and put the new command into the next packet.
-			// 3 = SVC_SETPLAYERUSERINFO + playerNum + numCvars
-			// 5 = 1 + 4 (SVC_HEADER + packet number)
-			if ( ( commandSize + elementNetSize + 3 + 5 ) >= SERVER_GetMaxPacketSize( ) )
+			if ( static_cast<ULONG>( command.BuildNetCommand().calcSize() ) + PACKET_HEADER_SIZE >= SERVER_GetMaxPacketSize( ) )
 			{
-				command.SetCvars( cvars );
+				command.PopFromCvars( element );
 				command.sendCommandToClients( ulPlayerExtra, flags );
-				cvars.Clear();
-				commandSize = 0;
+				command.ClearCvars();
+				command.PushToCvars( element );
 			}
-
-			commandSize += elementNetSize;
-			cvars.Push( element );
 		}
 	}
 
-	command.SetCvars( cvars );
 	command.sendCommandToClients( ulPlayerExtra, flags );
 }
 
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1495397333 -10800
#      Sun May 21 23:08:53 2017 +0300
# Node ID 7efb972835bb96835f4f0a3ee9d48d418bd9ddff
# Parent  206242baeacd5c3638080086e452b4301fe8d8a8
Added the ability to make local cvars in CVARINFO by using 'local' instead of 'server' or 'user' (addresses 2674)

diff -r 206242baeacd -r 7efb972835bb src/d_main.cpp
--- a/src/d_main.cpp	Thu Jun 08 22:31:39 2017 +0300
+++ b/src/d_main.cpp	Sun May 21 23:08:53 2017 +0300
@@ -1734,6 +1734,7 @@
 			ECVarType cvartype = CVAR_Dummy;
 			int cvarflags = CVAR_MOD|CVAR_ARCHIVE;
 			FBaseCVar *cvar;
+			bool local = false; // [TP] true for local cvars
 
 			// Check for flag tokens.
 			while (sc.TokenType == TK_Identifier)
@@ -1750,6 +1751,11 @@
 				{
 					cvarflags &= ~CVAR_ARCHIVE;
 				}
+				// [TP]
+				else if ( stricmp(sc.String, "local" ) == 0 )
+				{
+					local = true;
+				}
 				else
 				{
 					sc.ScriptError("Unknown cvar attribute '%s'", sc.String);
@@ -1760,7 +1766,9 @@
 			if ((cvarflags & (CVAR_SERVERINFO|CVAR_USERINFO)) == 0 ||
 				(cvarflags & (CVAR_SERVERINFO|CVAR_USERINFO)) == (CVAR_SERVERINFO|CVAR_USERINFO))
 			{
-				sc.ScriptError("One of 'server' or 'user' must be specified");
+				// [TP] Allow local cvars if given explicitly
+				if ( local == false )
+					sc.ScriptError("One of 'server', 'user' or 'local' must be specified");
 			}
 			// The next token must be the cvar type.
 			if (sc.TokenType == TK_Bool)
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1497814067 -7200
#      Sun Jun 18 21:27:47 2017 +0200
# Node ID e51d0173dda12e8d033f5e156f73d6a8b9bcf314
# Parent  7efb972835bb96835f4f0a3ee9d48d418bd9ddff
Fixed a crash that affected Linux 32bit binaries compiled with GCC (addresses 3124).

diff -r 7efb972835bb -r e51d0173dda1 src/g_shared/a_artifacts.cpp
--- a/src/g_shared/a_artifacts.cpp	Sun May 21 23:08:53 2017 +0300
+++ b/src/g_shared/a_artifacts.cpp	Sun Jun 18 21:27:47 2017 +0200
@@ -1318,8 +1318,8 @@
 			if (0 != skinidx && !(Owner->flags4 & MF4_NOSKIN))
 			{
 				// Apply skin's scale to actor's scale, it will be lost otherwise
-				speedMo->scaleX = Scale(Owner->scaleX, skins[skinidx].ScaleX, Owner->scaleX);
-				speedMo->scaleY = Scale(Owner->scaleY, skins[skinidx].ScaleY, Owner->scaleY);
+				speedMo->scaleX = Scale(speedMo->scaleX, skins[skinidx].ScaleX, Owner->scaleX);
+				speedMo->scaleY = Scale(speedMo->scaleY, skins[skinidx].ScaleY, Owner->scaleY);
 			}
 		}
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1498374221 -7200
#      Sun Jun 25 09:03:41 2017 +0200
# Node ID 18273be1e0a9c3ecafa365476eed1623c331682b
# Parent  e51d0173dda12e8d033f5e156f73d6a8b9bcf314
Fixed problems with packet loss while a client is joining.

diff -r e51d0173dda1 -r 18273be1e0a9 src/g_game.cpp
--- a/src/g_game.cpp	Sun Jun 18 21:27:47 2017 +0200
+++ b/src/g_game.cpp	Sun Jun 25 09:03:41 2017 +0200
@@ -1536,7 +1536,7 @@
 
 		// Now that we're done parsing the multiple packets the server has sent our way, check
 		// to see if any packets are missing.
-		if (( NETWORK_GetState( ) == NETSTATE_CLIENT ) && ( CLIENT_GetConnectionState( ) >= CTS_REQUESTINGSNAPSHOT ))
+		if (( NETWORK_GetState( ) == NETSTATE_CLIENT ) && ( CLIENT_GetConnectionState( ) >= CTS_ATTEMPTINGAUTHENTICATION ))
 			CLIENT_CheckForMissingPackets( );
 	}
 
diff -r e51d0173dda1 -r 18273be1e0a9 src/sv_main.cpp
--- a/src/sv_main.cpp	Sun Jun 18 21:27:47 2017 +0200
+++ b/src/sv_main.cpp	Sun Jun 25 09:03:41 2017 +0200
@@ -658,7 +658,7 @@
 		// [BB] Send out sheduled packets, respecting sv_maxpacketspertick.
 		for ( ulIdx = 0; ulIdx < MAXPLAYERS; ulIdx++ )
 		{
-			if ( SERVER_IsValidClient( ulIdx ) == false )
+			if ( g_aClients[ulIdx].State == CLS_FREE )
 				continue;
 
 			SERVER_GetClient ( ulIdx )->SavedPackets.Tick ( );
@@ -1182,6 +1182,9 @@
 		return;
 	}
 
+	// [BB] Don't timeout.
+	g_aClients[g_lCurrentClient].ulLastCommandTic = gametic;
+
 	// The client has now had his level authenticated.
 	// [BB] Don't set the state for clients already spawned. They already have a body
 	// and need to be trated differently.
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1498375016 -7200
#      Sun Jun 25 09:16:56 2017 +0200
# Node ID dd2a7b6337886d47dec2ddcfcd7c6aafd6d8d6de
# Parent  18273be1e0a9c3ecafa365476eed1623c331682b
CLIENTCOMMANDS_SendAllUserInfo now calls CLIENTCOMMANDS_UserInfo to reduce code duplication

diff -r 18273be1e0a9 -r dd2a7b633788 src/cl_commands.cpp
--- a/src/cl_commands.cpp	Sun Jun 25 09:03:41 2017 +0200
+++ b/src/cl_commands.cpp	Sun Jun 25 09:16:56 2017 +0200
@@ -146,14 +146,13 @@
 		return;
 
 	const userinfo_t &userinfo = players[consoleplayer].userinfo;
-	userinfo_t::ConstPair *pair;
 	userinfo_t::ConstIterator iterator ( userinfo );
-	NETWORK_WriteByte( &CLIENT_GetLocalBuffer( )->ByteStream, CLC_USERINFO );
+	std::set<FName> cvarNames;
 
-	while ( iterator.NextPair( pair ) )
-		clientcommands_WriteCVarToUserinfo( pair->Key, pair->Value );
+	for ( userinfo_t::ConstPair *pair; iterator.NextPair( pair ); )
+		cvarNames.insert( pair->Key );
 
-	NETWORK_WriteName( &CLIENT_GetLocalBuffer( )->ByteStream, NAME_None );
+	CLIENTCOMMANDS_UserInfo ( cvarNames );
 }
 
 //*****************************************************************************
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1498398140 -7200
#      Sun Jun 25 15:42:20 2017 +0200
# Node ID 88e39a8adf73cf2926f73cf197f89ea8c072d4d4
# Parent  dd2a7b6337886d47dec2ddcfcd7c6aafd6d8d6de
Added extra NULL pointer checks to prevent crashes (addresses 3160).

diff -r dd2a7b633788 -r 88e39a8adf73 src/g_shared/a_action.cpp
--- a/src/g_shared/a_action.cpp	Sun Jun 25 09:16:56 2017 +0200
+++ b/src/g_shared/a_action.cpp	Sun Jun 25 15:42:20 2017 +0200
@@ -305,7 +305,7 @@
 			mo->alpha = self->alpha;
 		}
 	}
-	if (self->player)
+	if (self->player && self->player->mo) // [BB] Added mo check.
 	{ // attach the player's view to a chunk of ice
 		AActor *head = Spawn("IceChunkHead", self->x, self->y, 
 													self->z + self->player->mo->ViewHeight, ALLOW_REPLACE);
diff -r dd2a7b633788 -r 88e39a8adf73 src/p_map.cpp
--- a/src/p_map.cpp	Sun Jun 25 09:16:56 2017 +0200
+++ b/src/p_map.cpp	Sun Jun 25 15:42:20 2017 +0200
@@ -4542,7 +4542,7 @@
 	vz = -finesine[pitch];
 
 	shootz = t1->z - t1->floorclip + (t1->height >> 1);
-	if (t1->player != NULL)
+	if (t1->player != NULL && t1->player->mo) // [BB] Added mo check.
 	{
 		shootz += FixedMul(t1->player->mo->AttackZOffset, t1->player->crouchfactor);
 	}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1498400330 -7200
#      Sun Jun 25 16:18:50 2017 +0200
# Node ID 33a9161708a85497d356101c61eb0ee808edcda4
# Parent  88e39a8adf73cf2926f73cf197f89ea8c072d4d4
Fixed: Under some circumstances, dead spectators resurrected by the ACS command SetDeadSpectator had no inventory at all (addresses 2594).

diff -r 88e39a8adf73 -r 33a9161708a8 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun Jun 25 15:42:20 2017 +0200
+++ b/src/p_acs.cpp	Sun Jun 25 16:18:50 2017 +0200
@@ -6826,7 +6826,7 @@
 					players[ulPlayer].bDeadSpectator = false;
 					if ( GAMEMODE_GetCurrentFlags() & GMF_USEMAXLIVES )
 						PLAYER_SetLivesLeft ( &players[ulPlayer], GAMEMODE_GetMaxLives() - 1 );
-					players[ulPlayer].playerstate = PST_REBORN;
+					players[ulPlayer].playerstate = ( zadmflags & ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY ) ? PST_REBORN : PST_REBORNNOINVENTORY;
 					GAMEMODE_SpawnPlayer( ulPlayer );
 
 					// [BB] If he's a bot, tell him that he successfully joined.
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1498416893 -7200
#      Sun Jun 25 20:54:53 2017 +0200
# Node ID 3f8aa958e801a0739a28e1db493dd62f7f888289
# Parent  33a9161708a85497d356101c61eb0ee808edcda4
Fixed: CLIENTCOMMANDS_UserInfo could lead to oversized network packets, i.e. packets bigger than 1024 (addresses an issue brought up in 3132).

diff -r 33a9161708a8 -r 3f8aa958e801 src/cl_commands.cpp
--- a/src/cl_commands.cpp	Sun Jun 25 16:18:50 2017 +0200
+++ b/src/cl_commands.cpp	Sun Jun 25 20:54:53 2017 +0200
@@ -127,12 +127,36 @@
 	if (( cvar == nullptr ) || ( cvar->GetFlags() & CVAR_UNSYNCED_USERINFO ))
 		return;
 
-	NETWORK_WriteName( &CLIENT_GetLocalBuffer( )->ByteStream, name );
+	FString value;
 	// [BB] Skin needs special treatment, so that the clients can use skins the server doesn't have.
 	if ( name == NAME_Skin )
-		NETWORK_WriteString( &CLIENT_GetLocalBuffer( )->ByteStream, skins[players[consoleplayer].userinfo.GetSkin()].name );
+		value = skins[players[consoleplayer].userinfo.GetSkin()].name;
 	else
-		NETWORK_WriteString( &CLIENT_GetLocalBuffer( )->ByteStream, cvar->GetGenericRep( CVAR_String ).String );
+		value = cvar->GetGenericRep( CVAR_String ).String;
+
+	unsigned int elementNetSize = value.Len() + 1;
+
+	// [BB] Name will be transferred as short.
+	if ( name.IsPredefined() )
+		elementNetSize += 2;
+	// [BB] Name will be transferred as short (-1) + string + terminating 0.
+	else
+		elementNetSize += strlen ( name.GetChars() ) + 2 + 1;
+
+	// [BB] If the this cvar doesn't fit into the packet anymore, send what we have
+	// and start a new packet.
+	// NAME_None is transferred as short and the maximum packet size is intentionally
+	// hard coded to 1024. The clients shouldn't mess with this setting.
+	if ( ( CLIENT_GetLocalBuffer( )->CalcSize() + elementNetSize + 2 ) >= 1024 )
+	{
+		// [BB] Terminate the current CLC_USERINFO command.
+		NETWORK_WriteName( &CLIENT_GetLocalBuffer( )->ByteStream, NAME_None );
+		CLIENT_SendServerPacket();
+		NETWORK_WriteByte( &CLIENT_GetLocalBuffer( )->ByteStream, CLC_USERINFO );
+	}
+
+	NETWORK_WriteName( &CLIENT_GetLocalBuffer( )->ByteStream, name );
+	NETWORK_WriteString( &CLIENT_GetLocalBuffer( )->ByteStream, value );
 }
 
 //*****************************************************************************
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1498417571 -10800
#      Sun Jun 25 22:06:11 2017 +0300
# Node ID f767211c5f2c9cf01e1d7b886d8306caac64fd8b
# Parent  3f8aa958e801a0739a28e1db493dd62f7f888289
Fixed: the server could override clientside spectator noclip in some cases, fixes 3164

diff -r 3f8aa958e801 -r f767211c5f2c src/cl_main.cpp
--- a/src/cl_main.cpp	Sun Jun 25 20:54:53 2017 +0200
+++ b/src/cl_main.cpp	Sun Jun 25 22:06:11 2017 +0300
@@ -4073,6 +4073,10 @@
 //
 void ServerCommands::SetPlayerCheats::Execute()
 {
+	// [TP] If we're setting the cheats of the consoleplayer and we're spectating, don't let this command modify the noclip cheats.
+	if ( player == &players[consoleplayer] && player->bSpectating )
+		cheats = ( cheats & ~( CF_NOCLIP | CF_NOCLIP2 )) | ( player->cheats & ( CF_NOCLIP | CF_NOCLIP2 ));
+
 	player->cheats = cheats;
 }
 
# HG changeset patch
# User Ru5tK1ng
# Date 1498796322 18000
#      Thu Jun 29 23:18:42 2017 -0500
# Node ID 1b219f7eb073a2874937858f9003383eb4904fa3
# Parent  f767211c5f2c9cf01e1d7b886d8306caac64fd8b
Revived dead spectators had no inventory on next map (Fixes 3167).

diff -r f767211c5f2c -r 1b219f7eb073 src/g_level.cpp
--- a/src/g_level.cpp	Sun Jun 25 22:06:11 2017 +0300
+++ b/src/g_level.cpp	Thu Jun 29 23:18:42 2017 -0500
@@ -1707,7 +1707,7 @@
 	}
 
 	// [Zandronum] Respawn dead spectators now so their inventory can travel.
-	GAMEMODE_RespawnDeadSpectators( PST_REBORN );
+	GAMEMODE_RespawnDeadSpectators( zadmflags & ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY ? PST_REBORN : PST_REBORNNOINVENTORY );
 
 	G_StartTravel ();
 	G_DoLoadLevel (startpos, true);
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1499025131 -7200
#      Sun Jul 02 21:52:11 2017 +0200
# Node ID 286ec5eb1c924a9e9a93e7c7ec1e9452081d5717
# Parent  1b219f7eb073a2874937858f9003383eb4904fa3
added new access function CLIENT_GetEndFullUpdateTic

diff -r 1b219f7eb073 -r 286ec5eb1c92 src/cl_main.cpp
--- a/src/cl_main.cpp	Thu Jun 29 23:18:42 2017 -0500
+++ b/src/cl_main.cpp	Sun Jul 02 21:52:11 2017 +0200
@@ -740,6 +740,13 @@
 
 //*****************************************************************************
 //
+unsigned int CLIENT_GetEndFullUpdateTic( void )
+{
+	return g_ulEndFullUpdateTic;
+}
+
+//*****************************************************************************
+//
 const FString &CLIENT_GetPlayerAccountName( int player )
 {
 	static FString empty;
diff -r 1b219f7eb073 -r 286ec5eb1c92 src/cl_main.h
--- a/src/cl_main.h	Thu Jun 29 23:18:42 2017 -0500
+++ b/src/cl_main.h	Sun Jul 02 21:52:11 2017 +0200
@@ -135,6 +135,7 @@
 void				CLIENT_SetAllowSendingOfUserInfo( bool bAllow );
 int					CLIENT_GetLatestServerGametic( void );
 void				CLIENT_SetLatestServerGametic( LONG latestServerGametic );
+unsigned int		CLIENT_GetEndFullUpdateTic( void );
 const FString		&CLIENT_GetPlayerAccountName( int player );
 
 // Functions necessary to carry out client-side operations.
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1499025363 -7200
#      Sun Jul 02 21:56:03 2017 +0200
# Node ID 746a16a7d809b9e437a0c4dc8f5472d2aa60ef57
# Parent  286ec5eb1c924a9e9a93e7c7ec1e9452081d5717
fixed a function declaration

diff -r 286ec5eb1c92 -r 746a16a7d809 src/cl_main.h
--- a/src/cl_main.h	Sun Jul 02 21:52:11 2017 +0200
+++ b/src/cl_main.h	Sun Jul 02 21:56:03 2017 +0200
@@ -134,7 +134,7 @@
 bool				CLIENT_GetAllowSendingOfUserInfo( void );
 void				CLIENT_SetAllowSendingOfUserInfo( bool bAllow );
 int					CLIENT_GetLatestServerGametic( void );
-void				CLIENT_SetLatestServerGametic( LONG latestServerGametic );
+void				CLIENT_SetLatestServerGametic( int latestServerGametic );
 unsigned int		CLIENT_GetEndFullUpdateTic( void );
 const FString		&CLIENT_GetPlayerAccountName( int player );
 
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1499513960 -7200
#      Sat Jul 08 13:39:20 2017 +0200
# Node ID f081a64defa9a70335e7b8252d3b259ddd7e2b8f
# Parent  746a16a7d809b9e437a0c4dc8f5472d2aa60ef57
Revised the fix for the "P_PlayerThink: No body for player" warnings on the clients that could occur after a map change before the full snapshot was received (addresses 3176).

diff -r 746a16a7d809 -r f081a64defa9 src/cl_main.cpp
--- a/src/cl_main.cpp	Sun Jul 02 21:56:03 2017 +0200
+++ b/src/cl_main.cpp	Sat Jul 08 13:39:20 2017 +0200
@@ -304,6 +304,9 @@
 // What's the time of the last message the server got from us?
 static	bool				g_bClientLagging;
 
+// [BB] Are we currently receiving a full update?
+static	bool				g_bFullUpdateIncomplete = false;
+
 // [BB] Time we received the end of the last full update from the server.
 static ULONG				g_ulEndFullUpdateTic = 0;
 
@@ -740,6 +743,13 @@
 
 //*****************************************************************************
 //
+bool CLIENT_GetFullUpdateIncomplete ( void )
+{
+	return g_bFullUpdateIncomplete;
+}
+
+//*****************************************************************************
+//
 unsigned int CLIENT_GetEndFullUpdateTic( void )
 {
 	return g_ulEndFullUpdateTic;
@@ -1312,6 +1322,9 @@
 				// Start new level.
 				G_InitNew( g_szMapName, false );
 
+				// [BB] We'll receive a full update for the new map from the server.
+				g_bFullUpdateIncomplete = true;
+
 				// For right now, the view is not active.
 				viewactive = false;
 
@@ -3172,6 +3185,7 @@
 	// [BB] The server doesn't send any info with this packet, it's just there to allow us
 	// keeping track of the current time so that we don't think we are lagging immediately after receiving a full update.
 	g_ulEndFullUpdateTic = gametic;
+	g_bFullUpdateIncomplete = false;
 	g_bClientLagging = false;
 	// [BB] Tell the server that we received the full update.
 	CLIENTCOMMANDS_FullUpdateReceived();
@@ -6721,10 +6735,8 @@
 		// Start new level.
 		G_InitNew( mapName, false );
 
-		// [BB] Make sure there is no old player information left. Since the full update
-		// may be distributed over multiple tics, we can start ticking the world before
-		// all player bodies are spawned, causing "no body for player" warnings.
-		CLIENT_ClearAllPlayers();
+		// [BB] We'll receive a full update for the new map from the server.
+		g_bFullUpdateIncomplete = true;
 
 		// Restore our demo recording status.
 		CLIENTDEMO_SetPlaying( playing );
diff -r 746a16a7d809 -r f081a64defa9 src/cl_main.h
--- a/src/cl_main.h	Sun Jul 02 21:56:03 2017 +0200
+++ b/src/cl_main.h	Sat Jul 08 13:39:20 2017 +0200
@@ -135,6 +135,7 @@
 void				CLIENT_SetAllowSendingOfUserInfo( bool bAllow );
 int					CLIENT_GetLatestServerGametic( void );
 void				CLIENT_SetLatestServerGametic( int latestServerGametic );
+bool				CLIENT_GetFullUpdateIncomplete ( void );
 unsigned int		CLIENT_GetEndFullUpdateTic( void );
 const FString		&CLIENT_GetPlayerAccountName( int player );
 
diff -r 746a16a7d809 -r f081a64defa9 src/p_user.cpp
--- a/src/p_user.cpp	Sun Jul 02 21:56:03 2017 +0200
+++ b/src/p_user.cpp	Sat Jul 08 13:39:20 2017 +0200
@@ -3408,7 +3408,10 @@
 					(( player - players ) != consoleplayer ))
 				{
 					//PLAYER_SetSpectator(player, true, false);
-					Printf( "P_PlayerThink: No body for player %td!\n", player - players + 1 );
+					// [BB] Since the full update may be distributed over multiple tics, we
+					// can start ticking the world before all player bodies are spawned.
+					if ( CLIENT_GetFullUpdateIncomplete() == false )
+						Printf( "P_PlayerThink: No body for player %td!\n", player - players + 1 );
 					return;
 				}
 				else
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1499629355 -7200
#      Sun Jul 09 21:42:35 2017 +0200
# Node ID fcdda6540b7fd45a5059d811febc3496f23f74fc
# Parent  f081a64defa9a70335e7b8252d3b259ddd7e2b8f
Fixed: The ACS command SetDeadSpectator did not remove the chasecam cheat when reviving a dead spectator (addresses 2594).

diff -r f081a64defa9 -r fcdda6540b7f src/p_acs.cpp
--- a/src/p_acs.cpp	Sat Jul 08 13:39:20 2017 +0200
+++ b/src/p_acs.cpp	Sun Jul 09 21:42:35 2017 +0200
@@ -6829,6 +6829,14 @@
 					players[ulPlayer].playerstate = ( zadmflags & ZADF_DEAD_PLAYERS_CAN_KEEP_INVENTORY ) ? PST_REBORN : PST_REBORNNOINVENTORY;
 					GAMEMODE_SpawnPlayer( ulPlayer );
 
+					// [BB] As spectator, the player was allowed to use chasecam.
+					if ( players[ulPlayer].cheats & CF_CHASECAM )
+					{
+						players[ulPlayer].cheats &= ~CF_CHASECAM;
+						if ( NETWORK_GetState() == NETSTATE_SERVER  )
+							SERVERCOMMANDS_SetPlayerCheats( ulPlayer, ulPlayer, SVCF_ONLYTHISCLIENT );
+					}
+
 					// [BB] If he's a bot, tell him that he successfully joined.
 					if ( players[ulPlayer].bIsBot && players[ulPlayer].pSkullBot )
 						players[ulPlayer].pSkullBot->PostEvent( BOTEVENT_JOINEDGAME );
# HG changeset patch
# User Ru5tK1ng
# Date 1499034503 18000
#      Sun Jul 02 17:28:23 2017 -0500
# Node ID 7661eee296299c148997ecd967e3b918f3a470dc
# Parent  fcdda6540b7fd45a5059d811febc3496f23f74fc
Frozen players were still frozen if they spectated (Fixes 3165).

diff -r fcdda6540b7f -r 7661eee29629 src/p_interaction.cpp
--- a/src/p_interaction.cpp	Sun Jul 09 21:42:35 2017 +0200
+++ b/src/p_interaction.cpp	Sun Jul 02 17:28:23 2017 -0500
@@ -2693,6 +2693,9 @@
 	pPlayer->mo->flags5 = 0;
 	pPlayer->mo->RenderStyle = STYLE_None;
 
+	// [RK] Clear the frozen flags so the spectator can move.
+	pPlayer->cheats &= ~(CF_FROZEN | CF_TOTALLYFROZEN);
+
 	// [BB] Speed and viewheight of spectators should be independent of the player class.
 	pPlayer->mo->Speed = FRACUNIT;
 	pPlayer->mo->ForwardMove1 = pPlayer->mo->ForwardMove2 = FRACUNIT;
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1499630653 -10800
#      Sun Jul 09 23:04:13 2017 +0300
# Node ID 71de39185109c3c94ce61d7c9dba8a42e1bc929e
# Parent  7661eee296299c148997ecd967e3b918f3a470dc
Optimized the network usage of Warp() and A_Warp, only send to clients what's changed and if nothing changed, don't send anything, fixes 3180

diff -r 7661eee29629 -r 71de39185109 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun Jul 02 17:28:23 2017 -0500
+++ b/src/p_acs.cpp	Sun Jul 09 23:04:13 2017 +0300
@@ -6345,6 +6345,7 @@
 			fixed_t	oldx = caller->x;
 			fixed_t	oldy = caller->y;
 			fixed_t	oldz = caller->z;
+			const MoveThingData oldPositionData ( caller ); // [TP]
 
 			if (!(flags & WARPF_ABSOLUTEANGLE))
 			{
@@ -6457,7 +6458,7 @@
 
 				// [BB] Inform the clients.
 				if ( NETWORK_GetState() == NETSTATE_SERVER )
-					SERVERCOMMANDS_MoveThing( caller, CM_X|CM_Y|CM_Z|CM_ANGLE );
+					SERVERCOMMANDS_MoveThingIfChanged( caller, oldPositionData );
 
 				return true;
 			}
diff -r 7661eee29629 -r 71de39185109 src/sv_commands.cpp
--- a/src/sv_commands.cpp	Sun Jul 02 17:28:23 2017 -0500
+++ b/src/sv_commands.cpp	Sun Jul 09 23:04:13 2017 +0300
@@ -1224,6 +1224,47 @@
 	command.sendCommandToClients( ulPlayerExtra, flags );
 }
 
+/*
+ * [TP] Compares actor position data to a previous state and calls SERVERCOMMANDS_MoveThing to send appropriate updates.
+ */
+void SERVERCOMMANDS_MoveThingIfChanged( AActor *actor, const MoveThingData &oldData, ULONG ulPlayerExtra, ServerCommandFlags flags )
+{
+	if ( EnsureActorHasNetID( actor ) )
+	{
+		ULONG bits = 0;
+
+		if ( actor->x != oldData.x )
+			bits |= CM_X;
+
+		if ( actor->y != oldData.y )
+			bits |= CM_Y;
+
+		if ( actor->z != oldData.z )
+			bits |= CM_Z;
+
+		if ( actor->velx != oldData.velx )
+			bits |= CM_VELX;
+
+		if ( actor->vely != oldData.vely )
+			bits |= CM_VELY;
+
+		if ( actor->velz != oldData.velz )
+			bits |= CM_VELZ;
+
+		if ( actor->angle != oldData.angle )
+			bits |= CM_ANGLE;
+
+		if ( actor->pitch != oldData.pitch )
+			bits |= CM_PITCH;
+
+		if ( actor->movedir != oldData.movedir )
+			bits |= CM_MOVEDIR;
+
+		if ( bits != 0 )
+			SERVERCOMMANDS_MoveThing( actor, bits, ulPlayerExtra, flags );
+	}
+}
+
 //*****************************************************************************
 //
 void SERVERCOMMANDS_MoveThing( AActor *actor, ULONG bits, ULONG ulPlayerExtra, ServerCommandFlags flags )
diff -r 7661eee29629 -r 71de39185109 src/sv_commands.h
--- a/src/sv_commands.h	Sun Jul 02 17:28:23 2017 -0500
+++ b/src/sv_commands.h	Sun Jul 09 23:04:13 2017 +0300
@@ -72,6 +72,29 @@
 	SVCF_ONLY_CONNECTIONTYPE_1	= ( 1 << 3 )
 };
 
+/*
+ * [TP] For SERVERCOMMANDS_MoveThingIfChanged
+ */
+struct MoveThingData
+{
+	MoveThingData( AActor *actor ) :
+	    x ( actor->x ),
+	    y ( actor->y ),
+	    z ( actor->z ),
+	    velx ( actor->velx ),
+	    vely ( actor->vely ),
+	    velz ( actor->velz ),
+	    pitch ( actor->pitch ),
+	    angle ( actor->angle ),
+	    movedir ( actor->movedir ) {}
+
+	fixed_t x, y, z;
+	fixed_t velx, vely, velz;
+	fixed_t pitch;
+	angle_t angle;
+	BYTE movedir;
+};
+
 typedef TFlags<ServerCommandFlag, unsigned int> ServerCommandFlags;
 DEFINE_TFLAGS_OPERATORS (ServerCommandFlags)
 
@@ -146,6 +169,7 @@
 void	SERVERCOMMANDS_LevelSpawnThing( AActor *mobj, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_LevelSpawnThingNoNetID( AActor *mobj, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_MoveThing( AActor *pActor, ULONG ulBits, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
+void	SERVERCOMMANDS_MoveThingIfChanged( AActor *pActor, const MoveThingData &oldData, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_MoveThingExact( AActor *pActor, ULONG ulBits, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_KillThing( AActor *pActor, AActor *pSource, AActor *pInflictor );
 void	SERVERCOMMANDS_SetThingState( AActor *pActor, NetworkActorState state, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
diff -r 7661eee29629 -r 71de39185109 src/thingdef/thingdef_codeptr.cpp
--- a/src/thingdef/thingdef_codeptr.cpp	Sun Jul 02 17:28:23 2017 -0500
+++ b/src/thingdef/thingdef_codeptr.cpp	Sun Jul 09 23:04:13 2017 +0300
@@ -5398,6 +5398,7 @@
 		return;
 
 	AActor *reference = COPY_AAPTR(self, destination_selector);
+	const MoveThingData oldPositionData ( self ); // [TP]
 
 	if (!reference)
 	{
@@ -5503,7 +5504,7 @@
 
 		// [BB] Inform the clients.
 		if (( NETWORK_GetState() == NETSTATE_SERVER ) && ( NETWORK_IsActorClientHandled( self ) == false ))
-			SERVERCOMMANDS_MoveThing( self, CM_X|CM_Y|CM_Z|CM_ANGLE );
+			SERVERCOMMANDS_MoveThingIfChanged( self, oldPositionData );
 
 		if (success_state)
 		{
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1500813447 -7200
#      Sun Jul 23 14:37:27 2017 +0200
# Node ID a578f7f4b3685f3b6868802853c694aa62a0900b
# Parent  71de39185109c3c94ce61d7c9dba8a42e1bc929e
Fixed: The client could crash when activating the automap.

diff -r 71de39185109 -r a578f7f4b368 src/am_map.cpp
--- a/src/am_map.cpp	Sun Jul 09 23:04:13 2017 +0300
+++ b/src/am_map.cpp	Sun Jul 23 14:37:27 2017 +0200
@@ -1252,13 +1252,17 @@
 	m_h = FTOM(SCREENHEIGHT);
 
 	// find player to center on initially
-	if (!playeringame[pnum = consoleplayer])
+	if (!playeringame[pnum = consoleplayer] || (players[consoleplayer].camera == NULL ) ) // [BB] Added camera check.
 		for (pnum=0;pnum<MAXPLAYERS;pnum++)
-			if (playeringame[pnum])
+			if (playeringame[pnum] && ( players[pnum].camera != NULL ) ) // [BB] Added camera check.
 				break;
   
-	m_x = (players[pnum].camera->x >> FRACTOMAPBITS) - m_w/2;
-	m_y = (players[pnum].camera->y >> FRACTOMAPBITS) - m_h/2;
+	// [BB] Added check.
+	if ( pnum < MAXPLAYERS )
+	{
+		m_x = (players[pnum].camera->x >> FRACTOMAPBITS) - m_w/2;
+		m_y = (players[pnum].camera->y >> FRACTOMAPBITS) - m_h/2;
+	}
 	AM_changeWindowLoc();
 
 	// for saving & restoring
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1500841787 -7200
#      Sun Jul 23 22:29:47 2017 +0200
# Node ID 2e401826db2ee704fa20f95bc511bef5fe4b8e93
# Parent  a578f7f4b3685f3b6868802853c694aa62a0900b
Fixed: The server could kick clients erroneously for incomplete userinfo.

diff -r a578f7f4b368 -r 2e401826db2e src/sv_main.cpp
--- a/src/sv_main.cpp	Sun Jul 23 14:37:27 2017 +0200
+++ b/src/sv_main.cpp	Sun Jul 23 22:29:47 2017 +0200
@@ -1448,7 +1448,7 @@
 	// Read in the user's userinfo. If it returns false, the player was kicked for flooding
 	// (though this shouldn't happen anymore).
 	players[g_lCurrentClient].userinfo.Reset();
-	if ( SERVER_GetUserInfo( pByteStream, false ) == false )
+	if ( SERVER_GetUserInfo( pByteStream, false, true ) == false )
 		return;
 
 	// Apparently, we know the client is in the game, but the 
@@ -2020,7 +2020,7 @@
 
 //*****************************************************************************
 //
-bool SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick )
+bool SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick, bool bEnforceRequiered )
 {
 	player_t	*pPlayer;
 	FString		szSkin;
@@ -2206,7 +2206,7 @@
 	}
 
 	// [BB] Make sure that the joining client sends the full user info (sending player class is not mandatory though).
-	if ( g_aClients[g_lCurrentClient].State < CLS_SPAWNED )
+	if ( bEnforceRequiered )
 	{
 		static const std::set<FName> required = {
 			NAME_Name, NAME_Autoaim, NAME_Gender, NAME_Skin, NAME_RailColor,
diff -r a578f7f4b368 -r 2e401826db2e src/sv_main.h
--- a/src/sv_main.h	Sun Jul 23 14:37:27 2017 +0200
+++ b/src/sv_main.h	Sun Jul 23 22:29:47 2017 +0200
@@ -410,7 +410,7 @@
 void		SERVER_AuthenticateClientLevel( BYTESTREAM_s *pByteStream );
 bool		SERVER_PerformAuthenticationChecksum( BYTESTREAM_s *pByteStream );
 void		SERVER_ConnectNewPlayer( BYTESTREAM_s *pByteStream );
-bool		SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick );
+bool		SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick, bool bEnforceRequiered = false );
 void		SERVER_ConnectionError( NETADDRESS_s Address, const char *pszMessage, ULONG ulErrorCode );
 void		SERVER_ClientError( ULONG ulClient, ULONG ulErrorCode );
 void		SERVER_SendFullUpdate( ULONG ulClient );
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1500842045 -7200
#      Sun Jul 23 22:34:05 2017 +0200
# Node ID d0193daa9f8ca003041e507eb17c202f37aae1e9
# Parent  2e401826db2ee704fa20f95bc511bef5fe4b8e93
Fixed: Clients tried to handle "switchonpickup" locally for other clients instead of waiting for the server to announce the weapon switch (addresses 3190).

diff -r 2e401826db2e -r d0193daa9f8c src/g_shared/a_weapons.cpp
--- a/src/g_shared/a_weapons.cpp	Sun Jul 23 22:29:47 2017 +0200
+++ b/src/g_shared/a_weapons.cpp	Sun Jul 23 22:34:05 2017 +0200
@@ -388,10 +388,13 @@
 
 			bool shouldSwitch = false;
 
+			// [BB] Clients only handle their own weapon.
+			if ( NETWORK_InClientMode( ) && (( Owner->player - players ) != consoleplayer ))
+				shouldSwitch = false;
 			// [ZZ] Changed code so it only treats switchonpickup == 2 as "always switch"
 			// [BC] Handle the "switchonpickup" userinfo cvar. If it's == 2, then
 			// we always want to switch our weapon when we pickup a new one.
-			if ( (Owner->player->userinfo.GetSwitchOnPickup() == 2) || ( zacompatflags & ZACOMPATF_OLD_WEAPON_SWITCH ) )
+			else if ( (Owner->player->userinfo.GetSwitchOnPickup() == 2) || ( zacompatflags & ZACOMPATF_OLD_WEAPON_SWITCH ) )
 			{
 				shouldSwitch  = true;
 			}
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1500844238 -10800
#      Mon Jul 24 00:10:38 2017 +0300
# Node ID bb47f922498c06991fbe02767f6f2e4abfd69eca
# Parent  d0193daa9f8ca003041e507eb17c202f37aae1e9
The client now·arranges the cvars sent in the userinfo batch so that the built-in cvars are always sent before mod cvars. This way, in the event the client needs to split the userinfo packet, the built-in cvars go in the first one. If this isn't the case, the server kicks the client for sending an incomplete userinfo packet (partially addresses 3178).

diff -r d0193daa9f8c -r bb47f922498c src/cl_commands.cpp
--- a/src/cl_commands.cpp	Sun Jul 23 22:34:05 2017 +0200
+++ b/src/cl_commands.cpp	Mon Jul 24 00:10:38 2017 +0300
@@ -117,6 +117,26 @@
 
 //*****************************************************************************
 //
+bool UserInfoSortingFunction::operator()( FName cvar1Name, FName cvar2Name ) const
+{
+	FBaseCVar* cvar1 = FindCVar( cvar1Name, nullptr );
+	FBaseCVar* cvar2 = FindCVar( cvar2Name, nullptr );
+
+	if ( cvar1 && cvar2 && ((( cvar1->GetFlags() & CVAR_MOD ) ^ ( cvar2->GetFlags() & CVAR_MOD )) != 0 ))
+	{
+		// If one of the cvars contains the mod flag and the other one does not,the one that
+		// does is goes before the other one.
+		return !!( cvar2->GetFlags() & CVAR_MOD );
+	}
+	else
+	{
+		// Otherwise we don't really care.
+		return cvar1 < cvar2;
+	}
+}
+
+//*****************************************************************************
+//
 static void clientcommands_WriteCVarToUserinfo( FName name, FBaseCVar *cvar )
 {
 	// [BB] It's pointless to tell the server of the class, if only one class is available.
@@ -171,7 +191,7 @@
 
 	const userinfo_t &userinfo = players[consoleplayer].userinfo;
 	userinfo_t::ConstIterator iterator ( userinfo );
-	std::set<FName> cvarNames;
+	UserInfoChanges cvarNames;
 
 	for ( userinfo_t::ConstPair *pair; iterator.NextPair( pair ); )
 		cvarNames.insert( pair->Key );
@@ -181,7 +201,7 @@
 
 //*****************************************************************************
 //
-void CLIENTCOMMANDS_UserInfo( const std::set<FName> &cvarNames )
+void CLIENTCOMMANDS_UserInfo( const UserInfoChanges &cvars )
 {
 	// Temporarily disable userinfo for when the player setup menu updates our userinfo. Then
 	// we can just send all our userinfo in one big bulk, instead of each time it updates
@@ -193,7 +213,7 @@
 	// contains cvars that we want to send.
 	bool sendUserinfo = false;
 
-	for ( std::set<FName>::const_iterator iterator = cvarNames.begin(); iterator != cvarNames.end(); ++iterator )
+	for ( UserInfoChanges::const_iterator iterator = cvars.begin(); iterator != cvars.end(); ++iterator )
 	{
 		FBaseCVar **cvarPointer = players[consoleplayer].userinfo.CheckKey( *iterator );
 		if ( cvarPointer && ( (*cvarPointer)->GetFlags() & CVAR_UNSYNCED_USERINFO ) == false )
@@ -208,7 +228,7 @@
 
 	NETWORK_WriteByte( &CLIENT_GetLocalBuffer( )->ByteStream, CLC_USERINFO );
 
-	for ( std::set<FName>::const_iterator iterator = cvarNames.begin(); iterator != cvarNames.end(); ++iterator )
+	for ( UserInfoChanges::const_iterator iterator = cvars.begin(); iterator != cvars.end(); ++iterator )
 	{
 		FName name = *iterator;
 		FBaseCVar **cvarPointer = players[consoleplayer].userinfo.CheckKey( name );
diff -r d0193daa9f8c -r bb47f922498c src/cl_commands.h
--- a/src/cl_commands.h	Sun Jul 23 22:34:05 2017 +0200
+++ b/src/cl_commands.h	Mon Jul 24 00:10:38 2017 +0300
@@ -55,6 +55,17 @@
 #include "doomtype.h"
 #include "a_pickups.h"
 
+// [TP] UserInfoChanges is a set of cvar names, ordered such that built-in cvars are listed
+// before any mod ones. This ensures that, in the event that the client needs to split the
+// userinfo command into multiple packets, the built-in cvars are guaranteed to go in the
+// first one. The server expects the first packet to contain all built-in cvars.
+struct UserInfoSortingFunction
+{
+	bool operator()( FName cvar1Name, FName cvar2Name ) const;
+};
+
+typedef std::set<FName, UserInfoSortingFunction> UserInfoChanges;
+
 //*****************************************************************************
 //	PROTOTYPES
 
@@ -62,7 +73,7 @@
 void	CLIENT_IgnoreWeaponSelect( bool bIgnore );
 bool	CLIENT_GetIgnoreWeaponSelect( void );
 bool	CLIENT_AllowSVCheatMessage( void );
-void	CLIENTCOMMANDS_UserInfo( const std::set<FName> &cvarNames );
+void	CLIENTCOMMANDS_UserInfo( const UserInfoChanges &cvars );
 void	CLIENTCOMMANDS_SendAllUserInfo();
 void	CLIENTCOMMANDS_StartChat( void );
 void	CLIENTCOMMANDS_EndChat( void );
diff -r d0193daa9f8c -r bb47f922498c src/d_netinfo.cpp
--- a/src/d_netinfo.cpp	Sun Jul 23 22:34:05 2017 +0200
+++ b/src/d_netinfo.cpp	Mon Jul 24 00:10:38 2017 +0300
@@ -105,7 +105,7 @@
 CVAR (Flag,		cl_clientsidepuffs,			cl_clientflags, CLIENTFLAGS_CLIENTSIDEPUFFS );
 
 // [TP] Userinfo changes yet to be sent.
-static std::set<FName> PendingUserinfoChanges;
+static UserInfoChanges PendingUserinfoChanges;
 
 // [CK] CVARs that affect cl_clientflags
 CUSTOM_CVAR ( Int, cl_clientflags, CLIENTFLAGS_DEFAULT, CVAR_USERINFO | CVAR_ARCHIVE )
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1500920914 -7200
#      Mon Jul 24 20:28:34 2017 +0200
# Node ID 8addcabb3e86c0a01cb8dc693782e37c7c654a16
# Parent  bb47f922498c06991fbe02767f6f2e4abfd69eca
Updated the links to zandronum.com from http to https (addresses 3192).

diff -r bb47f922498c -r 8addcabb3e86 src/version.h
--- a/src/version.h	Mon Jul 24 00:10:38 2017 +0300
+++ b/src/version.h	Mon Jul 24 20:28:34 2017 +0200
@@ -124,8 +124,8 @@
 #define GAMENAME "Zandronum"
 #define GAMENAMELOWERCASE "zandronum"
 #define DOMAIN_NAME "zandronum.com"
-#define FORUM_URL "http://" DOMAIN_NAME "/forum/"
-#define BUGS_FORUM_URL	"http://" DOMAIN_NAME "/tracker/"
+#define FORUM_URL "https://" DOMAIN_NAME "/forum/"
+#define BUGS_FORUM_URL	"https://" DOMAIN_NAME "/tracker/"
 
 // [BC] This is what's displayed as the title for server windows.
 #define	SERVERCONSOLE_TITLESTRING	GAMENAME " v" DOTVERSIONSTR " Server"
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1501439429 -7200
#      Sun Jul 30 20:30:29 2017 +0200
# Node ID 87186e95d533bbadd1d0568cb7db4e17a666bdbc
# Parent  8addcabb3e86c0a01cb8dc693782e37c7c654a16
The command "save" can't be called by ConsoleCommand anymore (addresses 3203).

diff -r 8addcabb3e86 -r 87186e95d533 src/c_cmds.cpp
--- a/src/c_cmds.cpp	Mon Jul 24 20:28:34 2017 +0200
+++ b/src/c_cmds.cpp	Sun Jul 30 20:30:29 2017 +0200
@@ -1169,6 +1169,10 @@
 
 CCMD (save)
 {
+    // [BB] This function may not be used by ConsoleCommand.
+    if ( ACS_IsCalledFromConsoleCommand() )
+        return;
+
     if (argv.argc() < 2 || argv.argc() > 3)
 	{
         Printf ("usage: save <filename> [description]\n");
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1501439556 -7200
#      Sun Jul 30 20:32:36 2017 +0200
# Node ID ebde7837934fa3783a80f64fc000d0f79e8d1f24
# Parent  87186e95d533bbadd1d0568cb7db4e17a666bdbc
typo fix

diff -r 87186e95d533 -r ebde7837934f src/sv_main.cpp
--- a/src/sv_main.cpp	Sun Jul 30 20:30:29 2017 +0200
+++ b/src/sv_main.cpp	Sun Jul 30 20:32:36 2017 +0200
@@ -2020,7 +2020,7 @@
 
 //*****************************************************************************
 //
-bool SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick, bool bEnforceRequiered )
+bool SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick, bool bEnforceRequired )
 {
 	player_t	*pPlayer;
 	FString		szSkin;
@@ -2206,7 +2206,7 @@
 	}
 
 	// [BB] Make sure that the joining client sends the full user info (sending player class is not mandatory though).
-	if ( bEnforceRequiered )
+	if ( bEnforceRequired )
 	{
 		static const std::set<FName> required = {
 			NAME_Name, NAME_Autoaim, NAME_Gender, NAME_Skin, NAME_RailColor,
diff -r 87186e95d533 -r ebde7837934f src/sv_main.h
--- a/src/sv_main.h	Sun Jul 30 20:30:29 2017 +0200
+++ b/src/sv_main.h	Sun Jul 30 20:32:36 2017 +0200
@@ -410,7 +410,7 @@
 void		SERVER_AuthenticateClientLevel( BYTESTREAM_s *pByteStream );
 bool		SERVER_PerformAuthenticationChecksum( BYTESTREAM_s *pByteStream );
 void		SERVER_ConnectNewPlayer( BYTESTREAM_s *pByteStream );
-bool		SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick, bool bEnforceRequiered = false );
+bool		SERVER_GetUserInfo( BYTESTREAM_s *pByteStream, bool bAllowKick, bool bEnforceRequired = false );
 void		SERVER_ConnectionError( NETADDRESS_s Address, const char *pszMessage, ULONG ulErrorCode );
 void		SERVER_ClientError( ULONG ulClient, ULONG ulErrorCode );
 void		SERVER_SendFullUpdate( ULONG ulClient );
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1501439795 -7200
#      Sun Jul 30 20:36:35 2017 +0200
# Node ID 919ea7a1a4ac428268968f4317e79d778ce7e41a
# Parent  ebde7837934fa3783a80f64fc000d0f79e8d1f24
The command "load" can't be called by ConsoleCommand anymore (addresses 3203).

diff -r ebde7837934f -r 919ea7a1a4ac src/c_cmds.cpp
--- a/src/c_cmds.cpp	Sun Jul 30 20:32:36 2017 +0200
+++ b/src/c_cmds.cpp	Sun Jul 30 20:36:35 2017 +0200
@@ -1144,6 +1144,10 @@
 
 CCMD (load)
 {
+    // [BB] This function may not be used by ConsoleCommand.
+    if ( ACS_IsCalledFromConsoleCommand() )
+        return;
+
     if (argv.argc() != 2)
 	{
         Printf ("usage: load <filename>\n");
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1501444133 -7200
#      Sun Jul 30 21:48:53 2017 +0200
# Node ID a72468b3d1664afd07958c1aaee7bf092b0ed0bb
# Parent  919ea7a1a4ac428268968f4317e79d778ce7e41a
Fixed: The client was kicked for "User info change flood." when connecting to a server with wads that use too many user entries in CVARINFO (addresses 3209).

diff -r 919ea7a1a4ac -r a72468b3d166 src/sv_main.cpp
--- a/src/sv_main.cpp	Sun Jul 30 20:36:35 2017 +0200
+++ b/src/sv_main.cpp	Sun Jul 30 21:48:53 2017 +0200
@@ -4430,7 +4430,9 @@
 	case CLC_USERINFO:
 
 		// Client is sending us his userinfo.
-		SERVER_GetUserInfo( pByteStream, true );
+		// [BB] Don't kick the client while he is still receiving the full update. During that time
+		// the client sends the full userinfo, which may be spread over multiple commands.
+		SERVER_GetUserInfo( pByteStream, ( SERVER_GetClient ( g_lCurrentClient )->bFullUpdateIncomplete == false ) );
 		break;
 	case CLC_QUIT:
 
# HG changeset patch
# User Edoardo Prezioso <edward.san.dev@gmail.com>
# Date 1501444261 -7200
#      Sun Jul 30 21:51:01 2017 +0200
# Node ID 2546d3bcdcb57f7f5395b2608fb4c0fd2aff9aaa
# Parent  a72468b3d1664afd07958c1aaee7bf092b0ed0bb
- Fixed very useful GCC 7 warnings.

diff -r a72468b3d166 -r 2546d3bcdcb5 src/bots.cpp
--- a/src/bots.cpp	Sun Jul 30 21:48:53 2017 +0200
+++ b/src/bots.cpp	Sun Jul 30 21:51:01 2017 +0200
@@ -794,7 +794,7 @@
 void BOTS_ArchiveRevealedBotsAndSkins( FConfigFile *f )
 {
 	ULONG	ulIdx;
-	char	szString[64];
+	FString string;
 
 	for ( ulIdx = 0; ulIdx < g_BotInfo.Size(); ulIdx++ )
 	{
@@ -802,11 +802,11 @@
 		if (( g_BotInfo[ulIdx].bRevealed == false ) || ( g_BotInfo[ulIdx].bRevealedByDefault ))
 			continue;
 
-		sprintf( szString, "\"%s\"", g_BotInfo[ulIdx].szName );
-
-		V_ColorizeString( szString );
-		V_RemoveColorCodes( szString );
-		f->SetValueForKey( szString, "1" );
+		string.Format( "\"%s\"", g_BotInfo[ulIdx].szName );
+
+		V_ColorizeString( string );
+		V_RemoveColorCodes( string );
+		f->SetValueForKey( string, "1" );
 	}
 
 	for ( ulIdx = 0; ulIdx < (ULONG)skins.Size(); ulIdx++ )
@@ -815,11 +815,11 @@
 		if (( skins[ulIdx].bRevealed == false ) || ( skins[ulIdx].bRevealedByDefault ))
 			continue;
 
-		sprintf( szString, "\"%s\"", skins[ulIdx].name );
-
-		V_ColorizeString( szString );
-		V_RemoveColorCodes( szString );
-		f->SetValueForKey( szString, "1" );
+		string.Format( "\"%s\"", skins[ulIdx].name );
+
+		V_ColorizeString( string );
+		V_RemoveColorCodes( string );
+		f->SetValueForKey( string, "1" );
 	}
 }
 
diff -r a72468b3d166 -r 2546d3bcdcb5 src/g_level.cpp
--- a/src/g_level.cpp	Sun Jul 30 21:48:53 2017 +0200
+++ b/src/g_level.cpp	Sun Jul 30 21:51:01 2017 +0200
@@ -1039,8 +1039,6 @@
 	static int lastposition = 0;
 	gamestate_t oldgs = gamestate;
 	unsigned int i;
-	// [BC]
-	char				szString[256];
 	CAMPAIGNINFO_s		*pInfo;
 	UCVarValue			Val;
 
@@ -1593,8 +1591,9 @@
 	if ( NETWORK_GetState( ) == NETSTATE_SERVER )
 	{
 		// Now that we're in a new level, update the mapname/scoreboard.
-		sprintf( szString, "%s: %s", level.mapname, level.LevelName.GetChars() );
-		SERVERCONSOLE_SetCurrentMapname( szString );
+		FString string;
+		string.Format( "%s: %s", level.mapname, level.LevelName.GetChars() );
+		SERVERCONSOLE_SetCurrentMapname( string );
 		SERVERCONSOLE_UpdateScoreboard( );
 
 		// Reset the columns.
diff -r a72468b3d166 -r 2546d3bcdcb5 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun Jul 30 21:48:53 2017 +0200
+++ b/src/p_acs.cpp	Sun Jul 30 21:51:01 2017 +0200
@@ -6658,6 +6658,7 @@
 					if ( handle == ( g_dbQueries.size() - 1 ) )
 						g_dbQueries.resize ( g_dbQueries.size() - 1 );
 				}
+				break;
 			}
 
 		case ACSF_GetDBResultKeyString:
diff -r a72468b3d166 -r 2546d3bcdcb5 src/sv_main.cpp
--- a/src/sv_main.cpp	Sun Jul 30 21:48:53 2017 +0200
+++ b/src/sv_main.cpp	Sun Jul 30 21:51:01 2017 +0200
@@ -628,21 +628,22 @@
 		{
 			if ( --g_lMapRestartTimer == 0 )
 			{
-				char	szString[128];
+				FString string;
 
 				if ( GAMEMODE_IsNextMapCvarLobby( ) )
 				{
 					// [AM] If we're using a lobby map, reset to the lobby.
 					//      In theory, there can be many MAPINFO-lobbies, but there is only
 					//      one lobby cvar setting, so we only need to bother with the cvar.
-					sprintf(szString, "map %s", *lobby);
+					string.Format( "map %s", *lobby );
 				}
 				else
 				{
-					sprintf(szString, "map %s", level.mapname);
+					string.Format( "map %s", level.mapname );
 				}
 
-				AddCommandString( szString );
+				AddCommandString( string.LockBuffer() );
+				string.UnlockBuffer();
 			}
 		}
 
# HG changeset patch
# User Gaerzi <gaerzi@gmail.com>
# Date 1414527541 -3600
#      Tue Oct 28 21:19:01 2014 +0100
# Node ID 97e6888d369b4cd2114797c091fb7577858c1dc3
# Parent  2546d3bcdcb57f7f5395b2608fb4c0fd2aff9aaa
Missing break in case NAME_FillColor

This caused weirdness with invulnerable monsters when their fillcolor was changed.

diff -r 2546d3bcdcb5 -r 97e6888d369b src/p_udmf.cpp
--- a/src/p_udmf.cpp	Sun Jul 30 21:51:01 2017 +0200
+++ b/src/p_udmf.cpp	Tue Oct 28 21:19:01 2014 +0100
@@ -686,6 +686,7 @@
 
 			case NAME_FillColor:
 				th->fillcolor = CheckInt(key);
+				break;
 
 			case NAME_Health:
 				th->health = CheckInt(key);
# HG changeset patch
# User Randy Heit <rheit@users.noreply.github.com>
# Date 1423450590 21600
#      Sun Feb 08 20:56:30 2015 -0600
# Node ID 681f378803981ea92cbd940921cba329f2eda38a
# Parent  97e6888d369b4cd2114797c091fb7577858c1dc3
Add a needed break in FxAbs::Resolve()

- Fixed: FxAbs could not resolve floating point constants because it fell
  through to the error case.

diff -r 97e6888d369b -r 681f37880398 src/thingdef/thingdef_expression.cpp
--- a/src/thingdef/thingdef_expression.cpp	Tue Oct 28 21:19:01 2014 +0100
+++ b/src/thingdef/thingdef_expression.cpp	Sun Feb 08 20:56:30 2015 -0600
@@ -1600,6 +1600,7 @@
 
 		case VAL_Float:
 			value.Float = fabs(value.Float);
+			break;
 
 		default:
 			// shouldn't happen
# HG changeset patch
# User Christoph Oelckers <c.oelckers@zdoom.fake>
# Date 1457105020 -3600
#      Fri Mar 04 16:23:40 2016 +0100
# Node ID 1c5cfa376463eb7e28081771ecfe6e6c3e31f340
# Parent  681f378803981ea92cbd940921cba329f2eda38a
- fixed: The checks in P_IsThingSpecial was broken.

diff -r 681f37880398 -r 1c5cfa376463 src/p_udmf.cpp
--- a/src/p_udmf.cpp	Sun Feb 08 20:56:30 2015 -0600
+++ b/src/p_udmf.cpp	Fri Mar 04 16:23:40 2016 +0100
@@ -103,7 +103,7 @@
 static inline bool P_IsThingSpecial(int specnum)
 {
 	return (specnum >= Thing_Projectile && specnum <= Thing_SpawnNoFog) ||
-			specnum == Thing_SpawnFacing || Thing_ProjectileIntercept || Thing_ProjectileAimed;
+			specnum == Thing_SpawnFacing || specnum == Thing_ProjectileIntercept || specnum == Thing_ProjectileAimed;
 }
 
 enum
# HG changeset patch
# User Christoph Oelckers <c.oelckers@zdoom.fake>
# Date 1470766513 -7200
#      Tue Aug 09 20:15:13 2016 +0200
# Node ID e834241f9d74a3af9f987c43b735a3f1f26180cd
# Parent  1c5cfa376463eb7e28081771ecfe6e6c3e31f340
- made disabling the push window check a real compatibility option.

No idea why this was a hidden one, this one definitely needs to be in the menu.

- set some required compatibility options for Super Sonic Doom.

diff -r 1c5cfa376463 -r e834241f9d74 src/compatibility.cpp
--- a/src/compatibility.cpp	Fri Mar 04 16:23:40 2016 +0100
+++ b/src/compatibility.cpp	Tue Aug 09 20:15:13 2016 +0200
@@ -106,7 +106,6 @@
 	{ "ignoreteleporttags",		BCOMPATF_BADTELEPORTERS, SLOT_BCOMPAT },
 	{ "rebuildnodes",			BCOMPATF_REBUILDNODES, SLOT_BCOMPAT },
 	{ "linkfrozenprops",		BCOMPATF_LINKFROZENPROPS, SLOT_BCOMPAT },
-	{ "disablepushwindowcheck",	BCOMPATF_NOWINDOWCHECK, SLOT_BCOMPAT },
 
 	// list copied from g_mapinfo.cpp
 	{ "shorttex",				COMPATF_SHORTTEX, SLOT_COMPAT },
@@ -140,6 +139,7 @@
 	{ "maskedmidtex",			COMPATF_MASKEDMIDTEX, SLOT_COMPAT },
 	{ "badangles",				COMPATF2_BADANGLES, SLOT_COMPAT2 },
 	{ "floormove",				COMPATF2_FLOORMOVE, SLOT_COMPAT2 },
+	{ "disablepushwindowcheck",	COMPATF2_PUSHWINDOW, SLOT_COMPAT2 },
 
 	{ NULL, 0, 0 }
 };
diff -r 1c5cfa376463 -r e834241f9d74 src/d_main.cpp
--- a/src/d_main.cpp	Fri Mar 04 16:23:40 2016 +0100
+++ b/src/d_main.cpp	Tue Aug 09 20:15:13 2016 +0200
@@ -728,6 +728,8 @@
 
 	case 4: // Old ZDoom compat mode
 		v = COMPATF_SOUNDTARGET|COMPATF_LIGHT;
+		// [BB] Out of order ZDoom backport.
+		w = COMPATF2_PUSHWINDOW;
 		break;
 
 	case 5: // MBF compat mode
@@ -779,6 +781,8 @@
 CVAR (Flag, compat_maskedmidtex,		compatflags,  COMPATF_MASKEDMIDTEX);
 CVAR (Flag, compat_badangles,			compatflags2, COMPATF2_BADANGLES);
 CVAR (Flag, compat_floormove,			compatflags2, COMPATF2_FLOORMOVE);
+// [BB] Out of order ZDoom backport.
+CVAR (Flag, compat_pushwindow,			compatflags2, COMPATF2_PUSHWINDOW);
 // [BB] Skulltag compat flags.
 CVAR (Flag, compat_limited_airmovement, zacompatflags, ZACOMPATF_LIMITED_AIRMOVEMENT);
 CVAR (Flag, compat_plasmabump,	zacompatflags, ZACOMPATF_PLASMA_BUMP_BUG);
diff -r 1c5cfa376463 -r e834241f9d74 src/doomdef.h
--- a/src/doomdef.h	Fri Mar 04 16:23:40 2016 +0100
+++ b/src/doomdef.h	Tue Aug 09 20:15:13 2016 +0200
@@ -413,6 +413,8 @@
 
 	COMPATF2_BADANGLES		= 1 << 0,	// It is impossible to face directly NSEW.
 	COMPATF2_FLOORMOVE		= 1 << 1,	// Use the same floor motion behavior as Doom.
+	// [BB] Out of order ZDoom backport.
+	COMPATF2_PUSHWINDOW		= 1 << 6,	// Disable the window check in CheckForPushSpecial()
 };
 
 // [BB] Zandronum compatibility flags.
@@ -496,7 +498,6 @@
 	BCOMPATF_BADPORTALS			= 1 << 4,	// Restores the old unstable portal behavior
 	BCOMPATF_REBUILDNODES		= 1 << 5,	// Force node rebuild
 	BCOMPATF_LINKFROZENPROPS	= 1 << 6,	// Clearing PROP_TOTALLYFROZEN or PROP_FROZEN also clears the other
-	BCOMPATF_NOWINDOWCHECK		= 1 << 7,	// Disable the window check in CheckForPushSpecial()
 };
 
 // phares 3/20/98:
diff -r 1c5cfa376463 -r e834241f9d74 src/g_mapinfo.cpp
--- a/src/g_mapinfo.cpp	Fri Mar 04 16:23:40 2016 +0100
+++ b/src/g_mapinfo.cpp	Tue Aug 09 20:15:13 2016 +0200
@@ -1354,6 +1354,7 @@
 	{ "compat_maskedmidtex",			MITYPE_COMPATFLAG, COMPATF_MASKEDMIDTEX, 0 },
 	{ "compat_badangles",				MITYPE_COMPATFLAG, 0, COMPATF2_BADANGLES },
 	{ "compat_floormove",				MITYPE_COMPATFLAG, 0, COMPATF2_FLOORMOVE },
+	{ "compat_pushwindow",				MITYPE_COMPATFLAG, 0, COMPATF2_PUSHWINDOW },
 	{ "cd_start_track",					MITYPE_EATNEXT,	0, 0 },
 	{ "cd_end1_track",					MITYPE_EATNEXT,	0, 0 },
 	{ "cd_end2_track",					MITYPE_EATNEXT,	0, 0 },
diff -r 1c5cfa376463 -r e834241f9d74 src/p_map.cpp
--- a/src/p_map.cpp	Fri Mar 04 16:23:40 2016 +0100
+++ b/src/p_map.cpp	Tue Aug 09 20:15:13 2016 +0200
@@ -1794,7 +1794,7 @@
 {
 	if (line->special && !(mobj->flags6 & MF6_NOTRIGGER))
 	{
-		if (windowcheck && !(ib_compatflags & BCOMPATF_NOWINDOWCHECK) && line->backsector != NULL)
+		if (windowcheck && !(i_compatflags2 & COMPATF2_PUSHWINDOW) && line->backsector != NULL)
 		{ // Make sure this line actually blocks us and is not a window
 			// or similar construct we are standing inside of.
 			fixed_t fzt = line->frontsector->ceilingplane.ZatPoint(mobj->x, mobj->y);
diff -r 1c5cfa376463 -r e834241f9d74 wadsrc/static/compatibility.txt
--- a/wadsrc/static/compatibility.txt	Fri Mar 04 16:23:40 2016 +0100
+++ b/wadsrc/static/compatibility.txt	Tue Aug 09 20:15:13 2016 +0200
@@ -379,6 +379,7 @@
 
 E89CCC7E155F1032F693359CC219BE6C // hexen.wad map30
 B9DFF13207EACAC675C71D82624D0007 // XtheaterIII map01
+6941BDC2F80C0FEBE34EFA23D5FB72B7 // sonic.wad map10
 46ACA51B5275B14807FE7CBEB3916AAD // [BB] sst_v1.4rc7.pk7 sstmap34
 {
 	DisablePushWindowCheck
diff -r 1c5cfa376463 -r e834241f9d74 wadsrc/static/menudef.txt
--- a/wadsrc/static/menudef.txt	Fri Mar 04 16:23:40 2016 +0100
+++ b/wadsrc/static/menudef.txt	Tue Aug 09 20:15:13 2016 +0200
@@ -1410,6 +1410,8 @@
 	Option "Ignore Y offsets on masked midtextures",	"compat_MASKEDMIDTEX", "YesNo"
 	Option "Cannot travel straight NSEW",				"compat_badangles", "YesNo"
 	Option "Use Doom's floor motion behavior",			"compat_floormove", "YesNo"
+	// [BB] Out of order ZDoom backport.
+	Option "Non-blocking lines can be pushed",			"compat_pushwindow", "YesNo"
 
 	// [TP] Zandronum compatibility settings
 	StaticText " "
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1502025284 -7200
#      Sun Aug 06 15:14:44 2017 +0200
# Node ID a09712084028644595441ee3b59af5e937f9def2
# Parent  e834241f9d74a3af9f987c43b735a3f1f26180cd
The authentication mechanism for non-map related lumps now allows Freedoom 0.11.3/Doom clients to join Doom/Freedoom 0.11.3 servers.

diff -r e834241f9d74 -r a09712084028 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Tue Aug 09 20:15:13 2016 +0200
+++ b/docs/zandronum-history.txt	Sun Aug 06 15:14:44 2017 +0200
@@ -45,6 +45,7 @@
 +	- Added new ACS command SetDeadSpectator (int playernumber, int deadspectator). This command can turn alive players into dead spectators (deadspectator == 1) and revive dead spectators  (deadspectator == 0). [Torr Samaho]
 +	- Added the new ACS command SetActivatorToPlayer as a replacement solution for AAPTR_PLAYERx that works with all 64 players instead of only 8. [Dusk]
 +	- Added CVAR sv_forcerespawntime that controls the time delay before force respawn activates and respawns a player. [Ru5tK1ng]
++	- The authentication mechanism for non-map related lumps now allows Freedoom 0.11.3/Doom clients to join Doom/Freedoom 0.11.3 servers. [Torr Samaho] 
 -	- Fixed: Newly connecting clients were not properly informed about the secrets that were already revealed. [Torr Samaho]
 -	- Fixed: Resurrect cheat didn't work online. [Dusk]
 -	- Fixed: Turbo cheat didn't work online. [Dusk]
diff -r e834241f9d74 -r a09712084028 src/network.cpp
--- a/src/network.cpp	Tue Aug 09 20:15:13 2016 +0200
+++ b/src/network.cpp	Sun Aug 06 15:14:44 2017 +0200
@@ -386,7 +386,8 @@
 				// 4804c7f34b5285c334a7913dd98fae16 Freedoom 0.8-beta1 PLAYPAL hash
 				// 100c2c81afe87bb6dd1dbcadee9a7e58 Freedoom 0.8-beta1 COLORMAP hash
 				// 4c7d4028a88f7929d9c553f65bb265ba Freedoom 0.9 COLORMAP hash
-				if ( ( stricmp ( lumpsToAuthenticate[i].c_str(), "PLAYPAL" ) == 0 ) && ( ( stricmp ( checksum.GetChars(), "2e01ae6258f2a0fdad32125537efe1af" ) == 0 ) || ( stricmp ( checksum.GetChars(), "4804c7f34b5285c334a7913dd98fae16" ) == 0 ) ) )
+				// 2e01ae6258f2a0fdad32125537efe1af Freedoom 0.11.3 PLAYPAL hash
+				if ( ( stricmp ( lumpsToAuthenticate[i].c_str(), "PLAYPAL" ) == 0 ) && ( ( stricmp ( checksum.GetChars(), "2e01ae6258f2a0fdad32125537efe1af" ) == 0 ) || ( stricmp ( checksum.GetChars(), "4804c7f34b5285c334a7913dd98fae16" ) == 0 ) || ( stricmp ( checksum.GetChars(), "2e01ae6258f2a0fdad32125537efe1af" ) == 0 ) ) )
 					checksum = "4804c7f34b5285c334a7913dd98fae16";
 				else if ( ( stricmp ( lumpsToAuthenticate[i].c_str(), "COLORMAP" ) == 0 ) && ( ( stricmp ( checksum.GetChars(), "bb535e66cae508e3833a5d2de974267b" ) == 0 ) || ( stricmp ( checksum.GetChars(), "100c2c81afe87bb6dd1dbcadee9a7e58" ) == 0 ) || ( stricmp ( checksum.GetChars(), "4c7d4028a88f7929d9c553f65bb265ba" ) == 0 ) ) )
 					checksum = "061a4c0f80aa8029f2c1bc12dc2e261e";
@@ -410,6 +411,7 @@
 							|| ( stricmp ( checksum.GetChars(), "9de9ddd0bc435cb8572db76a13d3140f" ) == 0 ) // Freedoom 0.8
 							|| ( stricmp ( checksum.GetChars(), "90e9007b1efc1e35eeacc99c5971a15b" ) == 0 ) // Freedoom 0.9
 							|| ( stricmp ( checksum.GetChars(), "67b253fe502cbf269e2cd2f6b7e76f17" ) == 0 ) // Freedoom 0.10
+							|| ( stricmp ( checksum.GetChars(), "61f49a1c915c7ccaea016b51441bef1d" ) == 0 ) // Freedoom 0.11.3
 							) )
 						continue;
 
# HG changeset patch
# User Edoardo Prezioso <edo88@email.it>
# Date 1476887042 -7200
#      Wed Oct 19 16:24:02 2016 +0200
# Node ID 187974f45430973d86083783ebce6c2714cc6840
# Parent  a09712084028644595441ee3b59af5e937f9def2
Remove unneeded variable in doom sbar code.

diff -r a09712084028 -r 187974f45430 src/g_doom/doom_sbar.cpp
--- a/src/g_doom/doom_sbar.cpp	Sun Aug 06 15:14:44 2017 +0200
+++ b/src/g_doom/doom_sbar.cpp	Wed Oct 19 16:24:02 2016 +0200
@@ -92,8 +92,6 @@
 
 	void AttachToPlayer (player_t *player)
 	{
-		player_t *oldplayer = CPlayer;
-
 		DBaseStatusBar::AttachToPlayer (player);
 		if ( NETWORK_GetState( ) != NETSTATE_SINGLE )
 		{
# HG changeset patch
# User Edoardo Prezioso <edo88@email.it>
# Date 1476887933 -7200
#      Wed Oct 19 16:38:53 2016 +0200
# Node ID 7c73e83cdbfe5ddd71aecfb88e557fb08b8b67a6
# Parent  187974f45430973d86083783ebce6c2714cc6840
Apply zdoom svn r4167 changes in doom sbar code.

diff -r 187974f45430 -r 7c73e83cdbfe src/g_doom/doom_sbar.cpp
--- a/src/g_doom/doom_sbar.cpp	Wed Oct 19 16:24:02 2016 +0200
+++ b/src/g_doom/doom_sbar.cpp	Wed Oct 19 16:38:53 2016 +0200
@@ -116,7 +116,7 @@
 
 		if (state == HUD_Fullscreen)
 		{
-			SB_state = screen->GetPageCount ();
+			ST_SetNeedRefresh();
 			if ( cl_stfullscreenhud )
 				DrawFullScreenStuffST( );
 			else
@@ -142,7 +142,7 @@
 			if (CPlayer->inventorytics > 0 && !(level.flags & LEVEL_NOINVENTORYBAR))
 			{
 				DrawInventoryBar ();
-				SB_state = screen->GetPageCount ();
+				ST_SetNeedRefresh();
 			}
 		}
 	}
@@ -205,7 +205,7 @@
 
 		StatusBarTex.Unload ();
 
-		SB_state = screen->GetPageCount ();
+		ST_SetNeedRefresh();
 	}
 
 	void DrawMainBar ()
diff -r 187974f45430 -r 7c73e83cdbfe src/scoreboard.cpp
--- a/src/scoreboard.cpp	Wed Oct 19 16:24:02 2016 +0200
+++ b/src/scoreboard.cpp	Wed Oct 19 16:38:53 2016 +0200
@@ -3222,5 +3222,5 @@
 		scoreboard_DoRankingListPass( ulPlayer, 2, 0, 1, 0, 0, 0 );
 	}
 
-	BorderNeedRefresh = true;
+	V_SetBorderNeedRefresh();
 }
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1502050527 -10800
#      Sun Aug 06 23:15:27 2017 +0300
# Node ID 4e5d2a4155533a9af560e69118a7ab18c1b3ee06
# Parent  7c73e83cdbfe5ddd71aecfb88e557fb08b8b67a6
Fixed the wraithverge potentially causing players to become zombies (client thinks they're dead even when they're not). The wraithverge still needs a lot of work but at least this fixes the worst of it, addresses 1551.

diff -r 7c73e83cdbfe -r 4e5d2a415553 src/g_hexen/a_clericholy.cpp
--- a/src/g_hexen/a_clericholy.cpp	Wed Oct 19 16:38:53 2016 +0200
+++ b/src/g_hexen/a_clericholy.cpp	Sun Aug 06 23:15:27 2017 +0300
@@ -92,7 +92,9 @@
 				// ghost burns out faster when attacking players/bosses
 				health -= 6;
 			}
-			P_DamageMobj (thing, this, target, dam, NAME_Melee);
+			// [TP] Don't deal damage as the client
+			if ( NETWORK_InClientMode() == false )
+				P_DamageMobj (thing, this, target, dam, NAME_Melee);
 			if (pr_spiritslam() < 128)
 			{
 				Spawn ("HolyPuff", x, y, z, ALLOW_REPLACE);
# HG changeset patch
# User Edoardo Prezioso <edward.san.dev@gmail.com>
# Date 1502052025 -7200
#      Sun Aug 06 22:40:25 2017 +0200
# Node ID f0e5871080e41bff9befd78e820b7c04497abdee
# Parent  4e5d2a4155533a9af560e69118a7ab18c1b3ee06
- fixed the glitch with status bar and automap with no-hardware acceleration systems (addresses 2604).

diff -r 4e5d2a415553 -r f0e5871080e4 src/g_doom/doom_sbar.cpp
--- a/src/g_doom/doom_sbar.cpp	Sun Aug 06 23:15:27 2017 +0300
+++ b/src/g_doom/doom_sbar.cpp	Sun Aug 06 22:40:25 2017 +0200
@@ -212,6 +212,9 @@
 	{
 		int amount;
 
+		if (automapactive)
+			DrawImage (&StatusBarTex, 0, 0);
+
 		DrawAmmoStats ();
 		DrawFace ();
 		DrawKeys ();
@@ -223,9 +226,9 @@
 				OldPoints = CPlayer->lPointCount;
 				PointsRefresh = screen->GetPageCount ();
 			}
-			if (PointsRefresh)
+			if (PointsRefresh || automapactive)
 			{
-				PointsRefresh--;
+				if ( PointsRefresh ) PointsRefresh--;
 				DrawNumber (OldPoints, 138/*110*/, 3, 2);
 			}
 		}
@@ -236,9 +239,9 @@
 				OldFrags = CPlayer->fragcount;
 				FragsRefresh = screen->GetPageCount ();
 			}
-			if (FragsRefresh)
+			if (FragsRefresh || automapactive)
 			{
-				FragsRefresh--;
+				if ( FragsRefresh ) FragsRefresh--;
 				DrawNumber (OldFrags, 138/*110*/, 3, 2);
 			}
 		}
@@ -250,9 +253,9 @@
 			OldHealth = CPlayer->health;
 			HealthRefresh = screen->GetPageCount ();
 		}
-		if (HealthRefresh)
+		if (HealthRefresh || automapactive)
 		{
-			HealthRefresh--;
+			if ( HealthRefresh ) HealthRefresh--;
 			// [RC] If we're spying someone and aren't allowed to see his stats, draw dashes instead of numbers.
 			if ( NETWORK_InClientMode() &&
 				( SERVER_IsPlayerAllowedToKnowHealth( consoleplayer, ULONG( CPlayer - players ) ) == false ))
@@ -272,9 +275,9 @@
 			OldArmor = armorpoints;
 			ArmorRefresh = screen->GetPageCount ();
 		}
-		if (ArmorRefresh)
+		if (ArmorRefresh || automapactive)
 		{
-			ArmorRefresh--;
+			if ( ArmorRefresh ) ArmorRefresh--;
 			// [RC] If we're spying someone and aren't allowed to see his stats, draw dashes instead of numbers.
 			if(( NETWORK_GetState( ) == NETSTATE_CLIENT ) && ( SERVER_IsPlayerAllowedToKnowHealth( consoleplayer, ULONG( CPlayer - players ) ) == false ))
 				DrawUnknownDashs(221, 3);
@@ -298,9 +301,9 @@
 			OldActiveAmmo = amount;
 			ActiveAmmoRefresh = screen->GetPageCount ();
 		}
-		if (ActiveAmmoRefresh)
+		if (ActiveAmmoRefresh || automapactive)
 		{
-			ActiveAmmoRefresh--;
+			if ( ActiveAmmoRefresh ) ActiveAmmoRefresh--;
 			// [RC] If we're spying someone and aren't allowed to see his stats, draw dashes instead of numbers.
 			if ( NETWORK_InClientMode() &&
 				( SERVER_IsPlayerAllowedToKnowHealth( consoleplayer, ULONG( CPlayer - players ) ) == false ))
@@ -355,9 +358,9 @@
 
 		for (i = 0; i < 3; i++)
 		{
-			if (ArmsRefresh[i])
+			if (ArmsRefresh[i] || automapactive)
 			{
-				ArmsRefresh[i]--;
+				if ( ArmsRefresh[i] ) ArmsRefresh[i]--;
 				int x = 111 + i * 12;
 
 				DrawArm (arms[i], i, x, 4, true);
@@ -442,9 +445,9 @@
 		memcpy (OldAmmo, ammo, sizeof(ammo));
 		memcpy (OldMaxAmmo, maxammo, sizeof(ammo));
 
-		if (AmmoRefresh)
+		if (AmmoRefresh || automapactive)
 		{
-			AmmoRefresh--;
+			if ( AmmoRefresh ) AmmoRefresh--;
 			DrawPartialImage (&StatusBarTex, 276, 4*3);
 			for (i = 0; i < 4; i++)
 			{
@@ -452,9 +455,9 @@
 					DrSmallNumber (ammo[i], 276, 5 + 6*i);
 			}
 		}
-		if (MaxAmmoRefresh)
+		if (MaxAmmoRefresh || automapactive)
 		{
-			MaxAmmoRefresh--;
+			if ( MaxAmmoRefresh ) MaxAmmoRefresh--;
 			DrawPartialImage (&StatusBarTex, 302, 4*3);
 			for (i = 0; i < 4; i++)
 			{
@@ -495,9 +498,9 @@
 		}
 
 		// Draw keys that have changed since last time
-		if (KeysRefresh)
+		if (KeysRefresh || automapactive)
 		{
-			KeysRefresh--;
+			if ( KeysRefresh ) KeysRefresh--;
 			DrawPartialImage (&StatusBarTex, 239, 8);
 
 			// Blue Keys
# HG changeset patch
# User Teemu Piippo <teemu@hecknology.net>
# Date 1502622024 -10800
#      Sun Aug 13 14:00:24 2017 +0300
# Node ID f7ddc06c3606db6e080428822bd844417cd2bb09
# Parent  f0e5871080e41bff9befd78e820b7c04497abdee
Added a band-aid to keep Zandronum from crashing if an invalid video mode was selected, fixes 2383

diff -r f0e5871080e4 -r f7ddc06c3606 src/menu/videomenu.cpp
--- a/src/menu/videomenu.cpp	Sun Aug 06 22:40:25 2017 +0200
+++ b/src/menu/videomenu.cpp	Sun Aug 13 14:00:24 2017 +0300
@@ -364,6 +364,9 @@
 			{
 				*width = strtol (buffer, &breakpt, 10);
 				*height = strtol (breakpt+1, NULL, 10);
+				// [TP] Don't crash if an invalid mode was selected
+				if (( *width == 0 ) || ( *height == 0 ))
+					return false;
 				return true;
 			}
 		}
# HG changeset patch
# User alexey.lysiuk <alexey.lysiuk@gmail.com>
# Date 1502630131 -10800
#      Sun Aug 13 16:15:31 2017 +0300
# Node ID ce2647d14617a6445873a60313c370936fd7daf1
# Parent  f7ddc06c3606db6e080428822bd844417cd2bb09
Fixed crash when morph item is used from ACS

https://forum.zdoom.org/viewtopic.php?t=57571

diff -r f7ddc06c3606 -r ce2647d14617 src/p_acs.cpp
--- a/src/p_acs.cpp	Sun Aug 13 14:00:24 2017 +0300
+++ b/src/p_acs.cpp	Sun Aug 13 16:15:31 2017 +0300
@@ -1398,7 +1398,9 @@
 	AInventory *item = actor->FindInventory (info);
 	if (item != NULL)
 	{
-		if (actor->player == NULL)
+		player_t* const player = actor->player;
+
+		if (nullptr == player)
 		{
 			return actor->UseInventory(item);
 		}
@@ -1408,10 +1410,10 @@
 			bool res;
 
 			// Bypass CF_TOTALLYFROZEN
-			cheats = actor->player->cheats;
-			actor->player->cheats &= ~CF_TOTALLYFROZEN;
+			cheats = player->cheats;
+			player->cheats &= ~CF_TOTALLYFROZEN;
 			res = actor->UseInventory(item);
-			actor->player->cheats |= (cheats & CF_TOTALLYFROZEN);
+			player->cheats |= (cheats & CF_TOTALLYFROZEN);
 			return res;
 		}
 	}
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1503837150 -7200
#      Sun Aug 27 14:32:30 2017 +0200
# Node ID c560d9cabffedf5a9fe1c6d865550b6ce24b2088
# Parent  ce2647d14617a6445873a60313c370936fd7daf1
Fixed problems drawing the Doom status bar when the menu is active on systems without hardware acceleration (fixes 3230).

diff -r ce2647d14617 -r c560d9cabffe src/g_doom/doom_sbar.cpp
--- a/src/g_doom/doom_sbar.cpp	Sun Aug 13 16:15:31 2017 +0300
+++ b/src/g_doom/doom_sbar.cpp	Sun Aug 27 14:32:30 2017 +0200
@@ -64,6 +64,8 @@
 		BigHeight = tex->GetScaledHeight();
 
 		DoCommonInit ();
+
+		lastDrawnWithMenuActive = false;
 	}
 
 	~DDoomStatusBar ()
@@ -145,6 +147,8 @@
 				ST_SetNeedRefresh();
 			}
 		}
+
+		lastDrawnWithMenuActive = ( menuactive != MENU_Off );
 	}
 
 private:
@@ -208,11 +212,15 @@
 		ST_SetNeedRefresh();
 	}
 
+	bool ForceRefresh ( ) const {
+		return ( automapactive || ( menuactive != MENU_Off ) || ( ( menuactive == MENU_Off && lastDrawnWithMenuActive ) ) );
+	}
+
 	void DrawMainBar ()
 	{
 		int amount;
 
-		if (automapactive)
+		if ( ForceRefresh() )
 			DrawImage (&StatusBarTex, 0, 0);
 
 		DrawAmmoStats ();
@@ -226,7 +234,7 @@
 				OldPoints = CPlayer->lPointCount;
 				PointsRefresh = screen->GetPageCount ();
 			}
-			if (PointsRefresh || automapactive)
+			if (PointsRefresh || ForceRefresh())
 			{
 				if ( PointsRefresh ) PointsRefresh--;
 				DrawNumber (OldPoints, 138/*110*/, 3, 2);
@@ -239,7 +247,7 @@
 				OldFrags = CPlayer->fragcount;
 				FragsRefresh = screen->GetPageCount ();
 			}
-			if (FragsRefresh || automapactive)
+			if (FragsRefresh || ForceRefresh())
 			{
 				if ( FragsRefresh ) FragsRefresh--;
 				DrawNumber (OldFrags, 138/*110*/, 3, 2);
@@ -253,7 +261,7 @@
 			OldHealth = CPlayer->health;
 			HealthRefresh = screen->GetPageCount ();
 		}
-		if (HealthRefresh || automapactive)
+		if (HealthRefresh || ForceRefresh())
 		{
 			if ( HealthRefresh ) HealthRefresh--;
 			// [RC] If we're spying someone and aren't allowed to see his stats, draw dashes instead of numbers.
@@ -275,7 +283,7 @@
 			OldArmor = armorpoints;
 			ArmorRefresh = screen->GetPageCount ();
 		}
-		if (ArmorRefresh || automapactive)
+		if (ArmorRefresh || ForceRefresh())
 		{
 			if ( ArmorRefresh ) ArmorRefresh--;
 			// [RC] If we're spying someone and aren't allowed to see his stats, draw dashes instead of numbers.
@@ -301,7 +309,7 @@
 			OldActiveAmmo = amount;
 			ActiveAmmoRefresh = screen->GetPageCount ();
 		}
-		if (ActiveAmmoRefresh || automapactive)
+		if (ActiveAmmoRefresh || ForceRefresh())
 		{
 			if ( ActiveAmmoRefresh ) ActiveAmmoRefresh--;
 			// [RC] If we're spying someone and aren't allowed to see his stats, draw dashes instead of numbers.
@@ -358,7 +366,7 @@
 
 		for (i = 0; i < 3; i++)
 		{
-			if (ArmsRefresh[i] || automapactive)
+			if (ArmsRefresh[i] || ForceRefresh())
 			{
 				if ( ArmsRefresh[i] ) ArmsRefresh[i]--;
 				int x = 111 + i * 12;
@@ -445,7 +453,7 @@
 		memcpy (OldAmmo, ammo, sizeof(ammo));
 		memcpy (OldMaxAmmo, maxammo, sizeof(ammo));
 
-		if (AmmoRefresh || automapactive)
+		if (AmmoRefresh || ForceRefresh())
 		{
 			if ( AmmoRefresh ) AmmoRefresh--;
 			DrawPartialImage (&StatusBarTex, 276, 4*3);
@@ -455,7 +463,7 @@
 					DrSmallNumber (ammo[i], 276, 5 + 6*i);
 			}
 		}
-		if (MaxAmmoRefresh || automapactive)
+		if (MaxAmmoRefresh || ForceRefresh())
 		{
 			if ( MaxAmmoRefresh ) MaxAmmoRefresh--;
 			DrawPartialImage (&StatusBarTex, 302, 4*3);
@@ -498,7 +506,7 @@
 		}
 
 		// Draw keys that have changed since last time
-		if (KeysRefresh || automapactive)
+		if (KeysRefresh || ForceRefresh())
 		{
 			if ( KeysRefresh ) KeysRefresh--;
 			DrawPartialImage (&StatusBarTex, 239, 8);
@@ -1417,6 +1425,7 @@
 	int OldActiveAmmo;
 	int OldFrags;
 	int OldPoints;
+	bool lastDrawnWithMenuActive;
 
 	char HealthRefresh;
 	char ArmorRefresh;
# HG changeset patch
# User Benjamin Berkels <torr.samaho@quantentunnel.de>
# Date 1504266050 18000
#      Fri Sep 01 06:40:50 2017 -0500
# Node ID dd3c3b57023f64cda84f09ed13e4c03a4ad2b920
# Parent  c560d9cabffedf5a9fe1c6d865550b6ce24b2088
- changed the version string to 3.0
- changed BUILD_ID/BUILD_ID_STR to release

diff -r c560d9cabffe -r dd3c3b57023f src/version.h
--- a/src/version.h	Sun Aug 27 14:32:30 2017 +0200
+++ b/src/version.h	Fri Sep 01 06:40:50 2017 -0500
@@ -47,7 +47,7 @@
 #define GAME_MAJOR_VERSION 3
 #define GAME_MINOR_VERSION 0
 #define GAMEVER_STRING "3.0"
-#define DOTVERSIONSTR GAMEVER_STRING "-alpha"
+#define DOTVERSIONSTR GAMEVER_STRING
 #define VERSIONSTR DOTVERSIONSTR
 
 // [BB] The version string that includes revision / compatibility data.
@@ -66,8 +66,8 @@
 #define BUILD_PRIVATE		3
 
 // [RC] Release code ID for this build.
-#define BUILD_ID			BUILD_INTERNAL
-#define BUILD_ID_STR		"Internal" // Used in the exe's metadata.
+#define BUILD_ID			BUILD_RELEASE
+#define BUILD_ID_STR		"Release" // Used in the exe's metadata.
 
 // Version identifier for network games.
 // Bump it every time you do a release unless you're certain you
